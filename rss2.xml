<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LiAng的博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>永远相信美好的事情即将发生</description>
    <pubDate>Wed, 20 Jul 2022 15:34:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Spring5</title>
      <link>http://example.com/2022/07/20/Spring5/</link>
      <guid>http://example.com/2022/07/20/Spring5/</guid>
      <pubDate>Wed, 20 Jul 2022 15:30:08 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Spring5&quot;&gt;&lt;a href=&quot;#Spring5&quot; class=&quot;headerlink&quot; title=&quot;Spring5&quot;&gt;&lt;/a&gt;Spring5&lt;/h1&gt;&lt;h1 id=&quot;第一章-Spring5基本介绍&quot;&gt;&lt;a href=&quot;#第一章-Spring5基本介绍&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h1><h1 id="第一章-Spring5基本介绍"><a href="#第一章-Spring5基本介绍" class="headerlink" title="第一章 Spring5基本介绍"></a>第一章 Spring5基本介绍</h1><h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://spring.io/">https://spring.io/</a></p><h3 id="Spring5下载"><a href="#Spring5下载" class="headerlink" title="Spring5下载"></a>Spring5下载</h3><p>1.进入该网站</p><p><a href="https://repo.spring.io/">https://repo.spring.io</a></p><p>2.找到Artifacts</p><img src="\images\Spring5.assets\image-20220606085147170-16583309737161.png" alt="image-20220606085147170" style="zoom: 67%;" /><p>3.点开release</p><img src="\images\Spring5.assets\image-20220606085226240-16583309737162.png" alt="image-20220606085226240" style="zoom: 80%;" /><p>4.在release中找到org下的 springframework</p><img src="\images\Spring5.assets\image-20220606085316723-16583309737164.png" alt="image-20220606085316723" style="zoom:67%;" /><p>5.然后找到spring，右侧会出现下载地址 <a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p><div align="center"> <img src="\images\Spring5.assets\image-20220606085406607-16583309737163.png"> </div> <p>6.找到需要的版本进行下载</p><img src="\images\Spring5.assets\image-20220606085547670-16583309737175.png" alt="image-20220606085547670" style="zoom: 80%;" /><div align="center"> <img src="\images\Spring5.assets\image-20220606085648344.png"> </div> <p>​（离线文档也在里面）</p><h3 id="在线文档"><a href="#在线文档" class="headerlink" title="在线文档"></a>在线文档</h3><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></p><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><img src="\images\Spring5.assets\image-20220606090728558-16583309737176.png" alt="image-20220606090728558" style="zoom:67%;" /><ol><li>Spring 核心学习内容 IOC、AOP、jdbcTemplate、声明式事务。</li><li>IOC：控制反转，可以管理 java 对象。（重难点）</li><li>AOP：切面编程。（重难点）</li><li>JDBCTemplate：是 spring 提供一套访问数据库的技术，应用性强，相对好理解。</li><li>声明式事务：基于 ioc&#x2F;aop 实现事务管理。</li></ol><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ol><li><strong>Spring 可以整合其他的框架（Spring是管理框架的框架）。</strong></li><li><strong>Spring 有两个核心的概念：IOC 和 AOP。</strong></li><li><strong>IOC [Inversion Of Control 反转控制]</strong></li><li><strong>DI—Dependency Injection 依赖注入，可以理解成是 IOC 的另外叫法。</strong></li><li><strong>Spring 最大的价值，通过配置，给程序提供需要使用的web 层[Servlet(Action&#x2F;Controller)]&#x2F;Service&#x2F;Dao&#x2F;[JavaBean&#x2F;entity]对象，这个是核心价值所在，也是 IOC 的具体体现，实现解耦。</strong></li></ol><img src="\images\Spring5.assets\image-20220606091226545-16583309737177.png" alt="image-20220606091226545" style="zoom: 67%;" /><p><strong>传统的开发模式</strong></p><img src="\images\Spring5.assets\image-20220606091356788-16583309737178.png" alt="image-20220606091356788" style="zoom:80%;" /><ol><li>程序员编写程序，在程序中读取配置信息。</li><li>创建对象, new Object()&#x2F;&#x2F;反射</li><li>使用对象完成任务</li></ol><p><strong>IOC 的开发模式</strong> [EmpAction EmpService EmpDao Emp]</p><p>容器—-&gt;程序 &#x2F;&#x2F;容器创建好对象，程序直接使用。</p><img src="\images\Spring5.assets\image-20220606091654286-16583309737179.png" alt="image-20220606091654286" style="zoom: 80%;" /><ol><li>Spring 根据配置文件 xml&#x2F;注解，创建对象， 并放入到容器(ConcurrentHashMap等)中，并且可以完成对象之间的依赖。</li><li>当需要使用某个对象实例的时候，就直接从容器中获取即可。</li><li>程序员可以更加关注如何使用对象完成相应的业务。(以前是 new … &#x3D;&#x3D;&gt; 注解&#x2F;配置 方式)</li><li>DI—Dependency Injection 依赖注入，可以理解成是 IOC 的另外叫法。</li><li>Spring 最大的价值，通过配置，给程序提供需要使用的 web 层[Servlet(Action&#x2F;Controller)]&#x2F;Service&#x2F;Dao&#x2F;[JavaBean&#x2F;entity]对象，这个是核心价值所在，也是 ioc 的具体体现，实现解耦。</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>​通过 Spring 的方式[配置文件]，获取 JavaBean: Monster 的对象，并给该的对象属性赋 值，输出该对象信息。</p><p><strong>注意：创建好java工程后，要引入相关的spring5基本包</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220606094933528.png"> </div> <img src="\images\Spring5.assets\image-20220606095253566-165833097371710.png" alt="image-20220606095253566" style="zoom: 80%;" /><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer monsterID;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器一定要写，Spring反射创建对象时需要使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(Integer monsterID, String name, String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterID = monsterID;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getMonsterID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterID</span><span class="params">(Integer monsterID)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterID = monsterID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSkill</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkill</span><span class="params">(String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;monsterID=&quot;</span> + monsterID +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, skill=&#x27;&quot;</span> + skill + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建spring的配置文件"><a href="#创建spring的配置文件" class="headerlink" title="创建spring的配置文件"></a>创建spring的配置文件</h4><img src="\images\Spring5.assets\image-20220606095714158-165833097371711.png" alt="image-20220606095714158" style="zoom: 80%;" /><div align="center"> <img src="\images\Spring5.assets\image-20220606095751103.png"> </div> <img src="\images\Spring5.assets\image-20220606095834123-165833097371712.png" alt="image-20220606095834123"  /><div align="center"> <img src="\images\Spring5.assets\image-20220606095914335-165833097371713.png"> </div> <img src="\images\Spring5.assets\image-20220606095944659-165833097371715.png" alt="image-20220606095944659"  /><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   1. 配置monster对象/javabean</span></span><br><span class="line"><span class="comment">   2. 在beans中可以配置多个bean</span></span><br><span class="line"><span class="comment">   3. bean表示就是一个java对象</span></span><br><span class="line"><span class="comment">   4. class属性是用于指定类的全路径-&gt;spring底层使用反射创建</span></span><br><span class="line"><span class="comment">   5. id属性表示该java对象在spring容器中的id, 通过id可以获取到对象</span></span><br><span class="line"><span class="comment">   6. &lt;property name=&quot;monsterId&quot; value=&quot;100&quot;&gt; 用于给该对象的属性赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">id</span>=<span class="string">&quot;monster01&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛魔王&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛮牛冲撞&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">id</span>=<span class="string">&quot;monster02&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛魔王~&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;芭蕉扇~&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="获取Monster对象"><a href="#获取Monster对象" class="headerlink" title="获取Monster对象"></a>获取Monster对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBeanTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMonster</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建容器 ApplicationContext</span></span><br><span class="line">        <span class="comment">//2. 该容器和容器配置文件关联</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 通过getBean获取对应的对象</span></span><br><span class="line">        <span class="comment">//   默认返回的是Object , 但是运行类型是Monster</span></span><br><span class="line">        <span class="comment">//Object monster01 = ioc.getBean(&quot;monster01&quot;);</span></span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> (Monster)ioc.getBean(<span class="string">&quot;monster01&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;monster01=&quot;</span> + monster01 + <span class="string">&quot; 运行类型=&quot;</span> + monster01.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;monster01=&quot;</span> + monster01 + <span class="string">&quot;属性name=&quot;</span> + monster01.getName() + <span class="string">&quot;，monserid=&quot;</span> + monster01.getMonsterID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 也可以再获取的时候，直接指定Class类型, 可以直接获取</span></span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster02=&quot;</span> + monster02 + <span class="string">&quot; 运行类型=&quot;</span> + monster02.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;monster02=&quot;</span> + monster02 + <span class="string">&quot;属性name=&quot;</span> + monster02.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><h4 id="1-怎么读取到了-beans-xml"><a href="#1-怎么读取到了-beans-xml" class="headerlink" title="1.怎么读取到了 beans.xml"></a>1.怎么读取到了 beans.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>读取的是out目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath());</span><br><span class="line">System.out.println(file);<span class="comment">//E:\VIP\AllDemo\Spring5\spring\out\production\spring</span></span><br></pre></td></tr></table></figure><h4 id="2-debug查看spring容器结构"><a href="#2-debug查看spring容器结构" class="headerlink" title="2.debug查看spring容器结构"></a>2.debug查看spring容器结构</h4><p>注意：配置debugger</p><img src="\images\Spring5.assets\image-20220606102901613-165833097371714.png" alt="image-20220606102901613" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606105540124-165833097371716.png" alt="image-20220606105540124" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606105851533-165833097371717.png" alt="image-20220606105851533" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606105949615-165833097371718.png" alt="image-20220606105949615" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606110819525-165833097371719.png" alt="image-20220606110819525" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606111207895-165833097371720.png" alt="image-20220606111207895" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606111359543-165833097371721.png" alt="image-20220606111359543" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606111442171-165833097371722.png" alt="image-20220606111442171" style="zoom:80%;" /><h4 id="3-查看容器注入了哪些bean对象"><a href="#3-查看容器注入了哪些bean对象" class="headerlink" title="3.查看容器注入了哪些bean对象"></a>3.查看容器注入了哪些bean对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] beanDefinitionNames = ioc.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">System.out.println(beanDefinitionName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606112058276-165833097371724.png"> </div> <h2 id="手动实现简单的Spring基于xml配置的程序"><a href="#手动实现简单的Spring基于xml配置的程序" class="headerlink" title="手动实现简单的Spring基于xml配置的程序"></a>手动实现简单的Spring基于xml配置的程序</h2><h3 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h3><p>​自己写（模拟）一个简单的 Spring 容器，通过读取 beans.xml，获取第 1 个 JavaBean: Monster 的 对象，并给该的对象属性赋值，放入到容器中，输出该对象信息。</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><div align="center"> <img src="\images\Spring5.assets\image-20220606141707615-165833097371723.png"> </div> <h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>​记得导入dom4j包。beans.xml ，Monster.java 和上文中的一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.lzwapplicationcontext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 1. 这个程序用于实现Spring的一个简单容器机制</span></span><br><span class="line"><span class="comment"> * 2. 后面我们还会详细实现</span></span><br><span class="line"><span class="comment"> * 3. 这里我们实现如何将beans.xml文件进行解析，并生成对象,放入容器中</span></span><br><span class="line"><span class="comment"> * 4. 提供一个方法 getBean(id) 返回对应的对象</span></span><br><span class="line"><span class="comment"> * 5. 这里仅仅只是理解Spring容器的机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//接收一个容器的配置文件 比如 beans.xml, 该文件默认在src</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwApplicationContext</span><span class="params">(String iocBeanXmlFile)</span> <span class="keyword">throws</span> DocumentException, ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//1. 得到类加载路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//2. 创建 Saxreader</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">//3. 得到Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="keyword">new</span> <span class="title class_">File</span>(path + iocBeanXmlFile));</span><br><span class="line">        <span class="comment">//4. 得到rootDocument</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">//5. 得到第一个bean-monster01</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">bean</span> <span class="operator">=</span> (Element) rootElement.elements(<span class="string">&quot;bean&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//6. 获取到第一个bean-monster01的相关属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">classFullPath</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">        List&lt;Element&gt; property = bean.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历-&gt;简化直接获取</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">monsterID</span> <span class="operator">=</span> Integer.parseInt(property.get(<span class="number">0</span>).attributeValue(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> property.get(<span class="number">1</span>).attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">skill</span> <span class="operator">=</span> property.get(<span class="number">2</span>).attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//7. 使用反射创建对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(classFullPath);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">o</span> <span class="operator">=</span> (Monster) aClass.newInstance();</span><br><span class="line">        <span class="comment">//给o对象赋值</span></span><br><span class="line">        <span class="comment">//反射来赋值=&gt; 这里简化，直接赋值-&gt;目的就是先理解流程</span></span><br><span class="line">        <span class="comment">//这里的方法就是setter方法</span></span><br><span class="line">        <span class="comment">//Method[] declaredMethods = aClass.getDeclaredMethods();</span></span><br><span class="line">        <span class="comment">//for (Method declaredMethod : declaredMethods) &#123;</span></span><br><span class="line">        <span class="comment">//    declaredMethod.invoke();</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        o.setMonsterID(monsterID);</span><br><span class="line">        o.setName(name);</span><br><span class="line">        o.setSkill(skill);</span><br><span class="line">        <span class="comment">//8. 将创建好的对象放入到singletonObjects</span></span><br><span class="line">        singletonObjects.put(id, o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletonObjects.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException, IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">LzwApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LzwApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606144605182-165833097371725.png"> </div> <h2 id="Spring-原生容器底层结构"><a href="#Spring-原生容器底层结构" class="headerlink" title="Spring 原生容器底层结构"></a>Spring 原生容器底层结构</h2><div align="center"> <img src="\images\Spring5.assets\image-20220606144822631-165833097371727.png"> </div> <hr><h1 id="第二章-Spring管理Bean-IOC"><a href="#第二章-Spring管理Bean-IOC" class="headerlink" title="第二章 Spring管理Bean-IOC"></a>第二章 Spring管理Bean-IOC</h1><h2 id="Spring-配置-x2F-管理-bean-介绍"><a href="#Spring-配置-x2F-管理-bean-介绍" class="headerlink" title="Spring 配置&#x2F;管理 bean 介绍"></a>Spring 配置&#x2F;管理 bean 介绍</h2><h3 id="Bean-管理包括两方面"><a href="#Bean-管理包括两方面" class="headerlink" title="Bean 管理包括两方面"></a>Bean 管理包括两方面</h3><ol><li>创建 bean 对象  2. 给 bean 注入属性</li></ol><h3 id="Bean-配置方式"><a href="#Bean-配置方式" class="headerlink" title="Bean 配置方式"></a>Bean 配置方式</h3><ol><li>基于 xml 文件配置方式  2. 基于注解方式</li></ol><h2 id="基于-XML-配置-bean"><a href="#基于-XML-配置-bean" class="headerlink" title="基于 XML 配置 bean"></a>基于 XML 配置 bean</h2><h3 id="通过id来获取-bean"><a href="#通过id来获取-bean" class="headerlink" title="通过id来获取 bean"></a>通过id来获取 bean</h3><p>​Spring5基本介绍这一章中都是通过id来获取 bean，在此不再赘述。</p><h3 id="通过类型来获取-bean"><a href="#通过类型来获取-bean" class="headerlink" title="通过类型来获取 bean"></a>通过类型来获取 bean</h3><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Monster,通过类型来获取--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           1.当我们给某个bean对象设置属性的时候</span></span><br><span class="line"><span class="comment">           2.底层是使用对应的setter方法完成的, 比如setName()</span></span><br><span class="line"><span class="comment">           3.如果没有这个方法，就会报错</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛魔王&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛮牛冲撞&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Bean类型来获取对象</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByType</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//直接传入class类型</span></span><br><span class="line">       <span class="type">Monster</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(Monster.class);</span><br><span class="line">       System.out.println(bean);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h4><ol><li>按类型来获取 bean，要求 ioc 容器中的同一个类的 bean 只能有一个，否则会抛出异常 NoUniqueBeanDefinitionException。</li></ol><div align="center"> <img src="\images\Spring5.assets\image-20220606155733023-165833097371729.png"> </div> <ol start="2"><li><p>这种方式的应用场景：比如 XxxAction&#x2F;Servlet&#x2F;Controller，或 XxxService 等在一个线程中只需要一个对象实例(单例)的情况。</p></li><li><p>在容器配置文件(比如 beans.xml)中给属性赋值， 底层是通过 setter 方法完成的，这也是为什么我们需要提供 setter 方法的原因。</p></li></ol><h3 id="通过构造器配置-bean"><a href="#通过构造器配置-bean" class="headerlink" title="通过构造器配置 bean"></a>通过构造器配置 bean</h3><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  配置Monster对象，并且指定构造器</span></span><br><span class="line"><span class="comment">     1. constructor-arg标签可以指定使用构造器的参数</span></span><br><span class="line"><span class="comment">     2. index表示构造器的第几个参数 从0开始计算的</span></span><br><span class="line"><span class="comment">     3. 除了可以通过index 还可以通过 name / type 来指定参数方式</span></span><br><span class="line"><span class="comment">     4. 解除大家的疑惑, 类的构造器，不能有完全相同类型和顺序的构造器，所以可以通过type来指定</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;白骨精&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;吸血&quot;</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;白骨精&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;吸血~&quot;</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;300&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;白骨精~&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;吸血~~&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过构造器来设置属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster03</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster03&quot;</span>,Monster.class);</span><br><span class="line">        System.out.println(monster03);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="细节说明-1"><a href="#细节说明-1" class="headerlink" title="细节说明"></a>细节说明</h4><ol><li>通过 index 属性来区分是第几个参数。2. 通过 type 属性来区分是什么类型(按照顺序)。</li></ol><h3 id="通过-p-名称空间配置-bean"><a href="#通过-p-名称空间配置-bean" class="headerlink" title="通过 p 名称空间配置 bean"></a>通过 p 名称空间配置 bean</h3><p>报错的时候，需要添加xmlns</p><img src="\images\Spring5.assets\image-20220606172244501-165833097371730.png" alt="image-20220606172244501" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606172317833-165833097371731.png" alt="image-20220606172317833" style="zoom:80%;" /><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster06&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">p:monsterID</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">p:name</span>=<span class="string">&quot;红孩儿&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">p:skill</span>=<span class="string">&quot;喷火&quot;</span></span></span><br><span class="line"><span class="tag">   /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通p名称空间来设置属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByP</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster06</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster06&quot;</span>,Monster.class);</span><br><span class="line">        System.out.println(monster06);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引用-x2F-注入其它-bean-对象"><a href="#引用-x2F-注入其它-bean-对象" class="headerlink" title="引用&#x2F;注入其它 bean 对象"></a>引用&#x2F;注入其它 bean 对象</h3><p>​在 spring 的 ioc 容器, 可以通过 ref 来实现 bean 对象的<strong>相互引用</strong>。</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * DAO对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDAOImpl</span> &#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MemberDAOImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberDAOImpl 构造器...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberDAOImpl add()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.dao.MemberDAOImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * Service类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberServiceImpl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MemberDAOImpl memberDAO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MemberDAOImpl <span class="title function_">getMemberDAO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memberDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemberDAO</span><span class="params">(MemberDAOImpl memberDAO)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberDAO = memberDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberServiceImpl add() 被调用&quot;</span>);</span><br><span class="line">        memberDAO.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置MemberDAOImpl对象</span></span><br><span class="line"><span class="comment">       1. ref=&quot;memberDAO&quot;表示  MemberServiceImpl对象属性memberDAO引用的对象是id=memberDAO的对象</span></span><br><span class="line"><span class="comment">       2. 这里就体现出spring容器的依赖注入</span></span><br><span class="line"><span class="comment">       3. 注意再spring容器中, 他是作为一个整体来执行的, 即如果你引用到一个bean对象, 对你配置的顺序没有要求</span></span><br><span class="line"><span class="comment">       4. 建议还是按顺序，好处是阅读的时候，比较方便</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.MemberDAOImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置MemberServiceImpl--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过ref设置bean属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByRef</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">MemberServiceImpl</span> <span class="variable">monsterService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;memberService&quot;</span>, MemberServiceImpl.class);</span><br><span class="line">        monsterService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606174010325-165833097371732.png"> </div> <h3 id="引用-x2F-注入内部-bean-对象"><a href="#引用-x2F-注入内部-bean-对象" class="headerlink" title="引用&#x2F;注入内部 bean 对象"></a>引用&#x2F;注入内部 bean 对象</h3><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置MemberServiceImpl对象-使用内部bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService2&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--自己配置一个内部bean--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.5lzw.spring.dao.MemberDAOImpl&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过内部bean设置属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByPro</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">MemberServiceImpl</span> <span class="variable">monsterServi5ce2</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;memberService2&quot;</span>, MemberServiceImpl.class);</span><br><span class="line">        monsterService2.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引用-x2F-注入集合-x2F-数组类型"><a href="#引用-x2F-注入集合-x2F-数组类型" class="headerlink" title="引用&#x2F;注入集合&#x2F;数组类型"></a>引用&#x2F;注入集合&#x2F;数组类型</h3><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//主人名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Monster&gt; monsterList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Monster&gt; monsterMap;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Monster&gt; monsterSet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] monsterName;</span><br><span class="line">    <span class="comment">//这个 Properties 是 Hashtable 的子类 , 是 key-value 的形式</span></span><br><span class="line">    <span class="comment">//这里 Properties key 和 value 都是 String</span></span><br><span class="line">    <span class="keyword">private</span> Properties pros;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Monster&gt; <span class="title function_">getMonsterList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterList</span><span class="params">(List&lt;Monster&gt; monsterList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterList = monsterList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Monster&gt; <span class="title function_">getMonsterMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterMap</span><span class="params">(Map&lt;String, Monster&gt; monsterMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterMap = monsterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Monster&gt; <span class="title function_">getMonsterSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterSet</span><span class="params">(Set&lt;Monster&gt; monsterSet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterSet = monsterSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getMonsterName() &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterName</span><span class="params">(String[] monsterName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterName = monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getPros</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pros;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPros</span><span class="params">(Properties pros)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pros = pros;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Master&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, monsterList=&quot;</span> + monsterList +</span><br><span class="line">                <span class="string">&quot;, monsterMap=&quot;</span> + monsterMap +</span><br><span class="line">                <span class="string">&quot;, monsterSet=&quot;</span> + monsterSet +</span><br><span class="line">                <span class="string">&quot;, monsterName=&quot;</span> + Arrays.toString(monsterName) +</span><br><span class="line">                <span class="string">&quot;, pros=&quot;</span> + pros +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Master对象</span></span><br><span class="line"><span class="comment">       体会 spring 容器配置特点 依赖注入-非常灵活</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Master&quot;</span> <span class="attr">id</span>=<span class="string">&quot;master&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;太上老君&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给list属性赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterList&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--引用其他bean--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster01&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster02&quot;</span>/&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;老鼠精&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃粮食&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给map属性赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterMap&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>monster03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--这里使用外部bean引入--&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster03&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>monster04<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster04&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给set属性赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterSet&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster05&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster06&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;金角大王&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吐水&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给数组属性赋值</span></span><br><span class="line"><span class="comment">           array标签中使用 value 还是 bean , ref .. 要根据你的业务决定</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterName&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>小妖怪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>大妖怪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>老妖怪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给Properties属性赋值 结构k(String)-v(String)--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pros&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;ip&quot;</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByCollection</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;master&quot;</span>, Master.class);</span><br><span class="line">    System.out.println(master);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节说明-2"><a href="#细节说明-2" class="headerlink" title="细节说明"></a>细节说明</h4><ol><li>主要掌握List&#x2F;Map&#x2F;Properties三种集合的使用</li><li>Properties集合的特点。</li></ol><p>​（1）Properties 是 Hashtable 的子类 , 是 key-value 的形式。（2）key 和 value 都是 String。</p><h3 id="通过-util-名称空间创建-list"><a href="#通过-util-名称空间创建-list" class="headerlink" title="通过 util 名称空间创建 list"></a>通过 util 名称空间创建 list</h3><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookStore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; bookList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookStore</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBookList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookList</span><span class="params">(List&lt;String&gt; bookList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookList = bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BookStore&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;bookList=&quot;</span> + bookList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义一个util:list 并且指定id 可以达到数据复用</span></span><br><span class="line"><span class="comment">   在使用util:list 名称空间时候，需要引入相应的标签, 一般来说通过alt+enter会自动加入</span></span><br><span class="line"><span class="comment">   , 如果没有就手动添加一下即可.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;myBookList&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置BookStore对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.BookStore&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bookStore&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myBookList&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过util:list名称空间给属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByUtilList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookStore</span> <span class="variable">bookStore</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;bookStore&quot;</span>, BookStore.class);</span><br><span class="line">        System.out.println(bookStore);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="级联属性赋值"><a href="#级联属性赋值" class="headerlink" title="级联属性赋值"></a>级联属性赋值</h3><p>​spring 的 ioc 容器, 可以直接给对象属性的属性赋值， 即级联属性赋值。</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 部门类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dept</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 员工类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dept=&quot;</span> + dept +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Dept对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Dept&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置Emp对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Emp&quot;</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--这里我希望给dept的name属性指定值[级联属性赋值]--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java开发部门&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给属性进行级联赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByRelation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;emp=&quot;</span> + emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194740319-165833097371833.png"> </div> <h3 id="通过静态工厂获取bean"><a href="#通过静态工厂获取bean" class="headerlink" title="通过静态工厂获取bean"></a>通过静态工厂获取bean</h3><p>​在 spring 的 ioc 容器，可以通过静态工厂获取 bean 对象。</p><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 静态工厂类-可以返回Monster对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStaticFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Monster&gt; monsterMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用static代码块进行初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        monsterMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Monster&gt;();</span><br><span class="line">        monsterMap.put(<span class="string">&quot;monster_01&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;黄袍怪&quot;</span>, <span class="string">&quot;一阳指&quot;</span>));</span><br><span class="line">        monsterMap.put(<span class="string">&quot;monster_02&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">200</span>, <span class="string">&quot;九头金雕&quot;</span>, <span class="string">&quot;如来神掌&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个方法，返回Monster对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Monster <span class="title function_">getMonster</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置monster对象,通过静态工厂获取</span></span><br><span class="line"><span class="comment">      1. 通过静态工厂获取/配置bean</span></span><br><span class="line"><span class="comment">      2. class 是静态工厂类的全路径</span></span><br><span class="line"><span class="comment">      3. factory-method 表示是指定静态工厂类的哪个方法返回对象</span></span><br><span class="line"><span class="comment">      4. constructor-arg value=&quot;monster02&quot; value是指定要返回静态工厂的哪个对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_02&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_02&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过静态工厂获取bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByStaticFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster01&quot;</span>, Monster.class);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster02&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster01=&quot;</span> + my_monster01);</span><br><span class="line">        System.out.println(my_monster01 == my_monster02);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194723400-165833097371834.png"> </div> <h3 id="通过实例工厂获取对象"><a href="#通过实例工厂获取对象" class="headerlink" title="通过实例工厂获取对象"></a>通过实例工厂获取对象</h3><p>​在 spring 的 ioc 容器，可以通过实例工厂获取 bean 对象。</p><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 实例工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInstanceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Monster&gt; monster_map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过普通代码块进行初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        monster_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster_03&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">300</span>, <span class="string">&quot;牛魔王~&quot;</span>, <span class="string">&quot;芭蕉扇~&quot;</span>));</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster_04&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">400</span>, <span class="string">&quot;狐狸精~&quot;</span>, <span class="string">&quot;美人计~&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法返回Monster对象</span></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">getMonster</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monster_map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置2个实例工厂对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyInstanceFactory&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyInstanceFactory&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInstanceFactory2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置monster对象, 通过实例工厂</span></span><br><span class="line"><span class="comment">       1. factory-bean 指定使用哪个实例工厂对象返回bean</span></span><br><span class="line"><span class="comment">       2. factory-method 指定使用实例工厂对象的哪个方法返回bean</span></span><br><span class="line"><span class="comment">       3. constructor-arg value=&quot;monster03&quot; 指定获取到实例工厂中的哪个monster</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster03&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_03&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster04&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myInstanceFactory2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_03&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过实例工厂获取bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByInstanceFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster03</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster03&quot;</span>, Monster.class);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster04</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster04&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster03=&quot;</span> + my_monster03);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster04=&quot;</span> + my_monster04);</span><br><span class="line">        System.out.println(my_monster03 == my_monster04);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194707616-165833097371835.png"> </div> <h3 id="通过-FactoryBean-获取对象-重点"><a href="#通过-FactoryBean-获取对象-重点" class="headerlink" title="通过 FactoryBean 获取对象(重点)"></a>通过 FactoryBean 获取对象(重点)</h3><p>​在 spring 的 ioc 容器，通过 FactoryBean 获取 bean 对象(重点)。</p><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 是一个FactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Monster&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个就是你配置时候，指定要获取的对象对应key</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Monster&gt; monster_map;</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">//代码块，完成初始化</span></span><br><span class="line">        monster_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster03&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">300</span>, <span class="string">&quot;牛魔王~&quot;</span>, <span class="string">&quot;芭蕉扇~&quot;</span>));</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster04&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">400</span>, <span class="string">&quot;狐狸精~&quot;</span>, <span class="string">&quot;美人计~&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> monster_map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Monster.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;<span class="comment">//这里指定返回是否是单例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置monster对象，通过FactoryBean获取</span></span><br><span class="line"><span class="comment">      1. class 指定使用的FactoryBean</span></span><br><span class="line"><span class="comment">      2. key表示就是 MyFactoryBean 属性key</span></span><br><span class="line"><span class="comment">      3. value就是你要获取的对象对应key</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;monster04&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过FactoryBean获取bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster05</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster05&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster05=&quot;</span> + my_monster05);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194646489-165833097371836.png"> </div> <h3 id="bean-配置信息重用-继承"><a href="#bean-配置信息重用-继承" class="headerlink" title="bean 配置信息重用(继承)"></a>bean 配置信息重用(继承)</h3><p>​在 spring 的 ioc 容器，提供了一种继承的方式来实现 bean 配置信息的重用。</p><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Monster对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜈蚣精&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜇人&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      1. 配置Monster对象</span></span><br><span class="line"><span class="comment">      2.但是这个对象的属性值和 id=&quot;monster10&quot;对象属性一样</span></span><br><span class="line"><span class="comment">      3.parent=&quot;monster10&quot; 指定当前这个配置的对象的属性值从 id=monster10的对象来</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;monster10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置Monster对象</span></span><br><span class="line"><span class="comment">       1. 如果bean指定了 abstract=&quot;true&quot;, 表示该bean对象, 是用于被继承</span></span><br><span class="line"><span class="comment">       2. 本身这个bean就不能被获取/实例化</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster12&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜈蚣精~&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜇人~&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster13&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;monster12&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置Bean通过继承</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByExtends</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster11</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster11&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster11=&quot;</span> + monster11);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster13</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster13&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster13=&quot;</span> + monster13);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194618378-165833097371837.png"> </div> <h3 id="bean-创建顺序"><a href="#bean-创建顺序" class="headerlink" title="bean 创建顺序"></a>bean 创建顺序</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>在 spring 的 ioc 容器，默认是按照配置的顺序创建 bean 对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Student&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Department&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​会先创建 student01 这个 bean 对象，然后创建 department01 这个 bean 对象。</p><ol start="2"><li>如果这样配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Student&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;department01&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Department&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​会先创建 department01 对象，再创建 student01 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Department</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Department() 被执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student()构造器被执行..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606195913588-165833097371838.png"> </div> <p>​1在默认情况下，bean创建的顺序是按照配置顺序来的。但如果增加了 depends-on 属性，这时就会先创建有这个属性的bean。</p><h4 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h4><ol><li>看下面的配置，请问两个 bean 创建的顺序是什么？并分析执行流程。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.MemberDAOImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​（1）先创建 id&#x3D;memberDAO</p><p>​（2）再创建 id &#x3D; memberService</p><p>​（3）调用 memberServiceImpl.setMemberDAO() 完成引用</p><ol start="2"><li>看下面的配置，请问两个 bean 创建的顺序是什么？并分析执行流程。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.MemberDAOImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​（1）先创建 id &#x3D; memberService</p><p>​（2）再创建 id&#x3D;memberDAO</p><p>​（3）调用 memberServiceImpl.setMemberDAO() 完成引用</p><h3 id="bean-对象的单例和多例-重要"><a href="#bean-对象的单例和多例-重要" class="headerlink" title="bean 对象的单例和多例(重要)"></a>bean 对象的单例和多例(重要)</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>​在 spring 的 ioc 容器，在默认是按照单例创建的，即配置一个 bean 对象后，ioc 容器只会创建一个 bean 实例。 </p><p>​如果我们希望 ioc 容器配置的某个 bean 对象，是以多个实例形式创建的则可以通过配置 scope&#x3D;”prototype” 来指定。</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat()构造器执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Cat对象</span></span><br><span class="line"><span class="comment">      1. 在默认情况下 scope属性是 singleton</span></span><br><span class="line"><span class="comment">      2. 在ioc容器中, 只有一个这个bean对象</span></span><br><span class="line"><span class="comment">      3. 当程序员执行getBean时, 返回的的是同一个对象</span></span><br><span class="line"><span class="comment">      4. 如果我们希望每次getBean返回一个新的Bean对象，则可以scope=&quot;prototype&quot;</span></span><br><span class="line"><span class="comment">      5. 如果bean的配置是 scope=&quot;singleton&quot; lazy-init=&quot;true&quot; 这时,ioc容器就不会提前创建该对象,</span></span><br><span class="line"><span class="comment">      而是当执行getBean方法的时候，才会创建对象</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Cat&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花猫&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Scope</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanScope</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;cat&quot;</span>, Cat.class);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;cat&quot;</span>, Cat.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;cat=&quot;</span> + cat);</span><br><span class="line">        System.out.println(<span class="string">&quot;cat2=&quot;</span> + cat2);</span><br><span class="line">        System.out.println(cat == cat2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>默认是单例 singleton，在启动容器时，默认就会创建，并放入到 singletonObjects 集合。</p></li><li><p>当</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p> 设置为多实例机制后, 该 bean 是在 getBean()时才创建。</p></li><li><p>如果是单例singleton，同时希望在getBean时才创建，可以指定懒加载 lazy-init&#x3D;”true” (注意默认是 false)。</p></li><li><p>通常情况下，lazy-init 就使用默认值 false，在开发看来，用空间换时间是值得的，除非有特殊的要求。</p></li><li><p>如果 scope&#x3D;”prototype” 这时 lazy-init 属性的值不管是 ture，还是 false 都是在 getBean 时候，才创建对象。</p></li></ol><h3 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>bean 对象创建是由 JVM 完成的，然后执行如下方法。</p><ol><li>执行构造器</li><li>执行 set 相关方法 </li><li>调用 bean 的初始化的方法（需要配置）</li><li>使用 bean</li><li>当容器关闭时候，调用 bean 的销毁方法（需要配置）</li></ol><h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">House</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House() 构造器...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House setName()=&quot;</span> + name);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 这个方法是程序员来编写的.</span></span><br><span class="line">    <span class="comment">//2. 根据自己的业务逻辑来写.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House init()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 这个方法是程序员来编写的.</span></span><br><span class="line">    <span class="comment">//2. 根据自己的业务逻辑来写.</span></span><br><span class="line">    <span class="comment">//3. 名字也不是固定的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House destroy()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;House&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置House对象，演示整个Bean的生命周期</span></span><br><span class="line"><span class="comment">       1. init-method=&quot;init&quot; 指定bean的初始化方法 , 在setter方法后执行</span></span><br><span class="line"><span class="comment">       2. init方法执行的时机，由spring容器来控制</span></span><br><span class="line"><span class="comment">       3. destroy-method=&quot;destroy&quot; 指定bean的销毁方法, 在容器关闭的时候执行</span></span><br><span class="line"><span class="comment">       4. destroy方法执行的时机，由spring容器来控制</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.House&quot;</span> <span class="attr">id</span>=<span class="string">&quot;house&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大豪宅&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Bean的生命周期</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanLife</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;house&quot;</span>, House.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;house=&quot;</span> + house);</span><br><span class="line">        <span class="comment">//关闭容器</span></span><br><span class="line">        <span class="comment">//1. ioc的编译类型 ApplicationContext , 运行类型 ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="comment">//2. 因为ClassPathXmlApplicationContext 实现了 ConfigurableApplicationContext</span></span><br><span class="line">        <span class="comment">//3. ClassPathXmlApplicationContext 是有close</span></span><br><span class="line">        <span class="comment">//4. 将ioc 转成ClassPathXmlApplicationContext，再调用close</span></span><br><span class="line">        <span class="comment">//ioc.close();</span></span><br><span class="line">        <span class="comment">//关闭ioc容器.</span></span><br><span class="line">        ((ClassPathXmlApplicationContext)ioc).close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614201718169-165833097371840.png"> </div> <h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>初始化 init 方法和 destory 方法，是程序员来指定。2. 销毁方法就是当关闭容器时，才会被调用。</li></ol><h3 id="配置-bean-的后置处理器-重难点"><a href="#配置-bean-的后置处理器-重难点" class="headerlink" title="*配置 bean 的后置处理器(重难点)"></a>*配置 bean 的后置处理器(重难点)</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><ol><li>在 spring 的 ioc 容器，可以配置 bean 的后置处理器。 </li><li>该处理器&#x2F;对象会在 <strong>bean 初始化方法</strong>(init)调用前和初始化方法调用后被调用 。</li><li>程序员可以在后置处理器中编写自己的代码。</li></ol><h4 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这是一个后置处理器, 需要实现 BeanPostProcessor接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 什么时候被调用：在Bean的init方法前被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 传入的在IOC容器中创建/配置Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName 传入的在IOC容器中创建/配置Bean的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  程序员对传入的bean 进行修改/处理【如果有需要的话】 ,返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInitialization().. bean=&quot;</span> + bean + <span class="string">&quot; beanName=&quot;</span> + beanName);</span><br><span class="line">        <span class="comment">//初步体验案例: 如果类型是House的统一改成 上海豪宅</span></span><br><span class="line">        <span class="comment">//对多个对象进行处理/编程==&gt;切面编程</span></span><br><span class="line">        <span class="keyword">if</span>(bean <span class="keyword">instanceof</span> House) &#123;</span><br><span class="line">            ((House)bean).setName(<span class="string">&quot;上海豪宅~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 什么时候被调用: 在Bean的init方法后被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean  传入的在IOC容器中创建/配置Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName 传入的在IOC容器中创建/配置Bean的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 程序员对传入的bean 进行修改/处理【如果有需要的话】 ,返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInitialization().. bean=&quot;</span> + bean + <span class="string">&quot; beanName=&quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans02.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置House对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.House&quot;</span> <span class="attr">id</span>=<span class="string">&quot;house&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大豪宅&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.House&quot;</span> <span class="attr">id</span>=<span class="string">&quot;house02&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;香港豪宅&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置后置处理器对象</span></span><br><span class="line"><span class="comment">       1. 在beans02.xml 容器配置文件 配置了 MyBeanPostProcessor</span></span><br><span class="line"><span class="comment">       2. 这时后置处理器对象，就会作用在该容器创建的Bean对象</span></span><br><span class="line"><span class="comment">       3. 已经是针对所有对象编程-&gt;切面编程AOP</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.MyBeanPostProcessor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans02.xml&quot;</span>);</span><br><span class="line">       <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;house&quot;</span>, House.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;house=&quot;</span> + house);</span><br><span class="line">       <span class="type">House</span> <span class="variable">house02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;house02&quot;</span>, House.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;使用house02=&quot;</span> + house02);</span><br><span class="line">       ((ConfigurableApplicationContext)ioc).close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><img src="\images\Spring5.assets\image-20220606220745721-165833097371839.png" alt="image-20220606220745721" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606221613181-165833097371841.png" alt="image-20220606221613181" style="zoom:80%;" /><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><p>1、怎么执行到这个方法？&#x3D;&gt; 使用 AOP(反射+动态代理+IO+容器+注解) 。</p><p>2、有什么用？&#x3D;&gt; 可以对 IOC 容器中所有的对象进行统一处理，比如 日志处理&#x2F;权限的校 验&#x2F;安全的验证&#x2F;事务管理。</p><p>​–初步体验案例：如果类型是 House 的统一改成 上海豪宅 。</p><p>3、针对容器的所有对象吗？是的&#x3D;&gt;切面编程特点 。</p><p>4、后面会手动实现这个底层机制。</p><h3 id="通过属性文件给-bean-注入值"><a href="#通过属性文件给-bean-注入值" class="headerlink" title="通过属性文件给 bean 注入值"></a>通过属性文件给 bean 注入值</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>​在 spring 的 ioc 容器，通过属性文件给 bean 注入值。</p><h4 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h4><p>myproperties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">monsterId</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">jack</span></span><br><span class="line"><span class="attr">skill</span>=<span class="string">hello</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定属性文件在哪里</span></span><br><span class="line"><span class="comment">        location=&quot;classpath:my.properties&quot; 指定文件位置需要带上 classpath</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:my.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Monster对象</span></span><br><span class="line"><span class="comment">        1.通过属性文件给monster对象的属性赋值</span></span><br><span class="line"><span class="comment">        2.这时我们的属性值通过$&#123;属性名&#125;</span></span><br><span class="line"><span class="comment">        3.这里的属性名 就是 my.properties文件中的key</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">id</span>=<span class="string">&quot;monster1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;monsterId&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;skill&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过属性文件给bean属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans03.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster1000</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster1000&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster1000=&quot;</span> + monster1000);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​如果properites配置文件中有中文，访问站长工具（<a href="https://tool.chinaz.com/%EF%BC%89%E8%BF%9B%E8%A1%8CUnicode%E8%BF%9B%E8%A1%8C%E8%BD%AC%E7%A0%81%EF%BC%8C%E5%B0%86%E8%BD%AC%E5%90%8E%E7%9A%84%E7%BC%96%E7%A0%81%E5%A4%8D%E5%88%B6%E5%88%B0properties%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82">https://tool.chinaz.com/）进行Unicode进行转码，将转后的编码复制到properties文件中。</a></p><img src="\images\Spring5.assets\image-20220607193414294-165833097371842.png" alt="image-20220607193414294" style="zoom:80%;" /><div align="center"> <img src="\images\Spring5.assets\image-20220607193656928-165833097371843.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220607193734081-165833097371844.png"> </div> <h3 id="基于-XML-的-bean-的自动装配"><a href="#基于-XML-的-bean-的自动装配" class="headerlink" title="基于 XML 的 bean 的自动装配"></a>基于 XML 的 bean 的自动装配</h3><h4 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * DAO类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存 一个订单...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.dao.OrderDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * OrderService</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderDao</span><span class="params">(OrderDao orderDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderDao = orderDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.service.OrderService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这里的Action就是 Servlet-&gt;充当Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAction</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderService <span class="title function_">getOrderService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderService</span><span class="params">(OrderService orderService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置OrderDao对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.OrderDao&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置OrderService对象</span></span><br><span class="line"><span class="comment">    1. autowire=&quot;byType&quot; 表示 在创建 orderService时</span></span><br><span class="line"><span class="comment">       通过类型的方式 给对象属性 自动完成赋值/引用</span></span><br><span class="line"><span class="comment">    2. 比如OrderService 对象有 private OrderDao orderDao</span></span><br><span class="line"><span class="comment">    3. 就会在容器中去找有没有 OrderDao类型对象</span></span><br><span class="line"><span class="comment">    4. 如果有，就会自动的装配, 如果是按照 byType 方式来装配, 这个容器中，不能有两个OrderDao类型对象</span></span><br><span class="line"><span class="comment">    5. 如果对象没有属性,  autowire就没有必要写</span></span><br><span class="line"><span class="comment">    6. 其它类推..</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    7. 如果设置的是 autowire=&quot;byName&quot; 表示通过名字完成自动装配</span></span><br><span class="line"><span class="comment">    8. 比如下面的 autowire=&quot;byName&quot; class=&quot;com.lzw.spring.service.OrderService&quot;</span></span><br><span class="line"><span class="comment">       1) 先看 OrderService 属性 private OrderDao orderDao(并不是根据这个&quot;orderDao&quot;为id进行装配)</span></span><br><span class="line"><span class="comment">       2) 再根据这个属性的setXxx()方法的 xxx 来找对象id(是根据这里的&quot;xxx&quot;来装配)</span></span><br><span class="line"><span class="comment">       3) public void setOrderDao() 就会找id=orderDao对象来进行自动装配(这里的&quot;orderDao&quot;就是2中的xxx)</span></span><br><span class="line"><span class="comment">       4) 如果没有就装配失败</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.OrderService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderService&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean autowire=&quot;byName&quot; class=&quot;com.lzw.spring.service.OrderService&quot; id=&quot;orderService&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置OrderAction--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.web.OrderAction&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderAction&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean autowire=&quot;byName&quot; class=&quot;com.lzw.spring.web.OrderAction&quot; id=&quot;orderAction&quot;/&gt;--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过自动装配来对属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByAutowire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans03.xml&quot;</span>);</span><br><span class="line">        <span class="type">OrderAction</span> <span class="variable">orderAction</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;orderAction&quot;</span>, OrderAction.class);</span><br><span class="line">        <span class="comment">//验证是否自动装配上OrderService</span></span><br><span class="line">        System.out.println(orderAction.getOrderService());</span><br><span class="line">        <span class="comment">//验证是否自动装配上OrderDao</span></span><br><span class="line">        System.out.println(orderAction.getOrderService().getOrderDao());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-EL-表达式配置Bean-了解"><a href="#Spring-EL-表达式配置Bean-了解" class="headerlink" title="Spring EL 表达式配置Bean(了解)"></a>Spring EL 表达式配置Bean(了解)</h3><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><ol><li><p>Spring Expression Language，Spring 表达式语言，简称 SpEL。支持运行时查询并可以操作对象。</p></li><li><p>和 EL 表达式一样，SpEL 根据 JavaBean 风格的 getXxx()、setXxx()方法定义的属性访问对象。</p></li><li><p>SpEL 使用#{…}作为定界符，所有在大框号中的字符都将被认为是 SpEL 表达式。 </p></li><li><p>不是重点，如果看到有人这样使用，能看懂即可。</p></li></ol><h4 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/6/7 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpELBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Monster monster;</span><br><span class="line">    <span class="keyword">private</span> String monsterName;</span><br><span class="line">    <span class="keyword">private</span> String crySound; <span class="comment">//叫声</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> Double result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpELBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">getMonster</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonster</span><span class="params">(Monster monster)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monster = monster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMonsterName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterName</span><span class="params">(String monsterName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterName = monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCrySound</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> crySound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCrySound</span><span class="params">(String crySound)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.crySound = crySound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResult</span><span class="params">(Double result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cry 方法会返回字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cry</span><span class="params">(String sound)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发出 &quot;</span> + sound + <span class="string">&quot;叫声...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//read 返回字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">read</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;正在看 &quot;</span> + bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SpELBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, monster=&quot;</span> + monster +</span><br><span class="line">                <span class="string">&quot;, monsterName=&#x27;&quot;</span> + monsterName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, crySound=&#x27;&quot;</span> + crySound + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, result=&quot;</span> + result +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个monster对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜈蚣精~&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜇人~&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring el 表达式使用</span></span><br><span class="line"><span class="comment">        通过spel给bean的属性赋值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spELBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.SpELBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 给字面量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;&#x27;LiAng&#x27;&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 引用其它bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monster&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;monster01&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 引用其它bean的属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;monster01.name&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 调用普通方法(返回值)  赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;crySound&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;spELBean.cry(&#x27;喵喵的..&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 调用静态方法(返回值) 赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;T(com.lzw.spring.bean.SpELBean).read(&#x27;天龙八部&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 通过运算赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;89*1.2&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过spring el 对属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanBySpel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans04.xml&quot;</span>);</span><br><span class="line">        <span class="type">SpELBean</span> <span class="variable">spELBean</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;spELBean&quot;</span>, SpELBean.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;spELBean=&quot;</span> + spELBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="基于注解配置-bean-重点"><a href="#基于注解配置-bean-重点" class="headerlink" title="*基于注解配置 bean(重点)"></a>*基于注解配置 bean(重点)</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>​基于注解的方式配置 bean，主要是项目开发中的组件，比如 Controller、Service 和 Dao。</p><h5 id="组件注解的形式："><a href="#组件注解的形式：" class="headerlink" title="组件注解的形式："></a>组件注解的形式：</h5><ol><li><strong>@Component</strong> 表示当前注解标识的是一个组件 。</li><li><strong>@Controller</strong> 表示当前注解标识的是一个控制器，通常用于 Servlet 。</li><li><strong>@Service</strong> 表示当前注解标识的是一个处理业务逻辑的类，通常用于 Service 类。</li><li><strong>@Repository</strong> 表示当前注解标识的是一个持久化层的类，通常用于 Dao 类。</li></ol><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p>​使用注解的方式来配置 Controller &#x2F; Service &#x2F; Respository &#x2F; Component。</p><p>​首先要引入 spring-aop-5.3.8.jar。</p><div align="center"> <img src="\images\Spring5.assets\image-20220608212912194-165833097371845.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span> 标识该类是一个Service类/对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 标识该类是一个组件, 是一个通用的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(value = &quot;lzw1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置容器要扫描的包</span></span><br><span class="line"><span class="comment">      1. component-scan 要对指定包下的类进行扫描, 并创建对象到容器</span></span><br><span class="line"><span class="comment">      2. base-package 指定要扫描的包</span></span><br><span class="line"><span class="comment">      3. 含义是当spring容器创建/初始化时，就会扫描com.lzw.spring.component包</span></span><br><span class="line"><span class="comment">         下的所有的 有注解 @Controller / @Service / @Repository / @Component类</span></span><br><span class="line"><span class="comment">         将其实例化，生成对象，放入到ioc容器</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解来配置Bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByAnnotation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans05.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> ioc.getBean(UserDao.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ioc.getBean(UserService.class);</span><br><span class="line">        <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> ioc.getBean(UserAction.class);</span><br><span class="line">        <span class="type">MyComponent</span> <span class="variable">myComponent</span> <span class="operator">=</span> ioc.getBean(MyComponent.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;userDao=&quot;</span> + userDao);</span><br><span class="line">        System.out.println(<span class="string">&quot;userService=&quot;</span> + userService);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction=&quot;</span> + userAction);</span><br><span class="line">        System.out.println(<span class="string">&quot;myComponent=&quot;</span> + myComponent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h4><ol><li>需要导入 spring-aop-5.3.8.jar。</li><li>必须在 Spring 配置文件中指定”自动扫描的包”，IOC 容器才能够检测到当前项目中哪些类被标识了注解， 注意导入 context 名称空间。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--resource-pattern=&quot;User*.class&quot; 表示只扫描com.lzw.spring.component 和它的子包下的User打头的类--&gt;</span></span><br></pre></td></tr></table></figure><p>​可以使用通配符 * 来指定 ，比如 com.lzw.spring.* 表示。</p><ol start="3"><li><p>Spring 的 IOC 容器不能检测一个使用了@Controller 注解的类到底是不是一个真正的控制器。注解的名称是用于程序员自己识别当前标识的是什么组件。其它的@Service @Repository 也是一样的道理 [也就是说 Spring 的 IOC 容器只要检查到注解就会生成对象， 但是这个注解的含义 Spring 不会识别，注解是给程序员编程方便看的]。</p></li><li><pre><code class="xml">&lt;context:component-scan base-package=&quot;com.lzw.spring.component&quot; resource-pattern=&quot;User*.class&quot;/&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   resource-pattern=&quot;User*.class&quot;：表示只扫描满足要求的类[使用的少，不想扫描，不写注解就可以，知道这个知识点即可]。</span><br><span class="line"></span><br><span class="line">5. 排除哪些类，以 annotaion 注解为例。</span><br><span class="line"></span><br><span class="line">   ```xml</span><br><span class="line">   &lt;!--</span><br><span class="line">          需求：如果我们希望排除某个包/子包下的某种类型的注解，可以通过exclude-filter来指定</span><br><span class="line">          1. context:exclude-filter 指定要排除哪些类</span><br><span class="line">          2. type 指定排除方式 annotation表示按照注解来排除</span><br><span class="line">          3. expression=&quot;org.springframework.stereotype.Service&quot; 指定要排除的注解的全路径</span><br><span class="line">      --&gt;</span><br><span class="line">       &lt;context:component-scan base-package=&quot;com.lzw.spring.component&quot;&gt;</span><br><span class="line">           &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Service&quot;/&gt;</span><br><span class="line">           &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot;/&gt;</span><br><span class="line">       &lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>指定自动扫描哪些注解类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  需求：如果我们希望按照自己的规则，来扫描包/子包下的某些注解, 可以通过 include-filter</span></span><br><span class="line"><span class="comment">  1. use-default-filters=&quot;false&quot; 表示不使用默认的过滤机制/扫描机制</span></span><br><span class="line"><span class="comment">  2. context:include-filter 表示要去扫描哪些类</span></span><br><span class="line"><span class="comment">  3. type=&quot;annotation&quot; 按照注解方式来扫描/过滤</span></span><br><span class="line"><span class="comment">  4. expression=&quot;org.springframework.stereotype.Service&quot; 指定要扫描的注解的全路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>默认情况：标记注解后，类名首字母小写作为 id 的值。也可以使用注解的 value 属性指定 id 值，并且 value 可以省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><div align="center"> <img src="\images\Spring5.assets\image-20220608222952390-165833097371846.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 使用 <span class="doctag">@Repository</span> 标识该类是一个Repository 即是一个持久化层的类/对象</span></span><br><span class="line"><span class="comment"> * 1. 标记注解后，类名首字母小写作为id的值(默认)</span></span><br><span class="line"><span class="comment"> * 2. value = &quot;lzwUserDao&quot; 使用指定的 lzwUserDao作为UserDao对象的id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(value = &quot;lzwUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220608223553407-165833097371847.png"> </div> <ol start="8"><li>扩展-@Controller 、@Service、@Component 区别 <a href="https://zhuanlan.zhihu.com/p/454638478">https://zhuanlan.zhihu.com/p/454638478</a></li></ol><h3 id="手动开发简单的-Spring-基于注解配置的程序"><a href="#手动开发简单的-Spring-基于注解配置的程序" class="headerlink" title="手动开发简单的 Spring 基于注解配置的程序"></a>手动开发简单的 Spring 基于注解配置的程序</h3><h4 id="需求说明-2"><a href="#需求说明-2" class="headerlink" title="需求说明"></a>需求说明</h4><ol><li><p>自己写一个简单的Spring容器，通过读取类的注解 (@Component @Controller @Service @Reponsitory)，将对象注入到 IOC 容器。</p></li><li><p>也就是说，不使用 Spring 原生框架，我们自己使用 IO+Annotaion+反射+集合 技术实现，打通 Spring 注解方式开发的技术痛点。</p></li></ol><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><div align="center"> <img src="\images\Spring5.assets\image-20220609091031508-165833097371848.png"> </div> <h4 id="1-搭建基本结构并获取的扫描包"><a href="#1-搭建基本结构并获取的扫描包" class="headerlink" title="1. 搭建基本结构并获取的扫描包"></a>1. 搭建基本结构并获取的扫描包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@Target</span>(ElementType.TYPE)指定我们的 ComponentScan注解 可以修饰 Type程序元素</span></span><br><span class="line"><span class="comment"> * 2. <span class="doctag">@Retention</span>(RetentionPolicy.RUNTIME) 指定 ComponentScan注解 保留范围</span></span><br><span class="line"><span class="comment"> * 3. String value() default &quot;&quot;; 表示 ComponentScan 可以传入 value属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这是一个配置类，作用类似于原生Spring的 beans.xml 容器配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * LzwSpringApplicationContext 类的作用类似Spring原生ioc容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line">    <span class="comment">//ioc 存放的就是通过反射创建的对象（基于注解方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Object&gt; ioc = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="comment">//singletonObjects</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwSpringApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;this.configClass = &quot; + this.configClass);</span></span><br><span class="line">        <span class="comment">//获取要扫描的包</span></span><br><span class="line">        <span class="comment">//1. 先得到 LzwSpringConfig 配置的 @ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> (ComponentScan)<span class="built_in">this</span>.configClass.getDeclaredAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2. 通过 componentScan的value =&gt; 即要扫描的包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> componentScan.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;要扫描的包 = &quot;</span> + path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-获取扫描包下所有-class-文件"><a href="#2-获取扫描包下所有-class-文件" class="headerlink" title="2. 获取扫描包下所有.class 文件"></a>2. 获取扫描包下所有.class 文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.lzwapplicationcontext.LzwApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * LzwSpringApplicationContext 类的作用类似Spring原生ioc容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line">    <span class="comment">//ioc 存放的就是通过反射创建的对象（基于注解方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Object&gt; ioc = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="comment">//singletonObjects</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwSpringApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;this.configClass = &quot; + this.configClass);</span></span><br><span class="line">        <span class="comment">//获取要扫描的包</span></span><br><span class="line">        <span class="comment">//1. 先得到 LzwSpringConfig 配置的 @ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> (ComponentScan)<span class="built_in">this</span>.configClass.getDeclaredAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2. 通过 componentScan的value =&gt; 即要扫描的包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> componentScan.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;要扫描的包 = &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要扫描的包下的所有资源(.class)</span></span><br><span class="line">        <span class="comment">//1. 先得到类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> LzwApplicationContext.class.getClassLoader();</span><br><span class="line">        <span class="comment">//2. 通过类的加载器获取到要扫描的包的资源 url 类似路径</span></span><br><span class="line">        path = path.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//一定要把 .  替换为 /</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> classLoader.getResource(path);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;resource = &quot; + resource);</span></span><br><span class="line">        <span class="comment">//3. 将要加载的资源(.class) 路径下的文件进行遍历 =&gt; io</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(resource.getFile());</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">                System.out.println(f.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-获取全类名-反射对象-放入容器"><a href="#3-获取全类名-反射对象-放入容器" class="headerlink" title="3.  获取全类名 反射对象 放入容器"></a>3.  获取全类名 反射对象 放入容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.lzwapplicationcontext.LzwApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * LzwSpringApplicationContext 类的作用类似Spring原生ioc容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line">    <span class="comment">//ioc 存放的就是通过反射创建的对象（基于注解方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Object&gt; ioc = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="comment">//singletonObjects</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwSpringApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;this.configClass = &quot; + this.configClass);</span></span><br><span class="line">        <span class="comment">//获取要扫描的包</span></span><br><span class="line">        <span class="comment">//1. 先得到 LzwSpringConfig 配置的 @ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> (ComponentScan)<span class="built_in">this</span>.configClass.getDeclaredAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2. 通过 componentScan的value =&gt; 即要扫描的包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> componentScan.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;要扫描的包 = &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要扫描的包下的所有资源(.class)</span></span><br><span class="line">        <span class="comment">//1. 先得到类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> LzwApplicationContext.class.getClassLoader();</span><br><span class="line">        <span class="comment">//2. 通过类的加载器获取到要扫描的包的资源 url 类似路径</span></span><br><span class="line">        path = path.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//一定要把 .  替换为 /</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> classLoader.getResource(path);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;resource = &quot; + resource);</span></span><br><span class="line">        <span class="comment">//3. 将要加载的资源(.class) 路径下的文件进行遍历 =&gt; io</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(resource.getFile());</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="comment">//System.out.println(&quot;===================&quot;);</span></span><br><span class="line">                <span class="comment">//System.out.println(f.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//E:\VIP\AllDemo\Spring5\spring\out\production\spring\com\lzw\spring\component\MyComponent.class</span></span><br><span class="line">                <span class="comment">//获取到 com.lzw.spring.component.MyComponent</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileAbsolutePath</span> <span class="operator">=</span> f.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//这里我们只处理 .class文件</span></span><br><span class="line">                <span class="keyword">if</span>(fileAbsolutePath.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//1. 获取到类名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> fileAbsolutePath.substring(fileAbsolutePath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>, fileAbsolutePath.indexOf(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;className = &quot; + className);</span></span><br><span class="line">                    <span class="comment">//2. 获取类的完整路径（全类名）</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">classFullName</span> <span class="operator">=</span> path.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>) + <span class="string">&quot;.&quot;</span> + className;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;classFullName = &quot; + classFullName);</span></span><br><span class="line">                    <span class="comment">//3. 判断该类是不是需要注入容器, 就看该类是不是有注解 @Component @Service..</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//这时，我们就得到了该类的 Class对象</span></span><br><span class="line">                        <span class="comment">//Class.forName(classFullName)。forName()获得完整类的信息，loadClass()轻量级。</span></span><br><span class="line">                        <span class="comment">//1. Class clazz = Class.forName(classFullName) 可以反射加载类</span></span><br><span class="line">                        <span class="comment">//2. classLoader.loadClass(classFullName); 可以反射类的Class</span></span><br><span class="line">                        <span class="comment">//3. 区别是 : (1)方式会调用该类的静态方法, (2)方法不会</span></span><br><span class="line">                        <span class="comment">//4. aClass.isAnnotationPresent(Component.class) 判断该类是否有 @Component</span></span><br><span class="line">                        Class&lt;?&gt; aClass = classLoader.loadClass(classFullName);</span><br><span class="line">                        <span class="keyword">if</span>(aClass.isAnnotationPresent(Component.class) || aClass.isAnnotationPresent(Controller.class)</span><br><span class="line">                                || aClass.isAnnotationPresent(Service.class)||aClass.isAnnotationPresent(Repository.class))&#123;</span><br><span class="line">                            <span class="comment">//这时就可以反射对象，并放入到容器中</span></span><br><span class="line">                            Class&lt;?&gt; clazz = Class.forName(classFullName);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                            <span class="comment">//放入到容器中，将类名的首字母小写作为id</span></span><br><span class="line"></span><br><span class="line">                            ioc.put(StringUtils.uncapitalize(className),instance);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编写方法返回对容器中对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.MyComponent;</span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.UserAction;</span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContextTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LzwSpringApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LzwSpringApplicationContext</span>(LzwSpringConfig.class);</span><br><span class="line">        <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> (UserAction) ioc.getBean(<span class="string">&quot;userAction&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction&quot;</span> + userAction);</span><br><span class="line">        <span class="type">MyComponent</span> <span class="variable">myComponent</span> <span class="operator">=</span> (MyComponent) ioc.getBean(<span class="string">&quot;myComponent&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;myComponent&quot;</span> + myComponent);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) ioc.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userService=&quot;</span> + userService);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ioc.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userDao=&quot;</span> + userDao);</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609102334694-165833097371849.png"> </div> <h4 id="注意事项和细节说明-1"><a href="#注意事项和细节说明-1" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h4><p>​还可以通过@Component(value &#x3D; “xx”) @Controller(value &#x3D; “yy”) @Service(value &#x3D; “zz”) 中指定的 value，给 bean 分配 id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fileAbsolutePath.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                   <span class="comment">//1. 获取到类名</span></span><br><span class="line">                   <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> fileAbsolutePath.substring(fileAbsolutePath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>, fileAbsolutePath.indexOf(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">                   <span class="comment">//System.out.println(&quot;className = &quot; + className);</span></span><br><span class="line">                   <span class="comment">//2. 获取类的完整路径（全类名）</span></span><br><span class="line">                   <span class="type">String</span> <span class="variable">classFullName</span> <span class="operator">=</span> path.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>) + <span class="string">&quot;.&quot;</span> + className;</span><br><span class="line">                   <span class="comment">//System.out.println(&quot;classFullName = &quot; + classFullName);</span></span><br><span class="line">                   <span class="comment">//3. 判断该类是不是需要注入容器, 就看该类是不是有注解 @Component @Service..</span></span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">//这时，我们就得到了该类的 Class对象</span></span><br><span class="line">                       <span class="comment">//Class.forName(classFullName)。forName()获得完整类的信息，loadClass()轻量级。</span></span><br><span class="line">                       <span class="comment">//1. Class clazz = Class.forName(classFullName) 可以反射加载类</span></span><br><span class="line">                       <span class="comment">//2. classLoader.loadClass(classFullName); 可以反射类的Class</span></span><br><span class="line">                       <span class="comment">//3. 区别是 : (1)方式会调用该类的静态方法, (2)方法不会</span></span><br><span class="line">                       <span class="comment">//4. aClass.isAnnotationPresent(Component.class) 判断该类是否有 @Component</span></span><br><span class="line">                       Class&lt;?&gt; aClass = classLoader.loadClass(classFullName);</span><br><span class="line">                       <span class="keyword">if</span>(aClass.isAnnotationPresent(Component.class) || aClass.isAnnotationPresent(Controller.class)</span><br><span class="line">                               || aClass.isAnnotationPresent(Service.class)||aClass.isAnnotationPresent(Repository.class))&#123;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">//演示一个Component注解指定value，分配id</span></span><br><span class="line">                           <span class="keyword">if</span>(aClass.isAnnotationPresent(Component.class))&#123;</span><br><span class="line">                               <span class="comment">//获取到该注解</span></span><br><span class="line">                               <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> aClass.getDeclaredAnnotation(Component.class);</span><br><span class="line">                               <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> component.value();</span><br><span class="line">                               <span class="keyword">if</span>(!<span class="string">&quot;&quot;</span>.endsWith(id))&#123;</span><br><span class="line">                                   className = id;<span class="comment">//替换</span></span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">//这时就可以反射对象，并放入到容器中</span></span><br><span class="line">                           Class&lt;?&gt; clazz = Class.forName(classFullName);</span><br><span class="line">                           <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                           <span class="comment">//放入到容器中，将类名的首字母小写作为id</span></span><br><span class="line"></span><br><span class="line">                           ioc.put(StringUtils.uncapitalize(className),instance);</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h4><ol><li><p>基于注解配置 bean，也可实现自动装配，使用的注解是：@AutoWired 或者 @Resource。</p></li><li><p>@AutoWired 的规则说明</p><p>（1）在 IOC 容器中查找待装配的组件的类型，如果有唯一的 bean 匹配，则使用该 bean 装配</p><p>（2）如果待装配的类型对应的 bean 在 IOC 容器中有多个，则使用待装配的属性的属性名作为 id 值再进行查找，找到就装配，找不到就抛异常。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span> 标识该类是一个Service类/对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService hi()~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService200;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction 的sayOK()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction 装配的 userService属性=&quot;</span> + userService200);</span><br><span class="line">        userService200.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置两个UserService对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.component.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService200&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;com.lzw.spring.component.UserService&quot; id=&quot;userService300&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解来配置Bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProByAutowired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans06.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ioc容器中的userService=&quot;</span> + userService);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService200</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService200&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ioc容器中的userService200=&quot;</span> + userService200);</span><br><span class="line">        <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userAction&quot;</span>, UserAction.class);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;userAction=&quot; + userAction);</span></span><br><span class="line">        userAction.sayOk();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614221321789-165833097371850.png"> </div> <h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ol start="3"><li><p>@Resource 的规则说明</p><p>（1）@Resource 有两个属性是比较重要的，分是 name 和 type，Spring 将@Resource 注解的 name 属性解析为 bean 的名字，而 type 属性则解析为 bean 的类型。所以如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。</p><p>（2）如果@Resource 没有指定 name 和 type，则先使用byName注入策略，如果匹配不上，再使用 byType 策略，如果都不成功，就会报错。</p><p>（3）如果@Resource 指定type，并且对应的 bean 在 IOC 容器中有多个，则会继续使用待装配的属性的属性名作为 id 值进行查找，找到就装配，找不到就抛异常。</p></li><li><p>建议：不管是@Autowired 还是 @Resource 都保证属性名是规范的写法就可以注入。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">    <span class="comment">// @Resource(name = &quot;userService&quot;) 表示装配id=userService的对象</span></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;userService200&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Resource(type = UserService.class) 表示按照 UserService类型进行装配，这时要求容器中只能有一个这样类型的对象</span></span><br><span class="line">    <span class="comment">//@Resource(type = UserService.class)</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService200;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction 的sayOK()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction 装配的 userService属性=&quot;</span> + userService200);</span><br><span class="line">        userService200.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置两个UserService对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.component.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService200&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;com.lzw.spring.component.UserService&quot; id=&quot;userService300&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解来配置Bean</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProByAutowired</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans06.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;ioc容器中的userService=&quot;</span> + userService);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService200</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService200&quot;</span>, UserService.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;ioc容器中的userService200=&quot;</span> + userService200);</span><br><span class="line">    <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userAction&quot;</span>, UserAction.class);</span><br><span class="line">    <span class="comment">//System.out.println(&quot;userAction=&quot; + userAction);</span></span><br><span class="line">    userAction.sayOk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614222835992-165833097371851.png"> </div> <h4 id="Autowired-和-Qualifier组合"><a href="#Autowired-和-Qualifier组合" class="headerlink" title="@Autowired 和 @Qualifier组合"></a>@Autowired 和 @Qualifier组合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">    <span class="comment">//指定id进行组装, 也可以使用@Autowired 和 @Qualifier(value = &quot;userService200&quot;)</span></span><br><span class="line">    <span class="comment">//这时，是装配的 id=userService200 , 需要两个注解都需要写上</span></span><br><span class="line">    <span class="comment">//等价于 @Resource(name = &quot;userService200&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userService200&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction 的sayOK()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction 装配的 userService属性=&quot;</span> + userService);</span><br><span class="line">        userService.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614223140240-165833097371852.png"> </div> <h3 id="泛型依赖注入"><a href="#泛型依赖注入" class="headerlink" title="泛型依赖注入"></a>泛型依赖注入</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ol><li>为了更好的管理有继承和相互依赖的 bean 的自动装配，spring 还提供基于泛型依赖的注入机制 。</li><li>在继承关系复杂情况下，泛型依赖注入就会有很大的优越性。</li></ol><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><h5 id="各个类关系图"><a href="#各个类关系图" class="headerlink" title="各个类关系图"></a>各个类关系图</h5><img src="\images\Spring5.assets\image-20220609144836871-165833097371853.png" alt="image-20220609144836871" style="zoom:80%;" /><p>​传统方法是将 PhoneDao &#x2F;BookDao 自动装配到 BookService&#x2F;PhoneSerive 中，当这种继承关系多时，就比较麻烦，可以使用 spring 提供的泛型依赖注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Book&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookDao 的 save()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Phone&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PhoneDao 的 save()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseService</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BaseDao&lt;T&gt; baseDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        baseDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;Book&gt; &#123;</span><br><span class="line">    <span class="comment">//并没有写属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;Phone&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.depinjection&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过泛型依赖来配置Bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProByDependencyInjection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans07.xml&quot;</span>);</span><br><span class="line">        <span class="type">PhoneService</span> <span class="variable">phoneService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;phoneService&quot;</span>, PhoneService.class);</span><br><span class="line">        phoneService.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220615095233033-165833097371854.png"> </div> <hr><h1 id="第三章-AOP"><a href="#第三章-AOP" class="headerlink" title="第三章 AOP"></a>第三章 AOP</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>​AOP 讲解：spring-framework-5.3.8&#x2F;docs&#x2F;reference&#x2F;html&#x2F;core.html#aop </p><p>​AOP API：spring-framework-5.3.8&#x2F;docs&#x2F;javadoc-api&#x2F;index.html</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="需求说明-3"><a href="#需求说明-3" class="headerlink" title="需求说明"></a>需求说明</h3><ol><li>有 Vehicle(交通工具接口，有一个 run 方法)，下面有两个实现类 Car 和 Ship 。</li><li>当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后 有统一的输出。</li></ol><h3 id="解决方案-传统方式"><a href="#解决方案-传统方式" class="headerlink" title="解决方案-传统方式"></a>解决方案-传统方式</h3><h5 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 接口，该接口有run方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具开始运行了....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小汽车在路上 running....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具停止运行了....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具开始运行了....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;大轮船在水上 running....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具停止运行了....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">        ship.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>​代码冗余，其实就是单个对象的调用，并没有很好的解决。</p><h3 id="解决方案-动态代理方式"><a href="#解决方案-动态代理方式" class="headerlink" title="解决方案-动态代理方式!!!!!"></a>解决方案-动态代理方式!!!!!</h3><h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具开始运行了....&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小汽车在路上 running....&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具停止运行了....&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具开始运行了....&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大轮船在水上 running....&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具停止运行了....&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * VehicleProxyProvider 该类可以返回一个代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VehicleProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个属性</span></span><br><span class="line">    <span class="comment">//target_vehicle 表示真正要执行的对象，</span></span><br><span class="line">    <span class="comment">//该对象的类实现了Vehicle接口</span></span><br><span class="line">    <span class="keyword">private</span> Vehicle target_vehicle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VehicleProxyProvider</span><span class="params">(Vehicle target_vehicle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_vehicle = target_vehicle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，可以返回一个代理对象</span></span><br><span class="line">    <span class="comment">//1.这个方法非常重要，理解有一定难度</span></span><br><span class="line">    <span class="keyword">public</span> Vehicle <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_vehicle.getClass().getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要代理的对象/被执行对象 的接口信息,底层是通过接口来完成调用</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_vehicle.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建InvocationHandler 对象</span></span><br><span class="line">        <span class="comment">//因为 InvocationHandler 是接口，所以我们可以通过匿名对象的方式来创建该对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public interface InvocationHandler &#123;</span></span><br><span class="line"><span class="comment">         *  public Object invoke(Object proxy, Method method, Object[] args)</span></span><br><span class="line"><span class="comment">         *         throws Throwable;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> o 表示代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 就是通过代理对象调用方法时，的哪个方法 代理对象.run()</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args : 表示调用 代理对象.run(xx) 传入的参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 表示 代理对象.run(xx) 执行后的结果.</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;交通工具开始运行了....&quot;</span>);</span><br><span class="line">                <span class="comment">//method 是：public abstract void com.lzw.spring.proxy2.Vehicle.run()</span></span><br><span class="line">                <span class="comment">//target_vehicle 是：Ship对象</span></span><br><span class="line">                <span class="comment">//args 是null</span></span><br><span class="line">                <span class="comment">//这里通过反射+动态绑定机制，就会执行到被代理对象的方法</span></span><br><span class="line">                <span class="comment">//执行完毕就返回</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target_vehicle, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;交通工具停止运行了....&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                                          InvocationHandler h)</span></span><br><span class="line"><span class="comment">          1. Proxy.newProxyInstance() 可以返回一个代理对象</span></span><br><span class="line"><span class="comment">          2. ClassLoader loader: 类的加载器.</span></span><br><span class="line"><span class="comment">          3. Class&lt;?&gt;[] interfaces 就是将来要代理的对象的接口信息</span></span><br><span class="line"><span class="comment">          4. InvocationHandler h 调用处理器/对象 有一个非常重要的方法invoke</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">proxy</span> <span class="operator">=</span> (Vehicle)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">        ship.run();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">proxyRun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">        <span class="comment">//创建VehicleProxyProvider对象, 并且我们传入的要代理的对象</span></span><br><span class="line">        <span class="type">VehicleProxyProvider</span> <span class="variable">vehicleProxyProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VehicleProxyProvider</span>(ship);</span><br><span class="line">        <span class="comment">//获取代理对象，该对象可以代理执行方法</span></span><br><span class="line">        <span class="comment">//1. proxy 编译类型 Vehicle</span></span><br><span class="line">        <span class="comment">//2. 运行类型 是代理类型 class com.sun.proxy.$Proxy9</span></span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">proxy</span> <span class="operator">=</span> vehicleProxyProvider.getProxy();</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy的编译类型是 Vehicle&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy的运行类型是 &quot;</span> + proxy.getClass());</span><br><span class="line">        <span class="comment">//下面家解读怎么 执行到 代理对象的 public Object invoke(Object o, Method method, Object[] args)</span></span><br><span class="line">        <span class="comment">//proxy的编译类型是 Vehicle, 运行类型是 class com.sun.proxy.$Proxy9</span></span><br><span class="line">        <span class="comment">//所以当执行run方法时，会执行到 代理对象的invoke</span></span><br><span class="line">        <span class="comment">//如何体现动态 [1. 被代理的对象 2. 方法]</span></span><br><span class="line">        proxy.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">proxyRun</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">       <span class="comment">//创建VehicleProxyProvider对象, 并且我们传入的要代理的对象</span></span><br><span class="line">       <span class="type">VehicleProxyProvider</span> <span class="variable">vehicleProxyProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VehicleProxyProvider</span>(ship);</span><br><span class="line">       <span class="comment">//获取代理对象，该对象可以代理执行方法</span></span><br><span class="line">       <span class="comment">//1. proxy 编译类型 Vehicle</span></span><br><span class="line">       <span class="comment">//2. 运行类型 是代理类型 class com.sun.proxy.$Proxy9</span></span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">proxy</span> <span class="operator">=</span> vehicleProxyProvider.getProxy();</span><br><span class="line">       System.out.println(<span class="string">&quot;proxy的编译类型是 Vehicle&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;proxy的运行类型是 &quot;</span> + proxy.getClass());</span><br><span class="line">       <span class="comment">//下面家解读怎么 执行到 代理对象的 public Object invoke(Object o, Method method, Object[] args)</span></span><br><span class="line">       <span class="comment">//proxy的编译类型是 Vehicle, 运行类型是 class com.sun.proxy.$Proxy9</span></span><br><span class="line">       <span class="comment">//所以当执行run方法时，会执行到 代理对象的invoke</span></span><br><span class="line">       proxy.run();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220615102956423-165833097371855.png"> </div> <h2 id="动态代理深入"><a href="#动态代理深入" class="headerlink" title="动态代理深入"></a>动态代理深入</h2><h3 id="需求说明-4"><a href="#需求说明-4" class="headerlink" title="需求说明"></a>需求说明</h3><p>​有一个 SmartAnimal 接口，可以完成简单的加减法, 要求在执行 getSum()和 getSub() 时，输出执行前，执行过程，执行后的日志输出，请思考如何实现。</p><p>getSum()如下，getSub()类似</p><img src="\images\Spring5.assets\image-20220609162420151-165833097371856.png" alt="image-20220609162420151" style="zoom:80%;" /><h3 id="传统方式实现"><a href="#传统方式实现" class="headerlink" title="传统方式实现"></a>传统方式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSum 方法开始--参数：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSum 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSub 方法开始--参数：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSub 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SmartDog</span> <span class="variable">smartDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartDog</span>();</span><br><span class="line">        smartDog.getSum(<span class="number">10.0f</span>,<span class="number">2.0f</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        smartDog.getSub(<span class="number">10.0f</span>,<span class="number">2.0f</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：实现简单。缺点：日志代码维护不方便，代码复用性差。</p><h3 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSum 方法开始--参数：&quot; + i + &quot;,&quot; + j);</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSum 方法结束--结果：result=&quot; + result);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSub 方法开始--参数：&quot; + i + &quot;,&quot; + j);</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSub 方法结束--结果：result=&quot; + result);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义我们要执行的目标对象，该对象需要实现 SmartAnimal</span></span><br><span class="line">    <span class="keyword">private</span> SmartAnimal target_animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyProvider</span><span class="params">(SmartAnimal target_animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_animal = target_animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 可以返回代理对象，该代理对象可以执行目标对象</span></span><br><span class="line">    <span class="keyword">public</span> SmartAnimal <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到类加载器/对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_animal.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.得到执行目标对象的接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_animal.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.创建 InvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行前-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法开始--参数：&quot;</span> + Arrays.asList(args));</span><br><span class="line">                    result = method.invoke(target_animal, args);</span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-返回通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行正常后-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//如果反射执行方法时，出现异常，就会进入到catch&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-异常通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行异常-日志--方法名--&quot;</span> + method.getName() + <span class="string">&quot;-异常类型=&quot;</span> + e.getClass().getName());</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;<span class="comment">//不管是否出现异常，最终都会执行到finally&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP角度看，也是一个横切关注点-最终通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;日志--方法名：&quot;</span> + method.getName() + <span class="string">&quot;--方法最终结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> (SmartAnimal)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SmartDog</span> <span class="variable">smartDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartDog</span>();</span><br><span class="line">        <span class="type">MyProxyProvider</span> <span class="variable">myProxyProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyProxyProvider</span>(smartDog);</span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> myProxyProvider.getProxy();</span><br><span class="line">        <span class="type">float</span> <span class="variable">sum</span> <span class="operator">=</span> proxy.getSum(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        proxy.getSub(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609165941755-165833097371857.png"> </div> <h2 id="问题再次出现"><a href="#问题再次出现" class="headerlink" title="问题再次出现"></a>问题再次出现</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>​在 MyProxyProvider.java 中，我们的输出语句功能比较弱，在实际开发中，我们希望是以一个方法的形式，嵌入到真正执行的目标方法前，怎么办?</p><img src="\images\Spring5.assets\image-20220609170233458-165833097371858.png" alt="image-20220609170233458" style="zoom:80%;" /><h3 id="土方法解决"><a href="#土方法解决" class="headerlink" title="土方法解决"></a>土方法解决</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义我们要执行的目标对象，该对象需要实现 SmartAnimal</span></span><br><span class="line">    <span class="keyword">private</span> SmartAnimal target_animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyProvider</span><span class="params">(SmartAnimal target_animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_animal = target_animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Object proxy, Method method, Object[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before-方法执行前-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法开始--参数：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object result)</span>&#123;</span><br><span class="line">        <span class="comment">//从AOP看，也是一个横切关注点-返回通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after-方法执行正常后-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法结束--结果：result=&quot;</span> + result);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 可以返回代理对象，该代理对象可以执行目标对象</span></span><br><span class="line">    <span class="keyword">public</span> SmartAnimal <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到类加载器/对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_animal.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.得到执行目标对象的接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_animal.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.创建 InvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    before(proxy, method, args);</span><br><span class="line">                    result = method.invoke(target_animal, args);</span><br><span class="line">                    after(method,result);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//如果反射执行方法时，出现异常，就会进入到catch&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-异常通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行异常-日志--方法名--&quot;</span> + method.getName() + <span class="string">&quot;-异常类型=&quot;</span> + e.getClass().getName());</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;<span class="comment">//不管是否出现异常，最终都会执行到finally&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP角度看，也是一个横切关注点-最终通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;日志--方法名：&quot;</span> + method.getName() + <span class="string">&quot;--方法最终结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> (SmartAnimal)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题：耦合度高</p><h3 id="对土方法解耦-开发简易的AOP类"><a href="#对土方法解耦-开发简易的AOP类" class="headerlink" title="对土方法解耦-开发简易的AOP类"></a>对土方法解耦-开发简易的AOP类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 我们自己编写一个极简的AOP类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwAOP</span> &#123;</span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Object proxy, Method method, Object[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwAOP-方法执行前-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法开始--参数：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object result)</span>&#123;</span><br><span class="line">        <span class="comment">//从AOP看，也是一个横切关注点-返回通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;LzwAOP-方法执行正常后-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/6/9 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义我们要执行的目标对象，该对象需要实现 SmartAnimal</span></span><br><span class="line">    <span class="keyword">private</span> SmartAnimal target_animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyProvider</span><span class="params">(SmartAnimal target_animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_animal = target_animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 可以返回代理对象，该代理对象可以执行目标对象</span></span><br><span class="line">    <span class="keyword">public</span> SmartAnimal <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到类加载器/对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_animal.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.得到执行目标对象的接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_animal.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.创建 InvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LzwAOP.before(proxy, method, args);</span><br><span class="line">                    result = method.invoke(target_animal, args);</span><br><span class="line">                    LzwAOP.after(method,result);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//如果反射执行方法时，出现异常，就会进入到catch&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-异常通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行异常-日志--方法名--&quot;</span> + method.getName() + <span class="string">&quot;-异常类型=&quot;</span> + e.getClass().getName());</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;<span class="comment">//不管是否出现异常，最终都会执行到finally&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP角度看，也是一个横切关注点-最终通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;日志--方法名：&quot;</span> + method.getName() + <span class="string">&quot;--方法最终结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> (SmartAnimal)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609181633378-165833097371859.png"> </div> <p>问题：土方法：不够灵活，复用性差，还是一种硬编码（因为没有注解和反射支撑）</p><h2 id="AOP的基本介绍"><a href="#AOP的基本介绍" class="headerlink" title="AOP的基本介绍"></a>AOP的基本介绍</h2><p>​AOP 的全称(aspect oriented programming) ，面向切面编程。</p><div align="center"> <img src="\images\Spring5.assets\image-20220609182308637-165833097371860.png"> </div> <h2 id="AOP的快速入门"><a href="#AOP的快速入门" class="headerlink" title="AOP的快速入门"></a>AOP的快速入门</h2><h3 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h3><ol><li><p>需要引入核心的aspect包。</p></li><li><p>在切面类中声明通知方法</p></li></ol><p>（1）前置通知：**@Before<strong>（2）返回通知：</strong>@AfterReturning<strong>（3）异常通知：</strong>@AfterThrowing<strong>（4）后置通知：</strong>@After<strong>（5）环绕通知：</strong>@Around**</p><div align="center"> <img src="\images\Spring5.assets\image-20220609200915310-165833097371861.png"> </div> <h3 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h3><p>​导入需要的包.</p><div align="center"> <img src="\images\Spring5.assets\image-20220609201157564-165833097371862.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.aop.proxy3.SmartAnimal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//使用@Component 当spring容器启动时，将SmartDog注入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​下面的SmartAnimalAspect作用就是接管切面编程，此时原来的MyProxyProvider类就可以拿掉了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 切面类，类似于以前自己写的 MyProxyProvider，功能肯定强大很多</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希望将f1方法切入到 SmartDog-getSum()前执行-前置通知</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. <span class="doctag">@Before</span> 表示前置通知：即在我们的目标对象执行方法前执行</span></span><br><span class="line"><span class="comment">     * 2. value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float)</span></span><br><span class="line"><span class="comment">     * 指定切入到哪个类的哪个方法  形式是: 访问修饰符 返回类型 全类名.方法名(形参列表)</span></span><br><span class="line"><span class="comment">     * 3. showBeginLog方法可以理解成就是一个切入方法, 这个方法名是可以程序员指定  比如:showBeginLog</span></span><br><span class="line"><span class="comment">     * 4. JoinPoint joinPoint 在底层执行时，由AspectJ切面框架，会给该切入方法传入 joinPoint对象</span></span><br><span class="line"><span class="comment">     * , 通过该对象，程序员可以获取到 相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f1()-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回通知；即把f2方法切入到目标对象正常执行完毕后的地方</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知；即把f3方法切入到目标对象方法执行异常的catch&#123;&#125;</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知；即把f4方法切入到目标方法执行后(不管是否发生异常，都要执行 finally&#123;&#125;)</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f4</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.aop.aspectj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启基于注解的AOP功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAspectjTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//得到spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//这里我们需要通过接口类型来获取到注入的SmartDog对象=&gt;就是代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">        <span class="comment">//SmartDog smartDog = ioc.getBean(SmartDog.class);</span></span><br><span class="line">        smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;smartAnimal运行类型：&quot; + smartAnimal.getClass());//class com.sun.proxy.$Proxy17</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节说明-3"><a href="#细节说明-3" class="headerlink" title="细节说明"></a>细节说明</h3><ol><li><p>关于切面类方法命名可以自己规范一下，比如 showBeginLog()，showSuccessEndLog()，showExceptionLog()，showFinallyEndLog()。</p></li><li><p>切入表达式的更多配置，比如使用模糊配置。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value=&quot;execution(* com.lzw.aop.proxy.SmartDog.*(..))&quot;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>表示所有访问权限，所有包的下所有有类的所方法，都会被执行该前置通知方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value=&quot;execution(* *.*(..))&quot;)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>当 spring 容器开启了 基于注解的AOP功能，我们获取注入的对象，需要以接口的类型来获取，因为你注入的对象.getClass() 已经是代理类型了。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启基于注解的AOP功能--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>当 spring 容器开启了基于注解的 AOP 功能，我们获取注入的对象，也可以通过 id 来获取，但是也要转成接口类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//得到spring容器</span></span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//这里我们需要通过接口类型来获取到注入的SmartDog对象=&gt;就是代理对象</span></span><br><span class="line">       <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> (SmartAnimal)ioc.getBean(<span class="string">&quot;smartDog&quot;</span>);<span class="comment">//使用的id获取</span></span><br><span class="line">       smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><ol><li>有接口 UsbInterface (方法 work) </li><li>实现子类 Phone 和 Camera 实现 UsbInterface </li><li>请在 SmartAnimalAspect 切面类，写一个方法(可输出日志信息) 等作为前置通知，在 Phone 和 Camera 对象执行 work 方法前调用 </li><li>其它返回通知，异常通知，后置通知，也可以加入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//把Phone对象当做一个组件注入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Phone work()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Camera</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Camera work()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public void com.lzw.spring.aop.aspectj.UsbInterface.work())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类前置通知--日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml文件和上述beans08.xml文件相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartUsbTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">        <span class="type">UsbInterface</span> <span class="variable">phone</span> <span class="operator">=</span> (UsbInterface) ioc.getBean(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">        <span class="type">UsbInterface</span> <span class="variable">camera</span> <span class="operator">=</span> (UsbInterface) ioc.getBean(<span class="string">&quot;camera&quot;</span>);</span><br><span class="line">        phone.work();</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">        camera.work();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-切入表达式"><a href="#AOP-切入表达式" class="headerlink" title="AOP-切入表达式"></a>AOP-切入表达式</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​通过表达式的方式定位一个或多个具体的连接点。</p><h3 id="语法细节"><a href="#语法细节" class="headerlink" title="语法细节"></a>语法细节</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([权限修饰符] [返回值类型] [简单类名/全类名] [方法名]([参数列表]))</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609213925500-165833097371863.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214122225-165833097371964.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214204005-165833097371965.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214235962-165833097371966.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214255540-165833097371967.png"> </div> <p>​在AspectJ中，切入点表达式可以通过过 “&amp;&amp;”、“||”，“!“ 等操作符结合起来。</p><div align="center"> <img src="\images\Spring5.assets\image-20220609214408078-165833097371968.png"> </div> <h3 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>切入表达式也可以指向类的方法，这时切入表达式会对该类&#x2F;对象生效。 </li><li>切入表达式也可以指向接口的方法，这时切入表达式会对实现了接口的类&#x2F;对象生效。</li><li>切入表达式也可以对没有实现接口的类，进行切入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Car run()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="comment">//给Car配置一个前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public void Car.run())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readyRun</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类readyRun--日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> ioc.getBean(Car.class);</span><br><span class="line">        <span class="comment">//说明: car对象仍然是代理对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;car的运行类型=&quot;</span> + car.getClass());<span class="comment">//class com.lzw.spring.aop.aspectj.Car$$EnhancerBySpringCGLIB$$11073d67</span></span><br><span class="line">        car.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>动态代理 jdk 的 Proxy 与 Spring 的 CGlib 。<a href="https://www.cnblogs.com/threeAgePie/p/15832586.html%E3%80%82">https://www.cnblogs.com/threeAgePie/p/15832586.html。</a></li></ol><p>​（1）JDK动态代理是面向接口的，只能增强实现类中接口中存在的方法。CGlib是面向父类的，可以增强父类的所有方法。</p><p>​（2）JDK得到的对象是JDK代理对象实例，而CGlib得到的对象是被代理对象的子类。</p><h2 id="AOP-JoinPoint"><a href="#AOP-JoinPoint" class="headerlink" title="AOP-JoinPoint"></a>AOP-JoinPoint</h2><p>​通过 JoinPoint 可以获取到调用方法的签名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123; </span><br><span class="line">    joinPoint.getSignature().getName(); <span class="comment">// 获取目标方法名 </span></span><br><span class="line">    joinPoint.getSignature().getDeclaringType().getSimpleName(); <span class="comment">// 获取目标方法所属 类的简单类名 </span></span><br><span class="line">    joinPoint.getSignature().getDeclaringTypeName(); <span class="comment">// 获取目标方法所属类的类名 </span></span><br><span class="line">    joinPoint.getSignature().getModifiers(); <span class="comment">// 获取目标方法声明类型数字(public、private、 protected)</span></span><br><span class="line">    Object[] args = joinPoint.getArgs(); <span class="comment">// 获取传入目标方法的参数，返回一个数组 </span></span><br><span class="line">    joinPoint.getTarget(); <span class="comment">// 获取被代理的对象 </span></span><br><span class="line">    joinPoint.getThis(); <span class="comment">// 获取代理对象自己</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-返回通知获取结果"><a href="#AOP-返回通知获取结果" class="headerlink" title="AOP-返回通知获取结果"></a>AOP-返回通知获取结果</h2><div align="center"> <img src="\images\Spring5.assets\image-20220610083351786-165833097371969.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 如果我们希望把目标方法执行的结果，返回给切入方法</span></span><br><span class="line">   <span class="comment">//2. 可以在 @AfterReturning 增加属性 , 比如 returning = &quot;res&quot;</span></span><br><span class="line">   <span class="comment">//3. 同时在切入方法增加 Object res</span></span><br><span class="line">   <span class="comment">//4. 注意: returning = &quot;res&quot; 和 Object res 的 res名字一致</span></span><br><span class="line">   <span class="comment">//@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">   <span class="comment">//使用切入点</span></span><br><span class="line">   <span class="meta">@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">           returning = &quot;res&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">       System.out.println(<span class="string">&quot;切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610083720255-165833097371970.png"> </div> <h2 id="AOP-异常通知中获取异常"><a href="#AOP-异常通知中获取异常" class="headerlink" title="AOP-异常通知中获取异常"></a>AOP-异常通知中获取异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">           throwing = &quot;throwable&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">       System.out.println(<span class="string">&quot;切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610084244646-165833097371972.png"> </div> <h2 id="AOP-环绕通知【了解】"><a href="#AOP-环绕通知【了解】" class="headerlink" title="AOP-环绕通知【了解】"></a>AOP-环绕通知【了解】</h2><p>​环绕通知可以完成其它四个通知要做的事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 切面类，类似于以前自己写的 MyProxyProvider，功能肯定强大很多</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect2到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示环绕通知的使用-了解</span></span><br><span class="line">    <span class="comment">//1. @Around: 表示这是一个环绕通知[完成其它四个通知的功能]</span></span><br><span class="line">    <span class="comment">//2. value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float)) 切入点表达式</span></span><br><span class="line">    <span class="comment">//3. doAround 表示要切入的方法 - 调用结构 try-catch-finally</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.相当于前置通知完成的事情</span></span><br><span class="line">            Object[] args = joinPoint.getArgs();</span><br><span class="line">            List&lt;Object&gt; argList = Arrays.asList(args);</span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-前置通知]&quot;</span> + methodName + <span class="string">&quot;方法开始了--参数有：&quot;</span> + argList);</span><br><span class="line">            <span class="comment">//在环绕通知中一定要调用joinPoint.proceed()来执行目标方法</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            <span class="comment">//2.相当于返回通知完成的事情</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-返回通知]&quot;</span> + methodName + <span class="string">&quot;方法结束了--结果是：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="comment">//3.相当于异常通知完成的事情</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-异常通知]&quot;</span> + methodName + <span class="string">&quot;方法抛异常了--异常对象：&quot;</span> + throwable);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.相当于最终通知完成的事情</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-后置通知]&quot;</span> + methodName + <span class="string">&quot;方法最终结束了...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDoAround</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//得到spring容器</span></span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">       <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">       smartAnimal.getSum(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610085347806-165833097371971.png"> </div> <h2 id="AOP-切入点表达式重用"><a href="#AOP-切入点表达式重用" class="headerlink" title="AOP-切入点表达式重用"></a>AOP-切入点表达式重用</h2><p>​为了统一管理切入点表达式，可以使用切入点表达式重用技术。</p><div align="center"> <img src="\images\Spring5.assets\image-20220610090550793-165833097371973.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 使用切入点表达式重用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个切入点，在后面使用时可以直接引用，提高了复用性</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mePointCut</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f1()[使用myPointCut()]-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mePointCut()&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mePointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@After(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-切面优先级问题"><a href="#AOP-切面优先级问题" class="headerlink" title="AOP-切面优先级问题"></a>AOP-切面优先级问题</h2><p>​如果同一个方法，有多个切面在同一个切入点切入，那么执行的优先级如何控制。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>​@order(value&#x3D;n) 来控制 n 值越小，优先级越高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(value = 2)</span><span class="comment">//表示该切面类执行的顺序，value的值越小，优先级越高</span></span><br><span class="line"><span class="meta">@Aspect</span> </span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个切入点，在后面使用时可以直接引用，提高了复用性</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mePointCut</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f1()[使用myPointCut()]-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mePointCut()&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mePointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@After(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public float SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f1()-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">            returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">            throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">       <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">       smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610091829779-165833097371974.png"> </div> <p>​后执行的，会被先执行的包裹起来。</p><h3 id="注意事项和细节说明-2"><a href="#注意事项和细节说明-2" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol><li>不能理解成：优先级高的每个消息通知都先执行，这个和方法调用机制(和 Filter 过滤器 链式调用类似)。</li><li>执行顺序</li></ol><img src="\images\Spring5.assets\image-20220610091958816-165833097371975.png" alt="image-20220610091958816" style="zoom:80%;" /><h2 id="AOP-基于-XML-配置-AOP"><a href="#AOP-基于-XML-配置-AOP" class="headerlink" title="AOP-基于 XML 配置 AOP"></a>AOP-基于 XML 配置 AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这是我们开发的一个切面类，不用注解，而是使用XML配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-XML配置-切面类f1()-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用XML配置，完成AOP编程--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一个切面类-bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.aop.xml.SmartAnimalAspect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;smartAnimalAspect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一个SmartDog对象-bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.aop.xml.SmartDog&quot;</span> <span class="attr">id</span>=<span class="string">&quot;smartDog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类, 细节一定要引入 xmlns:aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public float com.lzw.spring.aop.xml.SmartDog.getSum(float, float))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面的前置，返回, 异常, 最终通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;smartAnimalAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;showBeginLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--返回通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;showSuccessEndLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;res&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--异常通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;showExceptionLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;throwable&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--最终通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;showFinallyEndLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置环绕通知--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:around method=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAspectjXMLTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAspectByXML</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans09.xml&quot;</span>);</span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">        smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-JdbcTemplate"><a href="#第四章-JdbcTemplate" class="headerlink" title="第四章 JdbcTemplate"></a>第四章 JdbcTemplate</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>如果程序员就希望使用 spring 框架来做项目，spring 框架如何处理对数据库的操作呢？</p><p>​方案 1：使用前面做项目开发的 JdbcUtils 类 。</p><p>​方案 2：其实 spring 提供了一个操作数据库(表)功能强大的类 JdbcTemplate 。我们可以同 ioc 容器来配置一个 jdbcTemplate 对象，使用它来完成对数据库表的各种操作。</p><h2 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a>官方文档</h2><p>JdbcTemplate APIs : &#x2F;spring-framework-5.3.8&#x2F;docs&#x2F;javadoc-api&#x2F;index.html</p><h2 id="JdbcTemplate-介绍"><a href="#JdbcTemplate-介绍" class="headerlink" title="JdbcTemplate-介绍"></a>JdbcTemplate-介绍</h2><ol><li>通过 Spring 可以配置数据源，从而完成对数据表的操作 。</li><li>JdbcTemplate 是 Spring 提供的访问数据库的技术。可以将 JDBC 的常用操作封装为模板方法。</li></ol><div align="center"> <img src="\images\Spring5.assets\image-20220611172851866-165833097372078.png"> </div> <h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="正确得到数据源"><a href="#正确得到数据源" class="headerlink" title="正确得到数据源"></a>正确得到数据源</h3><h4 id="先引入JdbcTemplate需要的jar包。"><a href="#先引入JdbcTemplate需要的jar包。" class="headerlink" title="先引入JdbcTemplate需要的jar包。"></a>先引入JdbcTemplate需要的jar包。</h4><div align="center"> <img src="\images\Spring5.assets\image-20220611173023389-165833097372077.png"> </div> <h4 id="创建数据库spring和表monster"><a href="#创建数据库spring和表monster" class="headerlink" title="创建数据库spring和表monster"></a>创建数据库spring和表monster</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库 </span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE spring</span><br><span class="line"><span class="comment">-- 创建表 monster </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> monster(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">skill <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">)CHARSET<span class="operator">=</span>utf8 </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monster <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;青牛怪&#x27;</span>, <span class="string">&#x27;吐火&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monster <span class="keyword">VALUES</span>(<span class="number">200</span>, <span class="string">&#x27;黄袍怪&#x27;</span>, <span class="string">&#x27;吐烟&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monster <span class="keyword">VALUES</span>(<span class="number">300</span>, <span class="string">&#x27;蜘蛛怪&#x27;</span>, <span class="string">&#x27;吐丝&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="创建配置文件-src-x2F-jdbc-properties"><a href="#创建配置文件-src-x2F-jdbc-properties" class="headerlink" title="创建配置文件 src&#x2F;jdbc.properties"></a>创建配置文件 src&#x2F;jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br></pre></td></tr></table></figure><h4 id="创建配置文件-src-x2F-JdbcTemplate-ioc-xml"><a href="#创建配置文件-src-x2F-JdbcTemplate-ioc-xml" class="headerlink" title="创建配置文件 src&#x2F;JdbcTemplate_ioc.xml"></a>创建配置文件 src&#x2F;JdbcTemplate_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试是否可以正确得到数据源"><a href="#测试是否可以正确得到数据源" class="headerlink" title="测试是否可以正确得到数据源"></a>测试是否可以正确得到数据源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDatasourceByJdbcTemplate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ioc.getBean(DataSource.class);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到connection = &quot;</span> + connection);</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220611175217274-165833097372081.png"> </div> <h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="配置-JdbcTemplate-ioc-xml"><a href="#配置-JdbcTemplate-ioc-xml" class="headerlink" title="配置 JdbcTemplate_ioc.xml"></a>配置 JdbcTemplate_ioc.xml</h4><p>将数据源分配给 JdbcTemplate bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置JdbcTemplate对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给JdbcTemplate对象配置dataSource--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplateTest-java"><a href="#修改-JdbcTemplateTest-java" class="headerlink" title="修改 JdbcTemplateTest.java"></a>修改 JdbcTemplateTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试通过JdbcTemplate对象完成添加数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//获取JdbcTemplate对象</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="comment">//1. 添加方式1</span></span><br><span class="line">       <span class="comment">//String sql = &quot;Insert into monster Value(400, &#x27;红孩儿&#x27;, &#x27;枪法&#x27;)&quot;;</span></span><br><span class="line">       <span class="comment">//jdbcTemplate.execute(sql);</span></span><br><span class="line">       <span class="comment">//2. 添加方式2</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO monster VALUES(?, ?, ?)&quot;</span>;</span><br><span class="line">       <span class="comment">//affected表示 执行后表受影响的记录数</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">500</span>, <span class="string">&quot;红孩儿2&quot;</span>, <span class="string">&quot;枪法2&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;添加成功 affected = &quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试通过JdbcTemplate对象完成修改数据</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//获取JdbcTemplate对象</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="comment">//组织SQL</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE monster SET skill=? WHERE id=?&quot;</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;美人计&quot;</span>, <span class="number">300</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;update ok affected= &quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加两个monster</span></span><br><span class="line">   <span class="comment">//这里有一个使用API的技巧</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 对于某个类， 有很多API, 使用的步骤</span></span><br><span class="line"><span class="comment">    * 2. 使用技巧（1） 先确定API名字 (2) 根据API提供相应的参数 [组织参数]</span></span><br><span class="line"><span class="comment">    *    (3) 把自己的调用思路清晰 (4) 根据API, 可以推测类似的用法和功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * batch add data</span></span><br><span class="line"><span class="comment">    * 批量添加二个monster 白蛇精和青蛇精-update(sql,List&lt;Object[]&gt;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBatchDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);<span class="comment">//添加..</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 先确定,猜测API名称 batchUpdate[如果出现问题，才重新玩]</span></span><br><span class="line">       <span class="comment">//public int[] batchUpdate(String sql, List&lt;Object[]&gt; batchArgs)&#123;&#125;</span></span><br><span class="line">       <span class="comment">//2. 准备参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO monster VALUES(?, ?, ?)&quot;</span>;</span><br><span class="line">       List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       batchArgs.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">600</span>, <span class="string">&quot;老鼠精&quot;</span>, <span class="string">&quot;偷吃粮食&quot;</span>&#125;);</span><br><span class="line">       batchArgs.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">700</span>, <span class="string">&quot;老猫精&quot;</span>, <span class="string">&quot;抓老鼠&quot;</span>&#125;);</span><br><span class="line">       <span class="comment">//3. 调用</span></span><br><span class="line">       <span class="comment">//说明：返回结果是一个数组，每个元素对应上面的sql语句对表的影响记录数</span></span><br><span class="line">       <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">       <span class="comment">//输出</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;anInt=&quot;</span> + anInt);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;batch add ok..&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="查询单条数据并封装成对象"><a href="#查询单条数据并封装成对象" class="headerlink" title="查询单条数据并封装成对象"></a>查询单条数据并封装成对象</h3><p>这里的Monster还是使用的第一章中的Monster类。</p><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询id=100的monster并封装到Monster实体对象[在实际开发中，非常有用]</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">    <span class="comment">//组织SQL</span></span><br><span class="line">    <span class="comment">//通过BeanPropertyRowMapper获取rowmapper 是一个接口，可以将查询的结果，封装到你指定的Monster对象中.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 确定API ： queryForObject()</span></span><br><span class="line">    <span class="comment">//public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args)</span></span><br><span class="line">    <span class="comment">//2.准备参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id AS monsterID, NAME, skill FROM monster WHERE id = 100&quot;</span>;</span><br><span class="line">    <span class="comment">//使用RowMapper 接口对返回的数据，进行一个封装-&gt;底层使用的反射-&gt;setter</span></span><br><span class="line">    <span class="comment">//这里有一个细节: 你查询的记录的表的字段需要和 Monster的对象字段名保持一致</span></span><br><span class="line">    RowMapper&lt;Monster&gt; rowMapper = <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Monster.class);</span><br><span class="line">    <span class="comment">//jdbcTemplate</span></span><br><span class="line">    <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, rowMapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;monster= &quot;</span> + monster);</span><br><span class="line">    System.out.println(<span class="string">&quot;查询ok&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询多条数据并封装成对象集合"><a href="#查询多条数据并封装成对象集合" class="headerlink" title="查询多条数据并封装成对象集合"></a>查询多条数据并封装成对象集合</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询多条记录</span></span><br><span class="line"><span class="comment">    * 查询id&gt;=100的monster并封装到Monster实体对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectMulDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="comment">//组织SQL</span></span><br><span class="line">       <span class="comment">//通过BeanPropertyRowMapper获取rowmapper 是一个接口，可以将查询的结果，封装到你指定的Monster对象中.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.    确定API</span></span><br><span class="line">       <span class="comment">//public &lt;T&gt; T query(String sql, RowMapper&lt;T&gt; rowMapper, Object... args)&#123;&#125;</span></span><br><span class="line">       <span class="comment">//2. 组织参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id AS monsterId, NAME, skill FROM monster WHERE id &gt;= ?&quot;</span>;</span><br><span class="line">       RowMapper&lt;Monster&gt; rowMapper = <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Monster.class);</span><br><span class="line">       <span class="comment">//3.调用</span></span><br><span class="line">       List&lt;Monster&gt; monsterList = jdbcTemplate.query(sql, rowMapper, <span class="number">100</span>);</span><br><span class="line">       <span class="keyword">for</span> (Monster monster : monsterList) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;monster= &quot;</span> + monster);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="查询返回结果只有一行一列的数据"><a href="#查询返回结果只有一行一列的数据" class="headerlink" title="查询返回结果只有一行一列的数据"></a>查询返回结果只有一行一列的数据</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查询返回结果只有一行一列的值，比如查询id=100的怪物名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectScalarByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">      <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1. 确定API</span></span><br><span class="line">      <span class="comment">//public &lt;T&gt; T queryForObject(String sql, Class&lt;T&gt; requiredType)</span></span><br><span class="line">      <span class="comment">//2. 提供参数</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT NAME FROM monster WHERE id = 100&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, String.class);</span><br><span class="line">      System.out.println(<span class="string">&quot;返回name= &quot;</span> + name);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Map-传入具名参数完成添加操作"><a href="#使用-Map-传入具名参数完成添加操作" class="headerlink" title="使用 Map 传入具名参数完成添加操作"></a>使用 Map 传入具名参数完成添加操作</h3><h4 id="修改-JdbcTemplate-ioc-xml"><a href="#修改-JdbcTemplate-ioc-xml" class="headerlink" title="修改 JdbcTemplate_ioc.xml"></a>修改 JdbcTemplate_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置NamedParameterJdbcTemplate对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;namedParameterJdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过构造器，设置数据源--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplateTest-java-1"><a href="#修改-JdbcTemplateTest-java-1" class="headerlink" title="修改 JdbcTemplateTest.java"></a>修改 JdbcTemplateTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用Map传入具名参数完成操作，比如添加 螃蟹精.:name 就是具名参数形式需要使用NamedParameterJdbcTemplate 类,</span></span><br><span class="line"><span class="comment">    * 语句形式: String sql = &quot;INSERT INTO monster VALUES(:my_id, :name, :skill)&quot;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataByNamedParameterJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到NamedParameterJdbcTemplate bean</span></span><br><span class="line">       <span class="type">NamedParameterJdbcTemplate</span> <span class="variable">namedParameterJdbcTemplate</span> <span class="operator">=</span> ioc.getBean(NamedParameterJdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 确定使用API</span></span><br><span class="line">       <span class="comment">//public int update(String sql, Map&lt;String, ?&gt; paramMap)</span></span><br><span class="line">       <span class="comment">//2. 准备参数 [:my_id, :name, :skill] 要求按照规定的名字来设置参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into monster values(:id, :name, :skill)&quot;</span>;</span><br><span class="line">       Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//给paramMap填写数据</span></span><br><span class="line">       paramMap.put(<span class="string">&quot;id&quot;</span>, <span class="number">800</span>);</span><br><span class="line">       paramMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;蚂蚁精&quot;</span>);</span><br><span class="line">       paramMap.put(<span class="string">&quot;skill&quot;</span>, <span class="string">&quot;喜欢打洞&quot;</span>);</span><br><span class="line">       <span class="comment">//3. 调用</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> namedParameterJdbcTemplate.update(sql, paramMap);</span><br><span class="line">       System.out.println(<span class="string">&quot;add ok affected=&quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220611192753526-165833097372079.png"> </div> <h3 id="使用-sqlparametersoruce-来传入具名参数完成添加操作"><a href="#使用-sqlparametersoruce-来传入具名参数完成添加操作" class="headerlink" title="使用 sqlparametersoruce 来传入具名参数完成添加操作"></a>使用 sqlparametersoruce 来传入具名参数完成添加操作</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用sqlparametersoruce 来传入具名参数,还是添加一个Monster 狐狸精</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operDataBySqlparametersoruce</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到NamedParameterJdbcTemplate bean</span></span><br><span class="line">       <span class="type">NamedParameterJdbcTemplate</span> <span class="variable">namedParameterJdbcTemplate</span> <span class="operator">=</span> ioc.getBean(NamedParameterJdbcTemplate.class);</span><br><span class="line">       <span class="comment">//确定API</span></span><br><span class="line">       <span class="comment">//public int update(String sql, SqlParameterSource paramSource)</span></span><br><span class="line">       <span class="comment">//public BeanPropertySqlParameterSource(Object object)</span></span><br><span class="line">       <span class="comment">//准备参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO monster VALUES(:monsterID, :name, :skill)&quot;</span>;</span><br><span class="line">       <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">900</span>, <span class="string">&quot;大象精&quot;</span>, <span class="string">&quot;搬运木头&quot;</span>);</span><br><span class="line">       <span class="type">SqlParameterSource</span> <span class="variable">sqlParameterSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanPropertySqlParameterSource</span>(monster);</span><br><span class="line">       <span class="comment">//3. 调用</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> namedParameterJdbcTemplate.update(sql, sqlParameterSource);</span><br><span class="line">       System.out.println(<span class="string">&quot;add ok affected=&quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220611192837530-165833097372080.png"> </div> <h3 id="Dao-对象使用-JdbcTemplate-完成对数据的操作"><a href="#Dao-对象使用-JdbcTemplate-完成对数据的操作" class="headerlink" title="Dao 对象使用 JdbcTemplate 完成对数据的操作"></a>Dao 对象使用 JdbcTemplate 完成对数据的操作</h3><h4 id="创建-MonsterDao-java"><a href="#创建-MonsterDao-java" class="headerlink" title="创建 MonsterDao.java"></a>创建 MonsterDao.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.jdbctemplate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//将MonsterDao注入到Spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonsterDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入一个属性</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成保存任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Monster monster)</span>&#123;</span><br><span class="line">        <span class="comment">//组织sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into monster values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, monster.getMonsterID(), monster.getName(), monster.getSkill());</span><br><span class="line">        System.out.println(<span class="string">&quot;affected = &quot;</span> + affected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplate-ioc-xml-1"><a href="#修改-JdbcTemplate-ioc-xml-1" class="headerlink" title="修改 JdbcTemplate_ioc.xml"></a>修改 JdbcTemplate_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.jdbctemplate.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplateTest-java-2"><a href="#修改-JdbcTemplateTest-java-2" class="headerlink" title="修改 JdbcTemplateTest.java"></a>修改 JdbcTemplateTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试MonsterDAO</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monsterDaoSave</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">MonsterDao</span> <span class="variable">monsterDao</span> <span class="operator">=</span> ioc.getBean(MonsterDao.class);</span><br><span class="line">       <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">1000</span>, <span class="string">&quot;小鸭精&quot;</span>, <span class="string">&quot;吃鱼&quot;</span>);</span><br><span class="line">       monsterDao.save(monster);</span><br><span class="line">       System.out.println(<span class="string">&quot;MonsterDAO保存 ok ..&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-声明式事务"><a href="#第五章-声明式事务" class="headerlink" title="第五章 声明式事务"></a>第五章 声明式事务</h1><h2 id="事务分类"><a href="#事务分类" class="headerlink" title="事务分类"></a>事务分类</h2><ol><li><p>编程式事务</p></li><li><p><strong>声明式事务</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection(); </span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//1. 先设置事务不要自动提交 </span></span><br><span class="line">       connection.setAutoCommint(<span class="literal">false</span>); </span><br><span class="line">       <span class="comment">//2. 进行各种 crud </span></span><br><span class="line">       <span class="comment">//多个表的修改，添加 ，删除 </span></span><br><span class="line">       <span class="comment">//3. 提交 </span></span><br><span class="line">       connection.commit(); </span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       <span class="comment">//4. 回滚</span></span><br><span class="line">       conection.rollback(); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>我们需要去处理用户购买商品的业务逻辑</p><p>分析：当一个用户要去购买商品应该包含三个步骤</p><ol><li>通过商品 id 获取价格。</li><li>购买商品(某人购买商品，修改用户的余额) 。</li><li>修改库存量 。</li><li>其实大家可以看到，这时，我们需要涉及到三张表商品表，用户表，商品存量表。 应该使用事务处理。</li></ol><h3 id="传统的编程式事务分析"><a href="#传统的编程式事务分析" class="headerlink" title="传统的编程式事务分析"></a>传统的编程式事务分析</h3><ol><li><p>使用传统的编程事务来处理，将代码写到一起[缺点: 代码冗余，效率低，不利于扩展, 优 点是简单，好理解]。</p></li><li><p>使用 Spring 的声明式事务处理， 可以将上面三个子步骤分别写成一个方法，然后统一 管理[这个是 Spring 很牛的地方，在开发使用的很多，优点是无代码冗余，效率高，扩展方便， 缺点是理解较困难]&#x3D;&#x3D;&gt; 底层使用 AOP (动态代理+动态绑定+反射+注解)。</p></li></ol><h3 id="声明式事务使用"><a href="#声明式事务使用" class="headerlink" title="声明式事务使用"></a>声明式事务使用</h3><h4 id="先创建商品系统的数据库和表"><a href="#先创建商品系统的数据库和表" class="headerlink" title="先创建商品系统的数据库和表"></a>先创建商品系统的数据库和表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示声明式事务创建的表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_account`( </span><br><span class="line">    user_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    user_name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    money <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line">)CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_account` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>, <span class="number">1000</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_account` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods`(</span><br><span class="line">    goods_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    goods_name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    price <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line">)CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小风扇&#x27;</span>, <span class="number">10.00</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小台灯&#x27;</span>, <span class="number">12.00</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;可口可乐&#x27;</span>, <span class="number">3.00</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods_amount`( </span><br><span class="line">    goods_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    goods_num <span class="type">INT</span> UNSIGNED <span class="keyword">DEFAULT</span> <span class="number">0</span> </span><br><span class="line">)CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods_amount` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">200</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods_amount` <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods_amount` <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h4 id="创建GoodsDao"><a href="#创建GoodsDao" class="headerlink" title="创建GoodsDao"></a>创建GoodsDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsDao</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据商品id,返回对应的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">queryPriceById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT price From goods Where goods_id=?&quot;</span>;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Float.class, id);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户的余额 [减少用户余额]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer user_id, Float money)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user_account SET money=money-? Where user_id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, money, user_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改商品库存 [减少]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goods_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建src-tx-ioc-xml"><a href="#创建src-tx-ioc-xml" class="headerlink" title="创建src\tx_ioc.xml"></a>创建src\tx_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.tx.dao&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入外部的jdbc.properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源对象-DataSoruce--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给数据源对象配置属性值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置JdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给JdbcTemplate对象配置dataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建TxTest-进行测试"><a href="#创建TxTest-进行测试" class="headerlink" title="创建TxTest 进行测试"></a>创建TxTest 进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.tx.dao.GoodsDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryPriceByIdTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取到容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">GoodsDao</span> <span class="variable">goodsDao</span> <span class="operator">=</span> ioc.getBean(GoodsDao.class);</span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;id=1 的price=&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取到容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">GoodsDao</span> <span class="variable">goodsDao</span> <span class="operator">=</span> ioc.getBean(GoodsDao.class);</span><br><span class="line">        goodsDao.updateBalance(<span class="number">1</span>, <span class="number">1.0F</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;减少用户余额成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取到容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">GoodsDao</span> <span class="variable">goodsDao</span> <span class="operator">=</span> ioc.getBean(GoodsDao.class);</span><br><span class="line">        goodsDao.updateAmount(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;减少库存成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建GoodsService"><a href="#创建GoodsService" class="headerlink" title="创建GoodsService"></a>创建GoodsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.tx.dao.GoodsDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将 GoodsService对象注入到spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，完成用户购买商品的业务, 这里主要是讲解事务管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  购买数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoods</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改tx-ioc-xml"><a href="#修改tx-ioc-xml" class="headerlink" title="修改tx_ioc.xml"></a>修改tx_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.tx.service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改GoodsDao，让操作发生异常"><a href="#修改GoodsDao，让操作发生异常" class="headerlink" title="修改GoodsDao，让操作发生异常"></a>修改GoodsDao，让操作发生异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改商品库存 [减少]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> goods_id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATEX goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改TxTest-进行测试"><a href="#修改TxTest-进行测试" class="headerlink" title="修改TxTest 进行测试"></a>修改TxTest 进行测试</h4><p>验证不使用事务就会出现数据不一致现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用户购买商品业务</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsTest</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line">       goodsService.buyGoods(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="修改GoodsService"><a href="#修改GoodsService" class="headerlink" title="修改GoodsService"></a>修改GoodsService</h4><p>加入声明式事务注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Transactional</span> 注解解读</span></span><br><span class="line"><span class="comment">    * 1. 使用<span class="doctag">@Transactional</span> 可以进行声明式事务控制</span></span><br><span class="line"><span class="comment">    * 2. 即将标识的方法中的，对数据库的操作作为一个事务管理</span></span><br><span class="line"><span class="comment">    * 3. <span class="doctag">@Transactional</span> 底层使用的仍然是AOP机制</span></span><br><span class="line"><span class="comment">    * 4. 底层是使用动态代理对象来调用buyGoodsByTx</span></span><br><span class="line"><span class="comment">    * 5. 在执行buyGoodsByTx() 方法 先调用 事务管理器的 doBegin() , 调用 buyGoodsByTx()</span></span><br><span class="line"><span class="comment">    *    如果执行没有发生异常，则调用 事务管理器的 doCommit(), 如果发生异常 调用事务管理器的 doRollback()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       <span class="comment">//输出购买的相关信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="comment">//1.得到商品的价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">       <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">       goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">       <span class="comment">//3. 减少库存量</span></span><br><span class="line">       goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改tx-ioc-xml-1"><a href="#修改tx-ioc-xml-1" class="headerlink" title="修改tx_ioc.xml"></a>修改tx_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器-对象</span></span><br><span class="line"><span class="comment">   1. DataSourceTransactionManager 这个对象是进行事务管理-debug源码</span></span><br><span class="line"><span class="comment">   2. 一定要配置数据源属性，这样指定该事务管理器 是对哪个数据源进行事务控制</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置启动基于注解的声明式事务管理功能--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改TxTest-进行测试-1"><a href="#修改TxTest-进行测试-1" class="headerlink" title="修改TxTest 进行测试"></a>修改TxTest 进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用户购买商品业务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取到容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">    <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line">    goodsService.buyGoodsByTx(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//这里我们调用的是进行了事务声明的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式事务机制-Debug"><a href="#声明式事务机制-Debug" class="headerlink" title="声明式事务机制-Debug"></a>声明式事务机制-Debug</h3><h4 id="doBegin"><a href="#doBegin" class="headerlink" title="doBegin"></a>doBegin</h4><p><strong>protected void doBegin(Object transaction, TransactionDefinition definition)中</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220612100840040-165833097372083.png"> </div> <h4 id="doCommit"><a href="#doCommit" class="headerlink" title="doCommit"></a>doCommit</h4><p><strong>protected void doCommit(DefaultTransactionStatus status)中</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220612101007683-165833097372082.png"> </div> <h4 id="doRollback"><a href="#doRollback" class="headerlink" title="doRollback"></a>doRollback</h4><p><strong>protected void doRollback(DefaultTransactionStatus status)中</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220612101122874-165833097372085.png"> </div> <h2 id="事务的传播机制"><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h2><p>事务的传播机制说明</p><ol><li><p>当有多个事务处理并存时，如何控制? </p></li><li><p>比如用户去购买两次商品(使用不同的方法)，每个方法都是一个事务，那么如何控制呢?</p></li><li><p>这个就是事务的传播机制，看一个具体的案例(如图)</p></li></ol><p>​         <img src="\images\Spring5.assets\image-20220612104455297-165833097372084.png" alt="image-20220612104455297" style="zoom:50%;" /><img src="D:\Study\VIP\主流框架\Spring5\笔记\Spring5.assets\image-20220612104514261.png" alt="image-20220612104514261" style="zoom:50%;" /></p><h3 id="事务传播机制种类"><a href="#事务传播机制种类" class="headerlink" title="事务传播机制种类"></a>事务传播机制种类</h3><p>事务传播的属性&#x2F;种类一览图</p><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</td></tr><tr><td>REQUIREDS_NEW</td><td>当前的方法必须启动新事务，并在它自己的事务内运行.如果有事务正在运行，应该将它挂起</td></tr><tr><td>SUPPORTS</td><td>如果有事务在运行，当前的方法就在这个事务内运行。否则它可以不运行在事务中</td></tr><tr><td>NOT_SUPPORTED</td><td>当前的方法不应该运行在事务中，如果有运行的事务，将它挂起</td></tr><tr><td>MANDATORY</td><td>当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常</td></tr><tr><td>NEVER</td><td>当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常</td></tr><tr><td>NESTED</td><td>如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行。否则，就启动一个新的事务，并在它自己的事务内运行</td></tr></tbody></table><p>事务传播的属性&#x2F;种类机制分析</p><p>重点分析了 REQUIRED 和 REQUIRED_NEW 两种事务传播属性</p><div align="center"> <img src="\images\Spring5.assets\image-20220612110035641-165833097372087.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220612110047056-165833097372088.png"> </div> <p>REQUIRES_NEW 和 REQUIRED 在处理事务的策略</p><ol><li>如果设置为 REQUIRES_NEW，buyGoods2 如果错误，不会影响到 buyGoods()反之亦然，即它们的<strong>事务是独立的</strong>。</li><li>如果设置为 REQUIRED，buyGoods2 和 buyGoods 是一个整体，只要有方法的事务错误，那么两个方法都不会执行成功。</li></ol><h3 id="事务的传播机制的设置方法"><a href="#事务的传播机制的设置方法" class="headerlink" title="事务的传播机制的设置方法"></a>事务的传播机制的设置方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> </span><br></pre></td></tr></table></figure><h3 id="事务的传播机制应用实例"><a href="#事务的传播机制应用实例" class="headerlink" title="事务的传播机制应用实例"></a>事务的传播机制应用实例</h3><h4 id="修改-GoodsDao"><a href="#修改-GoodsDao" class="headerlink" title="修改 GoodsDao"></a>修改 GoodsDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据商品id,返回对应的价格</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> Float <span class="title function_">queryPriceById2</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT price From goods Where goods_id=?&quot;</span>;</span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Float.class, id);</span><br><span class="line">       <span class="keyword">return</span> price;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改用户的余额 [减少用户余额]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> user_id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance2</span><span class="params">(Integer user_id, Float money)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user_account SET money=money-? Where user_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, money, user_id);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改商品库存 [减少]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> goods_id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount2</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改-GoodsService"><a href="#修改-GoodsService" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><p>增加 buyGoodsByTx2()，使用默认的传播机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.tx.dao.GoodsDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将 GoodsService对象注入到spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义属性GoodsDao</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，完成用户购买商品的业务, 这里主要是讲解事务管理</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  购买数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoods</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(goodsId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法是第二套进行商品购买的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx2</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById2(userId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance2(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount2(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-MultiplyService"><a href="#创建-MultiplyService" class="headerlink" title="创建  MultiplyService"></a>创建  MultiplyService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiplyService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. multiBuyGoodsByTx 方法中 有两次购买商品操作</span></span><br><span class="line"><span class="comment">     * 2. buyGoodsByTx 和 buyGoodsByTx2 都是声明式事务</span></span><br><span class="line"><span class="comment">     * 3. 当前 buyGoodsByTx 和 buyGoodsByTx2 使用的传播属性是默认的 REQUIRED</span></span><br><span class="line"><span class="comment">     * [会当做整体事务管理，比如 buyGoodsByTx 成功，但是buyGoodsByTx2失败，</span></span><br><span class="line"><span class="comment">     * 会造成整个事务失败，即会回滚buyGoodsByTx]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multiBuyGoodsByTx</span><span class="params">()</span>&#123;</span><br><span class="line">        goodsService.buyGoodsByTx(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        goodsService.buyGoodsByTx2(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改-GoodsDao-1"><a href="#修改-GoodsDao-1" class="headerlink" title="修改 GoodsDao"></a>修改 GoodsDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount2</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATEX goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改-TxTest-并测试"><a href="#修改-TxTest-并测试" class="headerlink" title="修改 TxTest 并测试"></a>修改 TxTest 并测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试事务传播机制</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multiBuyGoodsByTxTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">MultiplyService</span> <span class="variable">multiplyService</span> <span class="operator">=</span> ioc.getBean(MultiplyService.class);</span><br><span class="line">       multiplyService.multiBuyGoodsByTx();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​<strong>可以验证：为 REQUIRED buyGoodsByTx 和 buyGoodsByTx2 是整体，只要有方法的事务错误，那么两个方法都不会执行成功。</strong></p><hr><h4 id="修改-GoodsService-1"><a href="#修改-GoodsService-1" class="headerlink" title="修改  GoodsService"></a>修改  GoodsService</h4><p>更改传播机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       <span class="comment">//输出购买的相关信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="comment">//1.得到商品的价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">       <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">       goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">       <span class="comment">//3. 减少库存量</span></span><br><span class="line">       goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx2</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       <span class="comment">//输出购买的相关信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="comment">//1.得到商品的价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById2(userId);</span><br><span class="line">       <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">       goodsDao.updateBalance2(userId, price * amount);</span><br><span class="line">       <span class="comment">//3. 减少库存量</span></span><br><span class="line">       goodsDao.updateAmount2(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="再次进行测试"><a href="#再次进行测试" class="headerlink" title="再次进行测试"></a>再次进行测试</h4><p>​<strong>可以验证：设置为 REQUIRES_NEW buyGoodsByTx 如果错误，不会影响到 buyGoodsByTx02()反之亦然，也就 是说它们的事务是独立的。</strong></p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><div align="center"> <img src="\images\Spring5.assets\image-20220612112931664-165833097372089.png"> </div> <h3 id="事务隔离级别说明"><a href="#事务隔离级别说明" class="headerlink" title="事务隔离级别说明"></a>事务隔离级别说明</h3><ol><li>默认的隔离级别，就是 mysql 数据库默认的隔离级别一般为 REPEATABLE_READ。</li><li>看源码可知 Isolation.DEFAULT 是 ：Use the default isolation level of the underlying datastore。</li><li>查看数据库默认的隔离级别 SELECT @@global.tx_isolation。</li></ol><h3 id="事务隔离级别的设置和测试"><a href="#事务隔离级别的设置和测试" class="headerlink" title="事务隔离级别的设置和测试"></a>事务隔离级别的设置和测试</h3><h4 id="修改-GoodsService-2"><a href="#修改-GoodsService-2" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 在默认情况下，声明式事务的隔离级别是 REPEATABLE_READ</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxISOLATION</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//查询两次商品价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第一次查询的价格 = &quot;</span> + price);</span><br><span class="line"></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price2</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第二次查询的价格 = &quot;</span> + price2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><img src="\images\Spring5.assets\image-20220612114221236-165833097372091.png" alt="image-20220612114221236" style="zoom:80%;" /><h4 id="修改-TxTest"><a href="#修改-TxTest" class="headerlink" title="修改 TxTest"></a>修改 TxTest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试声明式事务的隔离级别</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxISOLATIONTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line"></span><br><span class="line">       goodsService.buyGoodsByTxISOLATION();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>断点调试时走到断点处，执行sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> price<span class="operator">=</span><span class="number">8</span> <span class="keyword">where</span> goods_id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220612114515969-165833097372090.png"> </div> <h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><div align="center"> <img src="\images\Spring5.assets\image-20220612114607701-165833097372092.png"> </div> <p><strong>在默认隔离级别(REPEATABLE_READ)下，两次读取的价格一样。</strong></p><h4 id="修改-GoodsService-3"><a href="#修改-GoodsService-3" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><p>测试 READ_COMMITTED 隔离级别情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 在默认情况下，声明式事务的隔离级别是 REPEATABLE_READ</span></span><br><span class="line"><span class="comment">    * 2. 我们将buyGoodsByTxISOLATION 的隔离界别设置为 Isolation.READ_COMMITTED</span></span><br><span class="line"><span class="comment">    * ，表示只要是提交的数据，在当前事务是可以读取最新数据的。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxISOLATION</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//查询两次商品价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第一次查询的价格 = &quot;</span> + price);</span><br><span class="line"></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price2</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第二次查询的价格 = &quot;</span> + price2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>继续使用断点调试</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220615193856967-165833097372094.png"> </div> <p><strong>断点调试时走到断点处，执行sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> price<span class="operator">=</span><span class="number">10</span> <span class="keyword">where</span> goods_id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><div align="center"> <img src="\images\Spring5.assets\image-20220612115110915-165833097372095.png"> </div> <p><strong>在 READ_COMMITTED 隔离级别下，两次读取的价格不一样</strong>。</p><h3 id="事务的超时回滚"><a href="#事务的超时回滚" class="headerlink" title="事务的超时回滚"></a>事务的超时回滚</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ol><li>如果一个事务执行的时间超过某个时间限制，就让该事务回滚。 </li><li>可以通过设置事务超时回顾来实现。</li></ol><h4 id="修改-GoodsService-4"><a href="#修改-GoodsService-4" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. <span class="doctag">@Transactional</span>(timeout = 2)</span></span><br><span class="line"><span class="comment">    * 2. timeout = 2 表示 buyGoodsByTxTimeout 如果执行时间超过了2秒</span></span><br><span class="line"><span class="comment">    *    ，该事务就进行回滚</span></span><br><span class="line"><span class="comment">    * 3. 如果没有设置 timeout，默认为-1，表示使用事务的默认超时时间，或者不支持</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(timeout = 2)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxTimeout</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">       goodsDao.updateBalance(userId, price * amount);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//模拟超时</span></span><br><span class="line">       System.out.println(<span class="string">&quot;==========计时开始==========&quot;</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;==========4秒结束==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">       goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改-TxTest-测试"><a href="#修改-TxTest-测试" class="headerlink" title="修改 TxTest 测试"></a>修改 TxTest 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试 timeout 属性</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxTimeoutTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line">       goodsService.buyGoodsByTxTimeout(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220612120531002-165833097372097.png"> </div> ]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Java/">Java</category>
      
      
      <comments>http://example.com/2022/07/20/Spring5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2022/07/13/hello-world/</link>
      <guid>http://example.com/2022/07/13/hello-world/</guid>
      <pubDate>Wed, 13 Jul 2022 09:41:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;欢迎来到我的博客！这也是我搭建的第一个博客网站，使用了Hexo+Node.js+md文档。在这里准备记录学习过程中记录的笔记和知识点，方便自己复习的同时也方便大家学习。本人小白有问题欢迎大家指出。&lt;/p&gt;
&lt;h2 id=&quot;搭建的第一个博客&quot;&gt;&lt;a href=&quot;#搭建的第一个</description>
        
      
      
      
      <content:encoded><![CDATA[<p>欢迎来到我的博客！这也是我搭建的第一个博客网站，使用了Hexo+Node.js+md文档。在这里准备记录学习过程中记录的笔记和知识点，方便自己复习的同时也方便大家学习。本人小白有问题欢迎大家指出。</p><h2 id="搭建的第一个博客"><a href="#搭建的第一个博客" class="headerlink" title="搭建的第一个博客"></a>搭建的第一个博客</h2><h3 id="使用Hexo-Node-js"><a href="#使用Hexo-Node-js" class="headerlink" title="使用Hexo+Node.js"></a>使用Hexo+Node.js</h3><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>静态生成本地 hexo 界面</p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件</p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>提交到GitHub仓库</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/07/13/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
