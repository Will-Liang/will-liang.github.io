<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/07/23/JavaWeb/"/>
      <url>/2022/07/23/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><h2 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 数字：^[<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line"><span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line"><span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line"><span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line"><span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line"><span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">7</span> 带<span class="number">1</span>-<span class="number">2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"><span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line"><span class="number">11</span> 非零的正整数：^[<span class="number">1</span>-<span class="number">9</span>]\d*$ 或 ^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line"><span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span>-<span class="number">9</span>][]<span class="number">0</span>-<span class="number">9</span><span class="string">&quot;*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br></pre></td></tr></table></figure><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"><span class="number">2</span> 英文和数字：^[A-Za-z0-<span class="number">9</span>]+$ 或 ^[A-Za-z0-<span class="number">9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br><span class="line"><span class="number">3</span> 长度为<span class="number">3</span>-<span class="number">20</span>的所有字符：^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">4</span> 由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"><span class="number">5</span> 由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"><span class="number">6</span> 由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"><span class="number">7</span> 由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0-<span class="number">9</span>]+$</span><br><span class="line"><span class="number">8</span> 由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">9</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line"><span class="number">10</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">11</span> 可以输入含有^%&amp;<span class="string">&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;</span>,;=?$\x22]+</span><br><span class="line"><span class="number">12</span> 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h2 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">3 InternetURL：[a-zA-z]+://[^\s]* 或 ^https://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span><br><span class="line">6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">7 身份证号：</span><br><span class="line">15或18位身份证：^\d&#123;15&#125;|\d&#123;18&#125;$</span><br><span class="line">15位身份证：^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$</span><br><span class="line">18位身份证：^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;4&#125;$</span><br><span class="line">8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span><br><span class="line">9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line">10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$ </span><br><span class="line">12 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span><br><span class="line">15 钱的输入格式：</span><br><span class="line">16 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ </span><br><span class="line">17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </span><br><span class="line">18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </span><br><span class="line">19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span><br><span class="line">20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </span><br><span class="line">21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line">26 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">27 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">29 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">30 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">31 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br><span class="line">32 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</span><br><span class="line">33 IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)</span><br></pre></td></tr></table></figure><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220217103122880.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220217103225948.png"> </div> <ol><li><p>server.xml 用于配置 tomcat 的基本设置(启动端口，关闭端口, 主机名)</p></li><li><p>web.xml 用于指定 tomcat 运行时配置(比如 servlet 等..)</p></li><li><p>webapps 目录是存放 web 应用，就是网站</p></li></ol><h2 id="catalina-启动-Tomcat"><a href="#catalina-启动-Tomcat" class="headerlink" title="catalina 启动 Tomcat"></a>catalina 启动 Tomcat</h2><h3 id="1-进入到-Tomcat-的-bin-目录下"><a href="#1-进入到-Tomcat-的-bin-目录下" class="headerlink" title="1. 进入到 Tomcat 的 bin 目录下"></a>1. 进入到 Tomcat 的 bin 目录下</h3><h3 id="2-执行命令：-catalina-run"><a href="#2-执行命令：-catalina-run" class="headerlink" title="2. 执行命令： catalina run"></a>2. 执行命令： catalina run</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220217103622254.png"> </div> <h2 id="停止-Tomcat"><a href="#停止-Tomcat" class="headerlink" title="停止 Tomcat"></a>停止 Tomcat</h2><ol><li>点击 tomcat 服务器窗口，直接点击的关闭按钮</li><li>进入 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器(推荐)</li></ol><h2 id="修改-Tomcat-服务端口"><a href="#修改-Tomcat-服务端口" class="headerlink" title="修改 Tomcat 服务端口"></a>修改 Tomcat 服务端口</h2><ol><li>Tomcat 目录下的 conf 目录，修改 server.xml 配置文件</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220217104707653.png"> </div> <ol start="2"><li><a href="http://localhost/">http://localhost</a> , 默 认 是 访 问 80 端 口 , 即 <a href="http://localhost/">http://localhost</a> 等 价<br><a href="http://localhost/">http://localhost:80</a></li></ol><h2 id="Tomcat-服务中部署-WEB-应用"><a href="#Tomcat-服务中部署-WEB-应用" class="headerlink" title="Tomcat 服务中部署 WEB 应用"></a>Tomcat 服务中部署 WEB 应用</h2><p>JavaWeb程序&#x2F;应用&#x2F;工程目录结构</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220217111239361.png"> </div> <h3 id="部署方式1：将-web-工程的目录拷贝到-Tomcat-的-webapps-目录下"><a href="#部署方式1：将-web-工程的目录拷贝到-Tomcat-的-webapps-目录下" class="headerlink" title="部署方式1：将 web 工程的目录拷贝到 Tomcat 的 webapps 目录下"></a>部署方式1：将 web 工程的目录拷贝到 Tomcat 的 webapps 目录下</h3><ol><li>news Web工程(目前都是静态资源 html, 图片)</li><li>将该news目录&#x2F;文件夹 拷贝到 Tomcat 的webapps目录下</li><li>浏览器输入： <a href="http://ip[域名]:port/news/子目录../文件名">http://ip[域名]:port/news/子目录../文件名</a></li></ol><h3 id="部署方式2：通过配置文件来部署-只做介绍"><a href="#部署方式2：通过配置文件来部署-只做介绍" class="headerlink" title="部署方式2：通过配置文件来部署(只做介绍)"></a>部署方式2：通过配置文件来部署(只做介绍)</h3><ol><li>在Tomcat 下的 conf 目录\Catalina\localhost\ 下,配置文件，比如hsp.xml(提醒：知道Tomcat通过配置，可以把一个web应用映射到指定的目录，可以解决磁盘空间分配的问题.)</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220217111811795.png"> </div> <ol start="2"><li>访问web工程: <a href="http://ip[域名]:port/hsp/index.html">http://ip[域名]:port/hsp/index.html</a> 就表示访问 D:\album 目录下的<br>index.html</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220217111829250.png"> </div> <p>ROOT 的工程的访问</p><ol><li>在浏览器地址栏中输入访问地址如下： <a href="http://ip[域名]:port，">http://ip[域名]:port，</a> 没有Web工程&#x2F;应用名时，默认访问的是 ROOT 工程</li><li>在浏览器地址栏中输入的访问地址如下： <a href="http://ip[域名]:port/工程名/">http://ip[域名]:port/工程名/</a> ，没有资源名，默认访问 index.jsp 页面</li></ol><h2 id="浏览器访问-web-服务器文件-UML-时序图"><a href="#浏览器访问-web-服务器文件-UML-时序图" class="headerlink" title="浏览器访问 web 服务器文件 UML 时序图!!!"></a>浏览器访问 web 服务器文件 UML 时序图!!!</h2><p>&#x3D;&#x3D;非常重要！！！&#x3D;&#x3D;</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220217112237523.png"> </div> <hr># 三大组件-Servlet<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Servlet和Tomcat的关系：&#x3D;&#x3D;Tomcat支持Servlet&#x3D;&#x3D;</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220219101925731.png"> </div> <p>Servlet 在开发动态 WEB 工程中，得到广泛的应用，掌握好 Servlet 非常重要了, Servlet(基石)是 SpringMVC 的基础</p><p>Servlet(java 服务器小程序)，它的特点:</p><ol><li>他是由服务器端调用和执行的(一句话：是Tomcat解析和执行)</li><li>他是用java语言编写的, 本质就是Java类</li><li>他是按照Servlet规范开发的(除了tomcat-&gt;Servlet weblogic-&gt;Servlet)</li><li>功能强大，可以完成几乎所有的网站功能</li></ol><h2 id="手动开发Servlet"><a href="#手动开发Servlet" class="headerlink" title="手动开发Servlet"></a>手动开发Servlet</h2><ol><li>编写类HelloServlet去实现 Servlet 接口</li><li>实现 service 方法，处理请求，并响应数据</li><li>在 web.xml 中去配置 servlet 程序的访问地址</li></ol><p>注意：要手动添加servlet-api.jar(在tomcat&#x2F;lib下) 到工程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/2/19 10:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.初始化 servlet</span></span><br><span class="line"><span class="comment">     * 2.当创建HelloServlet 实例时，会调用init方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init() 被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回ServletConfig 也就是返回Servlet的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.service方法处理浏览器的请求（包括get/post）</span></span><br><span class="line"><span class="comment">     * 2.当浏览器每次请求Servlet时，就会调用一次service方法</span></span><br><span class="line"><span class="comment">     * 3.当tomcat调用该方法时，会把http请求的数据封装成实现了ServletRequest接口的request对象</span></span><br><span class="line"><span class="comment">     * 4.通过servletRequest 对象，可以得到用户提交的数据</span></span><br><span class="line"><span class="comment">     * 5. servletResponse 对象可以用于返回数据给Tomcat-&gt;浏览器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回servlet信息，使用较少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.该方法是在servlet销毁时，被调用</span></span><br><span class="line"><span class="comment">     * 2.只会调用一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;destroy 调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注释小技巧--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意</span></span><br><span class="line"><span class="comment">        1.servlet-name：给Servlet取名，该名字唯一</span></span><br><span class="line"><span class="comment">        2.servlet-class：Servlet的类的全路径：Tomcat在反射生成该Servlet需要使用</span></span><br><span class="line"><span class="comment">        3.url-pattern：这个就是该servlet访问的url的配置（路径）</span></span><br><span class="line"><span class="comment">        4.这时应该这样访问：http://localhost:8080/servlet/helloServlet</span></span><br><span class="line"><span class="comment">        5.url-pattern 取名是程序员决定的，/不要丢</span></span><br><span class="line"><span class="comment">6.load-on-startup 表示在tomcat 启动时，会自动的加载servlet实例</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="浏览器调用Servlet流程"><a href="#浏览器调用Servlet流程" class="headerlink" title="浏览器调用Servlet流程"></a>浏览器调用Servlet流程</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220219114712452.png"> </div> <h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220219121322087.png"> </div> <ol><li>init()初始化阶段</li><li>service()处理浏览器请求阶段</li><li>destroy()终止阶段</li></ol><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>Servlet 容器(比如: Tomcat)加载 Servlet，加载完成后，Servlet 容器会创建一个 Servlet 实例并调用 init()方法，init()方法只会调用一次, Servlet 容器在下面的情况装载 Servlet：</p><ol><li>Servlet 容器(Tomcat)启动时自动装载某些 servlet，实现这个需要在 web.xml 文件中添加<br><load-on-startup>1</load-on-startup> 1 表示装载的顺序</li><li>在 Servlet 容器启动后，浏览器首次向 Servlet 发送请求(这个前面说过)</li><li>Servlet 重新装载时(比如 tomcat 进行 redeploy【redeploy 会销毁所有的 Servlet 实例】)，<br>浏览器再向 Servlet 发送请求的第 1 次</li></ol><h3 id="处理浏览器请求阶段-service-方法"><a href="#处理浏览器请求阶段-service-方法" class="headerlink" title="处理浏览器请求阶段(service 方法)"></a>处理浏览器请求阶段(service 方法)</h3><ol><li>每收到一个 http 请求，服务器就会产生一个新的线程去处理[线程]</li><li>创建一个用于封装 HTTP 请求消息的 ServletRequest 对象和一个代表 HTTP 响应消息的<br>ServletResponse 对象</li><li>然后调用 Servlet 的 service()方法并将请求和响应对象作为参数传递进去</li></ol><h3 id="终止阶段-destory-方法-体现-Servlet-完整的生命周期"><a href="#终止阶段-destory-方法-体现-Servlet-完整的生命周期" class="headerlink" title="终止阶段 destory 方法(体现 Servlet 完整的生命周期)"></a>终止阶段 destory 方法(体现 Servlet 完整的生命周期)</h3><p>当 web 应用被终止，或者 Servlet 容器终止运行，或者 Servlet 类重新装载时，会调用destroy()<br>方法</p><h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220219173331414.png"> </div> <h2 id="Servlet注意事项和细节"><a href="#Servlet注意事项和细节" class="headerlink" title="Servlet注意事项和细节"></a>Servlet注意事项和细节</h2><ol><li>Servlet 是一个供其他 Java 程序（Servlet 引擎）调用的 Java 类，不能独立运行。</li><li>针对浏览器的多次 Servlet 请求，通常情况下，服务器只会创建一个 Servlet 实例对象，<br>也就是说 Servlet 实例对象一旦创建，它就会驻留在内存中，为后续的其它请求服务，直至<br>web 容器退出&#x2F;或者 redeploy 该 web 应用，servlet 实例对象才会销毁。</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220219213907606.png"> </div> <ol start="3"><li><p>在 Servlet 的整个生命周期内，init 方法只被调用一次。而对每次请求都导致 Servlet 引<br>擎调用一次 servlet 的 service 方法。</p></li><li><p>对于每次访问请求，Servlet 引擎都会创建一个新的 HttpServletRequest 请求对象和一个<br>新的 HttpServletResponse 响应对象，然后将这两个对象作为参数传递给它调用的 Servlet<br>的 service()方法，service 方法再根据请求方式分别调用 doXXX 方法。</p></li><li><p>如果在<servlet>元素中配置了一个<load-on-startup>元素，那么 WEB 应用程序在启动时，<br>就会装载并创建 Servlet 的实例对象、以及调用 Servlet 实例对象的 init()方法。</p></li></ol><h2 id="Servlet注解方式"><a href="#Servlet注解方式" class="headerlink" title="Servlet注解方式"></a>Servlet注解方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/2/21 8:25</span></span><br><span class="line"><span class="comment"> * 注解方式来配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@WebServlet</span> 是一个注解</span></span><br><span class="line"><span class="comment"> * 2. <span class="doctag">@WebServlet</span> 源码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Retention</span>(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Documented</span> =&gt; 在javadoc工具生成文档有记录</span></span><br><span class="line"><span class="comment"> * public <span class="doctag">@interface</span> WebServlet &#123;</span></span><br><span class="line"><span class="comment"> *     String name() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String[] value() default &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String[] urlPatterns() default &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     int loadOnStartup() default -1;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     WebInitParam[] initParams() default &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     boolean asyncSupported() default false;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String smallIcon() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String largeIcon() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String description() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String displayName() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 3. urlPatterns 对应web.xml 的 &lt;url-pattern&gt;&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment"> * 4. &#123;&quot;/ok1&quot;, &quot;/ok2&quot;&#125; 可以给OkServlet配置多个 url-pattern</span></span><br><span class="line"><span class="comment"> * 5. 相当于 <span class="doctag">@WebServlet</span>(urlPatterns = &#123;&quot;/ok1&quot;, &quot;/ok2&quot;&#125;) 代替了web.xml的配置</span></span><br><span class="line"><span class="comment"> *    底层使用了 反射+注解+IO+集合 来完成一个支撑</span></span><br><span class="line"><span class="comment"> * 6. 浏览器可以这样访问OkServlet时，http://localhost:8080/servlet/ok1</span></span><br><span class="line"><span class="comment"> *    或 http://localhost:8080/servlet/ok2</span></span><br><span class="line"><span class="comment"> * 7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/ok1&quot;, &quot;/ok2&quot;&#125;, loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解 init()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解 doPost()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解 doGet()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Servlet-urlPattern-配置"><a href="#Servlet-urlPattern-配置" class="headerlink" title="Servlet urlPattern 配置"></a>Servlet urlPattern 配置</h2><h3 id="1-精确匹配"><a href="#1-精确匹配" class="headerlink" title="1.精确匹配"></a>1.精确匹配</h3><p>配置路径 : @WebServlet(“&#x2F;ok&#x2F;zs”)</p><p>访问 servlet: localhost:8080&#x2F;servlet&#x2F;ok&#x2F;zs</p><h3 id="2-目录匹配"><a href="#2-目录匹配" class="headerlink" title="2.目录匹配"></a>2.目录匹配</h3><p>配置路径 : @WebServlet(“&#x2F;ok&#x2F;*”)</p><p>访问文件: localhost:8080&#x2F;servlet&#x2F;ok&#x2F;aaa localhost:8080&#x2F;servlet&#x2F;ok&#x2F;bbb</p><h3 id="3-扩展名匹配"><a href="#3-扩展名匹配" class="headerlink" title="3.扩展名匹配"></a>3.扩展名匹配</h3><p>配置路径 : @WebServlet(“**.action”)*</p><p>访问文件: localhost:8080&#x2F;hsp&#x2F;zs.action localhost:8080&#x2F;hsp&#x2F;ls.action</p><p>提示: @WebServlet(“&#x2F;*.action”) , 不能带 &#x2F; , 否则 tomcat 报错</p><h3 id="4-任意匹配"><a href="#4-任意匹配" class="headerlink" title="4.任意匹配"></a>4.任意匹配</h3><p>配置路径 : @WebServlet(“&#x2F;“) @WebServlet(“&#x2F;*”)</p><p>访问文件: localhost:8080&#x2F;hsp&#x2F;aaa localhost:8080&#x2F;hsp&#x2F;bbb localhost:8080&#x2F;hsp&#x2F;ccc</p><p>提示：&#x2F; 和 &#x2F;*的配置，会匹配所有的请求，这个比较麻烦，要避免</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、当 Servlet 配置了 “&#x2F;“, 会覆盖 tomcat 的 DefaultServlet, 当其他的 utl-pattern 都匹配不上时，都会走这个Servlet，这样可以拦截到其他静态资源。</p><p>2、当 Servelt 配置了 “&#x2F;*”, 表示可以匹配任意访问路径</p><p>3、提示: 建议不要使用 &#x2F; 和 &#x2F;*， 建议尽量使用精确匹配</p><p>4、优先级遵守: 精确路径 &gt; 目录路径 &gt; 扩展名路径 &gt; &#x2F;* &gt; &#x2F;</p><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.ServletConfig 类是为 Servlet 程序的配置信息的类</p><p>2.Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建</p><p>3.Servlet 程序默认是第 1 次访问的时候创建，ServletConfig 在 Servlet 程序创建时，就创建一个对应的 ServletConfig对象</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1.获取 Servlet 程序的 servlet-name 的值</p><p>2.获取初始化参数 init-param</p><p>3.获取 ServletContext 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.DBServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置信息，而不是硬编码到程序--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pwd<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/db<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 当DBServlet对象初始化时，tomcat会同时创建一个 ServletConfig对象</span></span><br><span class="line"><span class="comment">     * 2. 这是如果DBServlet init() 方法中你调用 super.init(config);</span></span><br><span class="line"><span class="comment">     * 3. 调用父类</span></span><br><span class="line"><span class="comment">     * public void init(ServletConfig config) throws ServletException &#123;</span></span><br><span class="line"><span class="comment">     *         this.config = config;</span></span><br><span class="line"><span class="comment">     *         this.init();</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     *     这时就会把 Tomcat创建的ServletConfig对象赋给GenericServlet的属性 config</span></span><br><span class="line"><span class="comment">     * 4. 因此如果你重写init()方法，如果你想在其他方法通过 getServletConfig() 获取ServletConfig</span></span><br><span class="line"><span class="comment">     * 有一定记住，要调用 super.init(config);</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span> + config);</span><br><span class="line">        <span class="built_in">super</span>.init(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//在 DBServlet 执行 doGet()/doPost() 时，可以获取到 web.xml 配置的用户名和密码</span></span><br><span class="line">        <span class="comment">//DBServlet的父类GenericServlet有getServletConfig()</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. getServletConfig() 方法是 GenericServlet</span></span><br><span class="line"><span class="comment">         * 2. 返回的 servletConfig 对象是 private transient ServletConfig config</span></span><br><span class="line"><span class="comment">         * 3. 当一个属性被 transient 修饰，表示该属性不会被串行化(有些重要信息，不希望保存到文件)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line">        System.out.println(servletConfig);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数username = &quot;</span>  + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数pwd = &quot;</span>  + pwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>1.ServletContext 是一个接口，它表示 Servlet 上下文对象</p><p>2.一个 web 工程，只有一个 ServletContext 对象实例</p><p>3.ServletContext 对象 是在 web 工程启动的时候创建，在 web 工程停止的时候销毁</p><p>4.ServletContext 对象可以通过 ServletConfig.getServletContext 方法获得对 ServletContext对象的引用，也可以通过 this.getServletContext()来获得其对象的引用。</p><p>5.由于一个 WEB 应用中的所有 Servlet 共享同一个 ServletContext 对象，因此 Servlet 对象之间可以通过 ServletContext对象来实现多个 Servlet 间通讯。ServletContext 对象通常也被称之为域对象。</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220224092941224.png"> </div> <h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>1.获取 web.xml 中配置的上下文参数 context-param [信息和整个 web 应用相关，而不是属于某个 Servlet]</p><p>2.获取当前的工程路径，格式: &#x2F;工程路径 &#x3D;》 比如 &#x2F;servlet</p><p>3.获 取 工 程 部 署 后 在 服 务 器 硬 盘 上 的 绝 对 路 径 ( 比如：D:\lzw_javaweb\servlet\out\artifacts\servlet_war_exploded）</p><p>4.像 Map 一样存取数据, 多个 Servlet 共享数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContext_<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.servletcontext.ServletContext_<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContext_<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletContext_<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置整个网站的信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>website<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://www.lzw.net<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>company<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>巴拉巴拉<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.servletcontext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContext_</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取web.xml的context-parameter</span></span><br><span class="line">        <span class="comment">//1.获取到ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">//2.获取website</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">website</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;website&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;company&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取项目的工程路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext.getContextPath();</span><br><span class="line">        <span class="comment">//4.获取项目发布后 真正的工作路径</span></span><br><span class="line">        <span class="comment">// &quot;/&quot; 表示我们的项目(发布后)的根路径 E:\VIP\JavaWeb\Demo\servlet\out\artifacts\servlet_war_exploded</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;项目发布后的绝对路径 = &quot;</span> + realPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;项目路径 = &quot;</span> + contextPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;website = &quot;</span> + website);</span><br><span class="line">        System.out.println(<span class="string">&quot;company = &quot;</span> + company);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="HttpServletRequest-Servlet"><a href="#HttpServletRequest-Servlet" class="headerlink" title="HttpServletRequest(Servlet)"></a>HttpServletRequest(Servlet)</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><ol><li>HttpServletRequest 对象代表客户端的请求</li><li>当客户端&#x2F;浏览器通过 HTTP 协议访问服务器时，HTTP 请求头中的所有信息都封装在这个对象中</li><li>通过这个对象的方法，可以获得客户端信息。</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>1.getRequestURI() 获取请求的资源路径 <a href="http://localhost:8080/servlet/loginServlet">http://localhost:8080/servlet/loginServlet</a></p><p>2.getRequestURL() 获取请求的统一资源定位符（绝对路径）<a href="http://localhost:8080/servlet/loginServlet">http://localhost:8080/servlet/loginServlet</a></p><p>3.getRemoteHost() 获取客户端的 主机, getRemoteAddr()</p><p>4.getHeader() 获取请求头</p><p>5.getParameter() 获取请求的参数</p><p>6.getParameterValues() 获取请求的参数（多个值的时候使用） , 比如 checkbox, 返回的是数组</p><p>7.getMethod() 获取请求的方式 GET 或 POST</p><p>8.setAttribute(key, value); 设置域数据</p><p>9.getAttribute(key); 获取域数据</p><p>10.getRequestDispatcher() 获取请求转发对象, 请求转发的核心对象</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet/requestMethods&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    u:　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    p:　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    选择你喜欢的老师:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lls&quot;</span>&gt;</span>罗老师</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lx&quot;</span>&gt;</span>罗翔</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>苍老师<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册用户&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletRequestMethods</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//使用request对象，获取表单提交的各种数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HttpServletRequestMethods doPost() 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">/***********************************</span></span><br><span class="line"><span class="comment">         *  获取和http请求头相关信息</span></span><br><span class="line"><span class="comment">         ***********************************/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的资源路径URI= &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="comment">//http://主机/uri</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的统一资源定位符（绝对路径）URL= &quot;</span> + request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求的客户端ip 地址= &quot;</span> + request.getRemoteAddr());<span class="comment">//本地就是127.0.0.1</span></span><br><span class="line">        <span class="comment">//思考题：如发现某个ip 在10s中，访问的次数超过 100次，就封ip</span></span><br><span class="line">        <span class="comment">//实现思路： 1用一个集合concurrentHashmap[ip:访问次数] 2[线程/定时扫描] 3 做成处理</span></span><br><span class="line">        <span class="comment">// 获取http请求头的信息，可以指定其他，比如 User-Agent , Host等待</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http请求头HOST= &quot;</span> + request.getHeader(<span class="string">&quot;Host&quot;</span>));</span><br><span class="line">        <span class="comment">// 说明，如果我们希望得到请求的头的相关信息，可以使用request.getHeader(&quot;请求头字段&quot;)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的发起地址是=&quot;</span> + request.getHeader(<span class="string">&quot;Referer&quot;</span>));</span><br><span class="line">        <span class="comment">// 请获取访问网站的浏览器是什么？</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;User-Agent= &quot;</span> + userAgent);</span><br><span class="line">        <span class="comment">// 取出 Chrome, 取出最后</span></span><br><span class="line">        String[] s = userAgent.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;浏览器 = &quot;</span> + s[s.length-<span class="number">1</span>].split(<span class="string">&quot;\\/&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        <span class="comment">//JSESSIONID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cookie</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Cookie&quot;</span>);</span><br><span class="line">        String cs[] = cookie.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = cs[<span class="number">1</span>].toCharArray();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;取出JSESSIONID: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i] == (<span class="number">59</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(chars[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主要是Get / Post</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http请求方式~= &quot;</span> + request.getMethod());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***********************************</span></span><br><span class="line"><span class="comment">         *  获取和请求参数相关信息, 注意要求在返回数据前，获取参数</span></span><br><span class="line"><span class="comment">         ***********************************/</span></span><br><span class="line">        <span class="comment">//解决接收参数的中文乱码问题, 老师提示，写在 getParameter前.</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取表单的数据[单个数据]</span></span><br><span class="line">        <span class="comment">//username=tom&amp;pwd=&amp;hobby=hsp&amp;hobby=spls</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取表单一组数据</span></span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;pwd = &quot;</span> + pwd);</span><br><span class="line">        <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hobby = &quot;</span> + hobby);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回接收到的信息，给浏览器回显</span></span><br><span class="line">        <span class="comment">//本质就是在http响应头，加上 Content-Type: text/html;charset=utf-8</span></span><br><span class="line">        <span class="comment">//说 text/html 表示返回的数据类型，浏览器会根据这个类型来解析数据</span></span><br><span class="line">        <span class="comment">// text/plain 表示返回的数据，请浏览器使用文本方式解析</span></span><br><span class="line">        <span class="comment">// application/x-tar 表示返回的是文件，浏览器就会以下载文件的方式处理</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;提交的用户名 = &quot;</span> +  username);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><p>1.获取 doPost 参数中文乱码解决方案 , 注意 setCharacterEncoding(“utf-8”) 要写在request.getParameter()前</p><p>2.注意：如果通过 PrintWriter writer, 有返回数据给浏览器，建议将获取参数代码写在writer.print() 之前，否则可能获取不到参数值(doPost)</p><p>3.处理 http 响应数据中文乱码问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本质就是在http响应头，加上 Content-Type: text/html;charset=utf-8</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><h3 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h3><p>实际开发中，往往业务比较复杂，需要在一次请求中，使用到多个 Servlet 完成一个任务(Servlet 链, 流水作业) 如图</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220301091705216.png"> </div> <h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>实现请求转发：请求转发指一个 web 资源收到客户端请求后，通知服务器去调用另外一个 web 资源进行处理</li><li>HttpServletRequest 对象(也叫 Request 对象)提供了一个 getRequestDispatcher 方法，该方法返回一个 RequestDispatcher 对象，调用这个对象的 forward 方法可以实现请求转发</li><li>request 对象同时也是一个域对象，开发人员通过 request 对象在实现转发时，把数据通过 request 对象带给其它 web 资源处理</li></ol><h3 id="实现请求转发"><a href="#实现请求转发" class="headerlink" title="实现请求转发"></a>实现请求转发</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220301091852148.png"> </div> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet/checkServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    u: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CheckServlet 被调用&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户名来确定该用户是什么身份</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">//注意如果是同一个request对象，那么可以在不同的servlet中，是 getParameter</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tom&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//分配</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;普通用户&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分发器</span></span><br><span class="line">        <span class="comment">// 1. /managerServlet 写的是要转发的servlet的url</span></span><br><span class="line">        <span class="comment">// 2. / 会被解析成 /servlet</span></span><br><span class="line">      <span class="comment">// 3. forward(request, response) 表示把当前servlet的request对象和response对象，传递给下一个servlet使用</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/managerServlet&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerServlet 被调用&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> (String)request.getAttribute(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">//输出信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;用户名：&quot;</span> + username + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        writer.print(<span class="string">&quot;角色：&quot;</span> + role);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>浏览器地址不会变化(地址会保留在第 1 个 servlet 的 url)</p></li><li><p>在同一次 HTTP 请求中，进行多次转发，仍然是一次 HTTP 请求</p></li><li><p>在同一次 HTTP 请求中，进行多次转发，多个 Servlet 可以共享 request 域&#x2F;对象的数据(因为始终是同一个 request 对象)</p></li><li><p>可以转发到 WEB-INF 目录下</p></li><li><p>不能访问当前 WEB 工程外的资源</p></li><li><p>因为浏览器地址栏会停止在第一个 servlet ,如果你刷新页面，会再次发出请求(并且会带数据), 所以在支付页面情况下，不要使用请求转发，否则会造成重复支付</p></li></ol><hr><h1 id="HttpServletResponse-Servlet"><a href="#HttpServletResponse-Servlet" class="headerlink" title="HttpServletResponse(Servlet)"></a>HttpServletResponse(Servlet)</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><ol><li>每次 HTTP 请求，Tomcat 会创建一个 HttpServletResponse 对象传递给 Servlet 程序去使用。</li><li>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，如果需要设置返回给客户端的信息，通过 HttpServletResponse 对象来进行设置即可。</li></ol><h2 id="向客户端返回数据方法"><a href="#向客户端返回数据方法" class="headerlink" title="向客户端返回数据方法"></a>向客户端返回数据方法</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220301195412155.png"> </div> <ol><li>字节流 getOutputStream(); 常用于下载（处理二进制数据）</li><li>字符流 getWriter(); 常用于回传字符串</li><li>(细节：)两个流同时只能使用一个。 使用了字节流，就不能再使用字符流，反之亦然，否则就会报错</li></ol><h2 id="向客户端返回数据实例"><a href="#向客户端返回数据实例" class="headerlink" title="向客户端返回数据实例"></a>向客户端返回数据实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseServlet_</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException &#123;</span><br><span class="line">        <span class="comment">/*  :</span></span><br><span class="line"><span class="comment">        1. setContentType 会设置服务器和客户端都用 utf-8 字符集，还设置了响应头</span></span><br><span class="line"><span class="comment">        2. setContentType 要在获取流对象(getWriter)之前调用才有效</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;hello, world~&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;hi, LiAng&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><p>1.处理中文乱码问题-方案1</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220301203616954.png"> </div> <p>2.处理中文乱码问题-方案2</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220301203628158.png"> </div> <h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ol><li>请求重定向指：一个 web 资源收到客户端请求后，通知客户端去访问另外一个 web资源，这称之为请求重定向<div align="center"> <img src="\images\JavaWeb.assets\image-20220301203730411.png"> </div></li></ol><h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//完成了自己的业务</span></span><br><span class="line">        <span class="comment">//发出请求重定向 -&gt;</span></span><br><span class="line">        <span class="comment">//1. sendRedirect 本质就会 返回 302状态码 Location; /servlet/downServletNew</span></span><br><span class="line">        <span class="comment">//2. 因此 302 和 /servlet/downServletNew 是浏览器解析，而不是服务器</span></span><br><span class="line">        <span class="comment">//3. 浏览器在解析 /servlet/downServletNew =&gt; http://localhost:8080/servlet/downServletNew</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> getServletContext().getContextPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPath = &quot;</span> + contextPath);</span><br><span class="line"><span class="comment">//        response.sendRedirect(&quot;/servlet/downServletNew&quot;);</span></span><br><span class="line">        response.sendRedirect(contextPath + <span class="string">&quot;/downServletNew&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种重定向的写法</span></span><br><span class="line"><span class="comment">//        response.setStatus(302); //设置http响应的状态码</span></span><br><span class="line"><span class="comment">//        //设置http响应的Location ：/servlet/downServletNew</span></span><br><span class="line"><span class="comment">//        response.setHeader(&quot;Location&quot;, &quot;/servlet/downServletNew&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownServletNew</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DownServletNew 被调用&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/x-tar;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>最佳应用场景：网站迁移，比如原域名是 <a href="http://www.hsp.com/">www.hsp.com</a> 迁移到 <a href="http://www.hsp.cn/">www.hsp.cn</a> ，但是百度抓取的还是原来网址. </li><li>浏览器地址会发生变化，本质是两次 http 请求. </li><li>不能共享 Request 域中的数据，本质是两次 http 请求，会生成两个 HttpServletRequest对象</li><li>不能重定向到 &#x2F;WEB-INF 下的资源</li><li>可以重定向到 Web 工程以外的资源， 比如 到 <a href="http://www.baidu.com/">www.baidu.com</a> 【在前面的案例演示】</li><li>重定向有两种方式, 推荐使用前者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/servlet/downServletNew&quot;</span>);</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">response.setStatus(<span class="number">302</span>); <span class="comment">//设置http响应的状态码</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;/servlet/downServletNew&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="7"><li>动态获取到 application context</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> getServletContext().getContextPath();</span><br><span class="line">      System.out.println(<span class="string">&quot;contextPath = &quot;</span> + contextPath);</span><br><span class="line">      response.sendRedirect(contextPath + <span class="string">&quot;/downServletNew&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>超文本传输协议(HTTP，HyperText Transfer Protocol)是互联网上应用广泛的一种网络协议。是工作在 tcp&#x2F;ip 协议基础上的,所有的 WWW 文件都遵守这个标准。</p></li><li><p>http1.0 短连接 http1.1 长连接</p></li><li><p>http 是 TCP&#x2F;IP 协议的一个应用层协议,http 也是我们 web 开发的基础</p></li></ol><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>1.form标签method&#x3D;get；2.a标签；3.link标签引入css；4.script标签引入js文件；5.img标签引入图片；</p><p>6.iframe引入html页面；7.在浏览器地址栏中输入地址后敲回车</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220223211412046.png"> </div> <p>&#x3D;&#x3D;Get与Post传输数据大小的区别&#x3D;&#x3D;</p><p>1.get传送的数据量较小。不能大于2kb（不同浏览器不一样）</p><p>2.post传送的数据量较大。一般默认不受限制。</p><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>1.form标签method&#x3D;post；</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220223211519127.png"> </div> <p>建议：(1)GET方式的安全性较POST方式要差。包括机密信息的话。建议用POST数据提交方式；</p><p>(2)数据查询时，建议用GET。数据加入、改动或删除时，建议用POST方式。</p><h2 id="HTTP响应包"><a href="#HTTP响应包" class="headerlink" title="HTTP响应包"></a>HTTP响应包</h2><p>由响应行、响应头、响应体三部分组成。</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220223212341065.png"> </div> <hr><h1 id="WEB工程路径"><a href="#WEB工程路径" class="headerlink" title="WEB工程路径"></a>WEB工程路径</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="创建-index-html"><a href="#创建-index-html" class="headerlink" title="创建 index.html"></a>创建 index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>base 标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册用户~~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 可以看到，我们原来的访问一个web资源的路径非常的麻烦</span></span><br><span class="line"><span class="comment">    2. 目前我们访问的是 ok的资源</span></span><br><span class="line"><span class="comment">    3. 我们可以使用相对路径来解决</span></span><br><span class="line"><span class="comment">    4. http://localhost:8080/webpath/ok =&gt; ok</span></span><br><span class="line"><span class="comment">    5. 如果你action=&quot;ok&quot; 等价 http://localhost:8080/webpath/ok</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/webpath/ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    u:　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册用户&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>讨论区~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/webpath/ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    讨论内容:　<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发布讨论&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>回复区~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/webpath/ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    回复内容:　<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回复&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>​使用相对路径来解决， 一个非常重要的规则：页面所有的相对路径，在默认情 况下，都会参考当前浏览器地址栏的路径 <code>http://ip:port/工程名/</code> + 资源来进行跳转。所以我们可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\JavaWeb.assets\image-20220625090140553.png"> </div> <h3 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li><p>base 标签是 HTML 语言中的基准网址标记，它是一个单标签，位于网页头部文件的 head 标签内。</p></li><li><p>一个页面最多只能使用一个 base 元素，用来提供一个指定的默认目标，是一种表达路径和连接网址的标记。</p></li><li><p>常见的 url 路径形式分别有相对路径与绝对路径，如果 base 标签指定了目标，浏览器 将通过这个目标来解析当前文档中的所有相对路径，包括的标签有（a、img、link、form）。</p></li><li><p>也就是说，浏览器解析时会在路径前加上 base 给的目标，而页面中的相对路径也都转 换成了绝对路径。使用了 base 标签就应带上 href 属性和 target 属性。</p></li></ol><h4 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例"></a>应用实例</h4><h5 id="创建-web-a-html"><a href="#创建-web-a-html" class="headerlink" title="创建 web\a.html"></a>创建 web\a.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>a.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是a.html~~~~~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相对路径</span></span><br><span class="line"><span class="comment">    1. href=&quot;d1/d2/b.html&quot; 等价于 http://localhost:8080/项目名/d1/d2/b.html</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;d1/d2/b.html&quot;</span>&gt;</span>跳转到/d1/d2/b.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 在实际开发中，往往不是直接访问一个资源的而是在服务端进行转发或者重定向来访问资源</span></span><br><span class="line"><span class="comment">2. 演示转发定位 b.html</span></span><br><span class="line"><span class="comment">3. href=&quot;servlet03&quot; http://localhost:8080/webpath/servlet03</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet03&quot;</span>&gt;</span>转发到/d1/d2/b.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建-web-d1-d2-b-html"><a href="#创建-web-d1-d2-b-html" class="headerlink" title="创建 web\d1\d2\b.html"></a>创建 web\d1\d2\b.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>b.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1. 如果没有&lt;base href=&quot;http://localhost:8080/hspedu_servlet/&quot;&gt;</span></span><br><span class="line"><span class="comment">        2. 当点击 返回a.html 超链接，将会以当前浏览器的地址为路径来确定 路径</span></span><br><span class="line"><span class="comment">        3. 如果增加了&lt;base href=&quot;http://localhost:8080/hspedu_servlet/&quot;&gt;</span></span><br><span class="line"><span class="comment">        4. 将以 base 指定的href的地址为路径，来确定 超链接的路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;base href=&quot;http://localhost:10000/hspedu_servlet/&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简写形式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用base 标签搞定</span></span><br><span class="line"><span class="comment">    1. 下面写的 base href=&quot;http://localhost:8080/webpath/&quot;</span></span><br><span class="line"><span class="comment">    2. 表示的含义就是当前这个页面的访问所有资源都是以 http://localhost:8080/webpath/ 参照</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;base href=&quot;http://localhost:8080/webpath/&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面的写法可以简化一把--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1. base 标签是哪个在解析? =&gt; 浏览器</span></span><br><span class="line"><span class="comment">        2. 浏览器在解析 第一个 /时候，会解析成 http://localhost:8080/</span></span><br><span class="line"><span class="comment">        3. 浏览器 href=&quot;/webpath/&quot; =解析=&gt; href=&quot;http://localhost:8080/webpath/&quot;</span></span><br><span class="line"><span class="comment">        4. 浏览器 &lt;a href=&quot;a.html&quot;&gt;返回a.html~&lt;/a&gt; , 参考 base =&gt; 最后</span></span><br><span class="line"><span class="comment">          href=&quot;http://localhost:8080/webpath/a.html&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/webpath/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是/d1/d2/b.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 返回a.html =&gt; 使用前面的相对路径http://localhost:8080/webpath/d1/d2/</span></span><br><span class="line"><span class="comment">    2. ../../a.html =&gt; http://localhost:8080/webpath/a.html</span></span><br><span class="line"><span class="comment">    3. 相对路径会让这个项目相互调用的关系变得复杂</span></span><br><span class="line"><span class="comment">    4. 使用base 标签搞定</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;a href=&quot;../../a.html&quot;&gt;返回a.html~&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;a.html&quot;</span>&gt;</span>返回a.html~<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建-Serlvet03-java"><a href="#创建-Serlvet03-java" class="headerlink" title="创建 Serlvet03.java"></a>创建 Serlvet03.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet03</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//这里我们希望通过转发来定位b.html</span></span><br><span class="line">        <span class="comment">//1.在服务器端 解析第一个 / 时，会被解析成 http://ip:port/项目名</span></span><br><span class="line">        <span class="comment">//2. &quot;/d1/d2/b.html&quot; =&gt;  被解析成 http://ip:port/项目名/d1/d2/b.html</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/d1/d2/b.html&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="comment">//3. 在服务器进行转发时，没有/就按照默认的方式参考定位 http://ip:port/项目名</span></span><br><span class="line">        <span class="comment">//建议使用上面的</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher(&quot;d1/d2/b.html&quot;).forward(request, response);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项和细节-2"><a href="#注意事项和细节-2" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><ol><li>Web 工程的相对路径和绝对路径</li></ol><p>​（1）相对路径：<code>.</code>表示当前目录，<code>..</code>表示上一级目录，资源名 表示 当前目录&#x2F;资源名</p><p>​（2）绝对路径：<a href="http://ip:port/工程路径/资源路径">http://ip:port/工程路径/资源路径</a></p><ol start="2"><li><p>在实际开发中，路径都使用<strong>绝对路径</strong>，而不是相对路径。</p></li><li><p>在 web 中 &#x2F; 斜杠 如果被浏览器解析，得到的地址是：<code>http://ip[域名]:port/ </code> </p><p>比如: <code>&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;</code></p></li><li><p>在 web 中 &#x2F; 斜杠 如果被服务器解析，得到的地址是：<code>http://ip[域名]:port/工程路径/</code>， 你也可以理解成 &#x2F;工程路径&#x2F; 下面的几种情况就是如此</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) &lt;url-pattern&gt;/servelturl&lt;/url-pattern&gt;</span><br><span class="line">(2) servletContext.getRealPath(&quot;/&quot;); ==&gt; 是得到执行路径/工作路径</span><br><span class="line">(3) request.getRequestDispatcher(&quot;/&quot;);</span><br></pre></td></tr></table></figure><ol start="5"><li>在 javaWeb 中 路径最后带 &#x2F; 和 不带 &#x2F; 含义不同，一定要小心</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/a/servlet03&quot;&gt;网址&lt;/a&gt; : servlet03 表示资源</span><br><span class="line">&lt;a href=&quot;/a/servlet03/&quot;&gt;网址&lt;/a&gt; : servlet03 表示路径</span><br></pre></td></tr></table></figure><ol start="6"><li>重定向 response.sendRediect(“&#x2F;“)；这条语句虽然是在服务器执行的，但是服务器是把斜杠 &#x2F; 发送给浏览器解析。因此得到地址 <code>http://ip[域名]:port/</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编写资源路径时 , 考虑这么几点</p><p>(1) 这个路径 前面有没有 &#x2F; 。</p><p>(2) 这个路径 在哪里被解析 [服务器还是浏览器] , 如果前面有 &#x2F; , 并且是在 浏览器被解 析的 被解析成 <a href="http://ip:port/">http://ip:port/</a> , 如果在服务器端被解析 , 被解析成 &#x2F;工程路径&#x2F; </p><p>(3) 如果这个路径，前面没有 &#x2F; , 并且在浏览器被解析，则以浏览器当前的地址栏 去掉 资源部分，作为一个相对路径。</p><p>(4) 这个路径最后有没有 &#x2F; , 如果最后有&#x2F; 表示路径， 如果没有 &#x2F; 表示资源。</p><hr><h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个 web 资源，然后关闭浏览器，整个过程称之为一个会话。</p><h3 id="会话的两种技术"><a href="#会话的两种技术" class="headerlink" title="会话的两种技术"></a>会话的两种技术</h3><p>Cookie</p><p>Session</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><ol><li>Cookie 是服务器在客户端保存用户的信息，比如登录名，浏览历史等, 就可以以 cookie方式保存。</li><li>Cookie 信息就像是小甜饼(cookie 中文)一样，数据量并不大，&#x3D;&#x3D;服务器端在需要的时候可以从客户端&#x2F;浏览器读取(http 协议)&#x3D;&#x3D;。</li></ol><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ol><li>保存上次登录时间等信息</li><li>保存用户名，密码, 在一定时间不用重新登录</li><li>网站的个性化，比如定制网站的服务，内容。</li></ol><h3 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例"></a>应用实例</h3><h4 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个Cookie对象</span></span><br><span class="line">        <span class="comment">//(1) username 该cookie的名字 是唯一的，可以理解为是key</span></span><br><span class="line">        <span class="comment">//(2) lzw 是值</span></span><br><span class="line">        <span class="comment">//(3) 可以创建多个Cookie</span></span><br><span class="line">        <span class="comment">//(4) 这时Cookie在服务器端，还没有到浏览器</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;lzw&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.将Cookie发送给浏览器，让浏览器将该Cookie保存</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;创建Cookie成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取指定Cookie"><a href="#读取指定Cookie" class="headerlink" title="读取指定Cookie"></a>读取指定Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadCookies</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 通过Request对象读取cookie信息</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">//2. 遍历cookie</span></span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="literal">null</span> &amp;&amp; cookies.length != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;cookie name= &quot;</span> +cookie.getName() + <span class="string">&quot;, value=&quot;</span> + cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;读取Cookie成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="comment">//返回指定名字的Cookie值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title function_">readCookieByName</span><span class="params">(String name, Cookie[] cookies)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断传入的参数是否正确</span></span><br><span class="line">        <span class="keyword">if</span>(name == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(name) || cookies == <span class="literal">null</span> || cookies.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历cookie</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.equals(cookie.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> cookie;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="修改Cookie"><a href="#修改Cookie" class="headerlink" title="修改Cookie"></a>修改Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//需求</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 需求 演示如何修改Cookie</span></span><br><span class="line"><span class="comment">         * 1) 给定一个cookie的name, 找到该cookie, 如果找到, 则修改该cookie的值为 hsp-hi</span></span><br><span class="line"><span class="comment">         * 2) 如果找不到指定的cookie , 则提示, 没有该cookie</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1. 根据name 去查找 cookie</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieName</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们直接创建了一个同名的cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">userNameCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.readCookieByName(cookieName, cookies);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == cookie) &#123;<span class="comment">//在该浏览器没有email cookie</span></span><br><span class="line">            System.out.println(<span class="string">&quot;当前访问 服务端的 浏览器没有 该cookie&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cookie.setValue(<span class="string">&quot;lzw-hi&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 遍历cookie</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie1 : cookies) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cookie name= &quot;</span> + cookie1.getName() + <span class="string">&quot; value= &quot;</span> + cookie1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookie != <span class="literal">null</span>)&#123;</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">        response.addCookie(userNameCookie);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;更新完成&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Cookie生命周期"><a href="#Cookie生命周期" class="headerlink" title="Cookie生命周期"></a>Cookie生命周期</h3><h4 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h4><ol><li><p>Cookie 的生命周期指的是如何管理 Cookie 什么时候被销毁（删除）</p></li><li><p>setMaxAge()</p></li></ol><p>  ● 正数，表示在指定的秒数后过期<br>  ● 负数，表示浏览器关闭，Cookie 就会被删除（默认值是-1）<br>  ● 0，表示马上删除 Cookie</p><h4 id="应用实例-4"><a href="#应用实例-4" class="headerlink" title="应用实例"></a>应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieLive</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//演示创建一个cookie , 生命周期为 60s</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 从创建该cookie开始计时, 60秒后无效</span></span><br><span class="line">        <span class="comment">// 2. 浏览器来根据创建的时间，计时到60s秒，就认为该cookie无效</span></span><br><span class="line">        <span class="comment">// 3. 如果该cookie无效，那么浏览器在发出http请求时，就不在携带该cookie</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//讲cookie保存到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示如何删除一个cookie, 比如删除username</span></span><br><span class="line">        <span class="comment">//1 先得到username cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">usernameCookie</span> <span class="operator">=</span> CookieUtils.readCookieByName(<span class="string">&quot;username&quot;</span>, cookies);</span><br><span class="line">        <span class="keyword">if</span>(usernameCookie != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2. 将其生命周期设置为0</span></span><br><span class="line">            usernameCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//3. 重新保存该cookie, 因为你将其生命周期设置0, 就等价于让浏览器删除该cookie</span></span><br><span class="line">            <span class="comment">//4. 说明：该cookie会被浏览器直接删除</span></span><br><span class="line">            <span class="comment">//   返回一个Set-Cookie</span></span><br><span class="line">            <span class="comment">//   Set-Cookie: username=tom; Expires=Thu, 01-Jan-1970 00:00:10 GMT</span></span><br><span class="line">            response.addCookie(usernameCookie);<span class="comment">//返回一个Set-Cookie: xxxxx =&gt; 一会抓包.</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到该cookie, 无法删除...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***********************</span></span><br><span class="line"><span class="comment">         * 默认的会话级别的 Cookie [即浏览器关闭就销毁了]</span></span><br><span class="line"><span class="comment">         * 前面我们讲课时，都是默认会话级别的生命周期</span></span><br><span class="line"><span class="comment">         ***********************/</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;dkey&quot;</span>, <span class="string">&quot;dkey_value&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * public void setMaxAge(int expiry) &#123;</span></span><br><span class="line"><span class="comment">         *         this.maxAge = expiry;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * private int maxAge = -1; 默认就是-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//cookie.setMaxAge(-1);//设置存活时间</span></span><br><span class="line">        response.addCookie(cookie3);</span><br><span class="line">        <span class="comment">// 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;设置cookie生命周期&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Cookie有效路径"><a href="#Cookie有效路径" class="headerlink" title="Cookie有效路径"></a>Cookie有效路径</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ol><li>Cookie 有效路径 Path 的设置</li><li>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。 path<br>属性是通过请求的地址来进行有效的过滤</li><li>规则如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cookie1.setPath = /工程路径</span><br><span class="line">cookie2.setPath = /工程路径/aaa</span><br><span class="line">请求地址: http://ip:端口/工程路径/资源</span><br><span class="line">cookie1 会发给服务器</span><br><span class="line">cookie2 不会发给服务器</span><br><span class="line">请求地址: http://ip:端口/工程路径/aaa/资源</span><br><span class="line">cookie1 会发给服务器</span><br><span class="line">cookie2 会发给服务器</span><br></pre></td></tr></table></figure><h5 id="应用实例-5"><a href="#应用实例-5" class="headerlink" title="应用实例"></a>应用实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookiePathServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建两个cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;bj&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;20000&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 设置不同有效路径</span></span><br><span class="line">        <span class="comment">//   request.getContextPath() =&gt; /cs</span></span><br><span class="line">        cookie.setPath(request.getContextPath());</span><br><span class="line">        <span class="comment">//   cookie2有效路径 /cs/aaa</span></span><br><span class="line">        cookie2.setPath(request.getContextPath() + <span class="string">&quot;/aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//如果我们没有设置cookie有效路径，默认就是 /工程路径</span></span><br><span class="line">        <span class="comment">//3. 保存到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line">        <span class="comment">//4. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;设置cookie有效路径成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-3"><a href="#注意事项和细节-3" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>一个 Cookie 只能标识一种信息，它至少含有一个标识该信息的名称（NAME）和设置值（VALUE）。</li><li>一个 WEB 站点可以给一个浏览器发送多个 Cookie，一个浏览器也可以存储多个 WEB 站点提供的 Cookie。</li><li>cookie 的总数量没有限制，但是每个域名的 COOKIE 数量和每个 COOKIE 的大小是有限制的 (不同的浏览器限制不同, 知道即可) , Cookie 不适合存放数据量大的信息。</li><li>注意，删除 cookie 时，path 必须一致，否则不会删除</li><li>Java servlet 中 cookie 中文乱码解决</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncoderCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;EncoderCookie 被调用&quot;);</span></span><br><span class="line">        <span class="comment">//1. 创建cookie, 有中文</span></span><br><span class="line">        <span class="comment">//1) 如果直接存放中文的cookie, 报错 Control character in cookie value or attribute.</span></span><br><span class="line">        <span class="comment">//2) 解决方法，就是将中文 编程成 URL编码  英文： Encode=编码</span></span><br><span class="line">        <span class="comment">//3) 编码后，再保存即可</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;LiAng&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//URLDecoder.decode(); 解码</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;company&quot;</span>, company);</span><br><span class="line">        <span class="comment">//2. 保存到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="comment">//3. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;设置中文cookie成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><ol><li>Session 是服务器端技术，服务器在运行时为每一个用户的浏览器创建一个其独享的session 对象&#x2F;集合</li><li>由于 session 为各个用户浏览器独享，所以用户在访问服务器的不同页面时，可以从各自的 session 中读取&#x2F;添加数据, 从而完成相应任务</li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>当用户打开浏览器，访问某个网站, 操作 session 时，服务器就会在内存(在服务端)为该浏览器分配一个 session 对象，该 session 对象被这个浏览器独占, 如图</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220310135905260.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220310135916708.png"> </div> <ol start="2"><li>这个 session 对象也可看做是一个容器&#x2F;集合,session 对象默认存在时间为 30min(这是在tomcat&#x2F;conf&#x2F;web.xml)，也可修改</li></ol><h3 id="如何理解Session"><a href="#如何理解Session" class="headerlink" title="如何理解Session"></a>如何理解Session</h3><p>1.存储结构示意图</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220310140256266.png"> </div> <p>2.你可以把 session 看作是一容器类似 HashMap，有两列(K-V)，每一行就是 session 的一个属性。</p><p>3.每个属性包含有两个部分，一个是该属性的名字(String)，另外一个是它的值(Object)</p><h3 id="Session底层实现机制"><a href="#Session底层实现机制" class="headerlink" title="Session底层实现机制"></a>Session底层实现机制</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220310141232989.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220310141252966.png"> </div> <h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取session, 同时也可能创建session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 给session获取id</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CreateSession 当前sessionid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//3. 给session存放数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zs@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 给浏览器发送一个回复</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;创建/操作session成功...&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取session, 如果没有session, 也会创建</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//输出sessionId</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ReadSession sessionid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//2. 读取属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">email</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (email != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;session属性 email= &quot;</span> + (String) email);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;session中没有 email属性 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给浏览器回复一下</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;读取session成功...&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Session生命周期"><a href="#Session生命周期" class="headerlink" title="Session生命周期"></a>Session生命周期</h3><h4 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h4><ol><li>public void setMaxInactiveInterval(int interval) 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session 就会被销毁。</li><li>值为正数的时候，设定 Session 的超时时长。</li><li>负数表示永不超时</li><li>public int getMaxInactiveInterval()获取 Session 的超时时间</li><li>public void invalidate() 让当前 Session 会话立即无效</li><li>如果没有调用 setMaxInactiveInterval() 来指定 Session 的生命时长，Tomcat 会以 Session默认时长为准，Session 默认的超时为 30 分钟， 可以在 tomcat 的 web.xml 设置</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220310202550602.png"> </div> <ol start="7"><li>Session 的生命周期指的是 ：客户端&#x2F;浏览器两次请求最大间隔时长，而不是累积时长。即当客户端访问了自己的 session，session 的生命周期将从 0 开始重新计算。(指的是同一个会话两次请求之间的间隔时间)</li><li>底层: Tomcat 用一个线程来轮询会话状态，如果某个会话的空闲时间超过设定的最大值，则将该会话销毁</li></ol><h4 id="应用实例-6"><a href="#应用实例-6" class="headerlink" title="应用实例"></a>应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateSession2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CreateSession2 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;CreateSession2 sid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//设置生命周期</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">30</span>);<span class="comment">//30秒</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;u&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="comment">//回复下浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;创建session成功, 设置生命周期30s&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadSession2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取到session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;ReadSession2 sid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//2. 读取session的属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">u</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;u&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取到session属性 u= &quot;</span> + (String) u);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取不到session属性 u 说明原来的session被销毁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//演示如何删除session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="comment">//如果你要删除session的某个属性</span></span><br><span class="line">        <span class="comment">//session.removeAttribute(&quot;xxx&quot;);</span></span><br><span class="line">        <span class="comment">//回复一下浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;删除session成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="服务器渲染技术-JSP-会使用"><a href="#服务器渲染技术-JSP-会使用" class="headerlink" title="服务器渲染技术-JSP[会使用]"></a>服务器渲染技术-JSP[会使用]</h1><h2 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220312082018008.png"> </div> <ol><li><p>JSP 全称是 Java Server Pages，Java 的服务器页面</p></li><li><p>JSP 这门技术的最大的特点在于，写 JSP 就像在写 HTML</p></li></ol><p>  ● 相比 html 而言，html 只能为用户提供静态数据，而 JSP 技术允许在页面中嵌套 java 代码，为用户提供动态数据<br>  ● 相比 Servlet 而言，Servlet 很难对数据进行排版，而 jsp 除了可以用 java 代码产 生动态数据的同时，也很容易对数据进行排版。</p><ol start="3"><li>jsp 技术基于 Servlet, 你可以理解成 JSP 就是对 Servlet 的包装. 4. 会使用 JSP 的程序员, 再使用 thymeleaf 是非常容易的事情, 几乎是无缝接轨。</li></ol><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jsp简单求和计算器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp简单求和计算器&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//1. 在jsp的该标签中，可以写java代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> i + j;</span><br><span class="line">    <span class="comment">//2. jsp中内置对象，可以直接使用，比如 out</span></span><br><span class="line">    <span class="comment">// 格式化快捷键 ctrl + alt + l</span></span><br><span class="line">    out.print(i + <span class="string">&quot; + &quot;</span> + j + <span class="string">&quot; = &quot;</span> + res);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><ol><li>jsp 页面本质是一个 Servlet 程序, 其性能是和 java 关联的, 只是长得丑。<div align="center"> <img src="\images\JavaWeb.assets\image-20220312084236388.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220312084934681.png"> </div></li></ol><p>（1）sum.jsp -&gt; sum_jsp.jsp</p><p>（2）sum_jsp 继承 HttpJspBase</p><p>（3）HttpJspBase 继承了 HttpServlet</p><p>（4）结论 sum.jsp本质就是servlet</p><p>（5）因为sum_jsp 类还继承 HttpJspBase 所以就有更强的功能</p><h2 id="常用page指令"><a href="#常用page指令" class="headerlink" title="常用page指令"></a>常用page指令</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><ol><li>language 表示 jsp 翻译后是什么语言文件, 只支持 java</li><li>contentType 表示 jsp 返回的数据类型，对应源码中 response.setContentType()参数值</li><li>pageEncoding 属性 表示当前 jsp 页面文件本身的字符集</li><li>import 属性 跟 java 源代码中一样。用于导包，导类</li></ol><h2 id="JSP常用三种脚本"><a href="#JSP常用三种脚本" class="headerlink" title="JSP常用三种脚本"></a>JSP常用三种脚本</h2><h3 id="声明脚本基本语法"><a href="#声明脚本基本语法" class="headerlink" title="声明脚本基本语法"></a>声明脚本基本语法</h3><ol><li><p>声明脚本的格式是： &lt;%! 声明 java 代码 %&gt;</p></li><li><p>作用：定义 jsp 的需要属性、方法、静态代码块和内部类等</p></li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jsp声明脚本&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp声明脚本&lt;/h1&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">//这里我们可以声明该jsp需要使用的属性，方法，静态代码块，内部类</span></span><br><span class="line">    <span class="comment">//也就是给 statement.jsp 对应的 statement_jsp 类定义成员</span></span><br><span class="line">    <span class="comment">//1. 属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String company;</span><br><span class="line">    <span class="comment">//2. 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        company = <span class="string">&quot;阿里巴巴&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="表达式脚本基本语法"><a href="#表达式脚本基本语法" class="headerlink" title="表达式脚本基本语法"></a>表达式脚本基本语法</h3><ol><li>表达式脚本的格式是：&lt;%&#x3D;表达式%&gt;</li><li>表达式脚本的作用是：在 jsp 页面上输出数据</li><li>表达式脚本中的表达式不能以分号结束</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;表达式脚本的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;个人信息&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;lzw&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">用户名：&lt;%=name%&gt;&lt;br&gt;</span><br><span class="line">工作是：&lt;%=<span class="string">&quot;java工程师&quot;</span>%&gt;&lt;br&gt;</span><br><span class="line">年龄:&lt;%=request.getParameter(<span class="string">&quot;age&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">邮箱:&lt;%=email%&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="代码脚本基本语法"><a href="#代码脚本基本语法" class="headerlink" title="代码脚本基本语法"></a>代码脚本基本语法</h3><ol><li>代码脚本的语法是：&lt;% java 代码%&gt;</li><li>代码脚本的作用是：可以在 jsp 页面中，编写我们需要的功能（使用 java ）</li><li>可以由多个代码脚本块组合完成一个完整的 java 语句。</li><li>代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(Integer id, String name, String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSkill</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkill</span><span class="params">(String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.lzw.entity.Monster&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;演示代码脚本&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;演示代码脚本&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//创建 ArrayList，放入两个monster</span></span><br><span class="line">    ArrayList&lt;Monster&gt; monsterLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    monsterLists.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">1</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="string">&quot;芭蕉扇&quot;</span>));</span><br><span class="line">    monsterLists.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">2</span>, <span class="string">&quot;蜘蛛精&quot;</span>, <span class="string">&quot;吐口水&quot;</span>));</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table bgcolor=<span class="string">&quot;#bfa&quot;</span> border=<span class="string">&quot;1px&quot;</span> width=<span class="string">&quot;300px&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;名字&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;技能&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; monsterLists.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先取出monster对象</span></span><br><span class="line">            <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> monsterLists.get(i);</span><br><span class="line">    %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=monster.getId()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=monster.getName()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=monster.getSkill()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><h3 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h3><p>1、JSP 内置对象(已经创建好的对象, 直接使用 inbuild)，是指 Tomcat 在翻译 jsp 页面成为Servlet 后，内部提供的九大对象，叫内置对象<br>2、内置对象，可以直接使用，不需要手动定义</p><h3 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h3><ol><li>out 向客户端输出数据，out.println(“”);</li><li>request 客户端的 http 请求</li><li>response 响应对象</li><li>session 会话对象</li><li>application 对应 ServletContext</li><li>pageContext jsp 页面的上下文，是一个域对象，可以 setAttribue(),作用范围只是本页面</li><li>exception 异常对象 , getMessage()</li><li>page 代表 jsp 这个实例本身</li><li>config 对应 ServletConfig</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220313153638744.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HiServlet 被调用&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;job&quot;</span>,<span class="string">&quot;java工程师&quot;</span>);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">666</span>);</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line">        servletConfig.getInitParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jsp内置对象&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp内置对象&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//jsp的内置对象</span></span><br><span class="line">    <span class="comment">//out 类型是 JspWriter 父类就是 Writer.</span></span><br><span class="line">    out.println(<span class="string">&quot;jsp out&quot;</span>);</span><br><span class="line">    <span class="comment">//request是HttpServletRequest</span></span><br><span class="line">    request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//response就是 HttpServletResponse</span></span><br><span class="line">    <span class="comment">//response.sendRedirect(&quot;http://www.baidu.com&quot;);</span></span><br><span class="line">    <span class="comment">//session 就是 HttpSession</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;PHP工程师&quot;</span>);</span><br><span class="line">    <span class="comment">//application类型就是ServletContext</span></span><br><span class="line">    application.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老韩老师&quot;</span>);</span><br><span class="line">    <span class="comment">//pageContext 可以存放数据(属性), 但是该数据只能在本页面使用</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//exception 异常对象 使用比较少</span></span><br><span class="line">    <span class="comment">//page 内置对象，类似 this</span></span><br><span class="line">    out.println(<span class="string">&quot;page=&quot;</span> + page);</span><br><span class="line">    <span class="comment">//config 内置对象的类型就是ServletConfig</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> config.getInitParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">age: &lt;%=pageContext.getAttribute(<span class="string">&quot;age&quot;</span>)%&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP域对象"><a href="#JSP域对象" class="headerlink" title="JSP域对象"></a>JSP域对象</h2><h3 id="JSP四大域对象"><a href="#JSP四大域对象" class="headerlink" title="JSP四大域对象"></a>JSP四大域对象</h3><ol><li>pageContext (域对象，存放的数据只能在当前页面使用)</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220313212927458.png"> </div> <ol start="2"><li>request (域对象，存放的数据在一次 request 请求有效)</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220313213142802.png"> </div> <ol start="3"><li>session(域对象,存放的数据在一次会话有效)</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220313213158673.png"> </div> <ol start="4"><li>application(域对象,存放的数据在整个 web 应用运行期间有效, 范围更大)</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220313213230807.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220313214003016.png"> </div> <h3 id="应用实例-7"><a href="#应用实例-7" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;scope文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//在不同的域对象中，放入数据</span></span><br><span class="line">    <span class="comment">//1. 因为四个域对象，是不同的对象，因此name(key) 相同时，并不会冲突</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;pageContext 数据（k1）&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;request 数据(k1)&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;session 数据（k1）&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;application 数据（k1）&quot;</span>);</span><br><span class="line">    <span class="comment">//做一个请求转发的操作</span></span><br><span class="line">    <span class="comment">//路径</span></span><br><span class="line"><span class="comment">//    request.getRequestDispatcher(&quot;/scope2.jsp&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//做一个重定向</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">    response.sendRedirect(contextPath + <span class="string">&quot;/scope2.jsp&quot;</span>);</span><br><span class="line"><span class="comment">//    response.sendRedirect(&quot;/jsp/scope2.jsp&quot;);</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;四个域对象，在本页面获取数据的情况&lt;/h1&gt;</span><br><span class="line">pageContext-k1:&lt;%=pageContext.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">request-k1:&lt;%=request.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">session-k1:&lt;%=session.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">application-k1:&lt;%=application.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;scope2.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;scope2页面获取数据的情况&lt;/h1&gt;</span><br><span class="line">pageContext-k1:&lt;%=pageContext.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">request-k1:&lt;%=request.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">session-k1:&lt;%=session.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">application-k1:&lt;%=application.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-4"><a href="#注意事项和细节-4" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存储范围</li><li>从存储范围(作用域范围看) pageContext &lt; request &lt; session &lt; application</li></ol><h2 id="JSP请求转发标签"><a href="#JSP请求转发标签" class="headerlink" title="JSP请求转发标签"></a>JSP请求转发标签</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;aa.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="number">1.</span> jsp提供了很多标签，但是因为jsp不是重点，老韩就讲一个常用forward</span><br><span class="line"><span class="number">2.</span> jsp:forward 本质就是 等价 request.getRequestDispatcher(<span class="string">&quot;/bb.jsp&quot;</span>).<span class="keyword">for</span>...</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;bb.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="EL表达式-JSP"><a href="#EL表达式-JSP" class="headerlink" title="EL表达式(JSP)"></a>EL表达式(JSP)</h1><h2 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h2><ol><li>EL 表达式全称：Expression Language，是表达式语言</li><li>EL 表达式主要是代替 jsp 页面的表达式脚本&lt;%&#x3D;request.getAttribute(“xx”)%&gt;</li><li>EL 表达式输出数据的时，比 jsp 的表达式脚本简洁</li><li>EL 表达式基本语法： ${key1}, 你可以理解就是一个语法糖</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;el表达式快速入门&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;el表达式快速入门&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;梁lzw&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span> 如果name是<span class="literal">null</span>，request.getAttribute() 返回的是<span class="literal">null</span>字符串</span><br><span class="line">    <span class="number">2.</span> 如果name是<span class="literal">null</span>，$&#123;name&#125;，返回的<span class="string">&quot;&quot;</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;h1&gt;jsp表达式脚本&lt;/h1&gt;</span><br><span class="line">名字 = &lt;%=request.getAttribute(<span class="string">&quot;name&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:request.getAttribute(<span class="string">&quot;name&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;h1&gt;el 表达式&lt;/h1&gt;</span><br><span class="line">名字 = $&#123;name&#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="EL常用输出形式"><a href="#EL常用输出形式" class="headerlink" title="EL常用输出形式"></a>EL常用输出形式</h2><p>EL 表达式常用输出 Bean 的普通属性、 数组属性、List 集合属性和 map 集合属性</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.lzw.entity.Book&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;el表达式输出数据演示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;el表达式输出数据演示&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//创建Book对象，放入相关的属性</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setName(<span class="string">&quot;昆虫总动员&quot;</span>);</span><br><span class="line">    book.setWriter(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;tom&quot;</span>&#125;);</span><br><span class="line">    ArrayList&lt;String&gt; reader = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    reader.add(<span class="string">&quot;老韩&quot;</span>);</span><br><span class="line">    reader.add(<span class="string">&quot;lzw&quot;</span>);</span><br><span class="line">    book.setReader(reader);<span class="comment">//放入readers</span></span><br><span class="line">    HashMap&lt;String, String&gt; topics = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    topics.put(<span class="string">&quot;topic1&quot;</span>,<span class="string">&quot;这是我看过最好的动画片&quot;</span>);</span><br><span class="line">    topics.put(<span class="string">&quot;topic2&quot;</span>,<span class="string">&quot;不错的电影&quot;</span>);</span><br><span class="line">    book.setTopics(topics);</span><br><span class="line">    <span class="comment">//把book放入到request域对象</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;bookkey&quot;</span>,book);</span><br><span class="line">%&gt;</span><br><span class="line">book对象：$&#123;bookkey&#125;&lt;br/&gt;</span><br><span class="line">book.name：$&#123;bookkey.name&#125;&lt;br/&gt;</span><br><span class="line">book.writer：$&#123;bookkey.writer&#125;&lt;br/&gt;</span><br><span class="line">book.writer[<span class="number">0</span>]：$&#123;bookkey.writer[<span class="number">0</span>]&#125;&lt;br/&gt;</span><br><span class="line">book.readers：$&#123;bookkey.reader&#125;&lt;br/&gt;</span><br><span class="line">book.readers第二个：$&#123;bookkey.reader.get(<span class="number">1</span>)&#125;&lt;br/&gt;</span><br><span class="line">book.readers第二个：$&#123;bookkey.reader[<span class="number">1</span>]&#125;&lt;br/&gt;</span><br><span class="line">book.topics：$&#123;bookkey.topics&#125;&lt;br/&gt;</span><br><span class="line">book.topics第一个：$&#123;bookkey.topics[<span class="string">&quot;topic1&quot;</span>]&#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="EL运算操作符"><a href="#EL运算操作符" class="headerlink" title="EL运算操作符"></a>EL运算操作符</h2><p>语法：${ 运算表达式 }</p><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220314092625286.png"> </div> <h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220314092649787.png"> </div> <h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220314092710646.png"> </div> <h2 id="EL的empty运算"><a href="#EL的empty运算" class="headerlink" title="EL的empty运算"></a>EL的empty运算</h2><p>1.empty 运算可以判断一个数据是否为空，如果为空，返回 true，否则返回 false</p><p>2.以下几种情况为空</p><p>● 值为 null<br>● 值为空串的时<br>● 值是 Object 类型数组，长度为零<br>● list 集合，元素个数为零<br>● map 集合，元素个数为零</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;el empty的运算&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;el empty的运算&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k3&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k4&quot;</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k5&quot;</span>,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;());</span><br><span class="line">%&gt;</span><br><span class="line">k1 是否为空= $&#123;empty k1&#125;&lt;br/&gt;</span><br><span class="line">k2 是否为空= $&#123;empty k2&#125;&lt;br/&gt;</span><br><span class="line">k3 是否为空= $&#123;empty k3&#125;&lt;br/&gt;</span><br><span class="line">k4 是否为空= $&#123;empty k4&#125;&lt;br/&gt;</span><br><span class="line">k5 是否为空= $&#123;empty k5&#125;&lt;br/&gt;</span><br><span class="line">k5 是否为空= $&#123;not empty k5&#125;&lt;br/&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="EL三元运算"><a href="#EL三元运算" class="headerlink" title="EL三元运算"></a>EL三元运算</h2><p>表达式 1?表达式 2: 表达式 3</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;score &gt;= <span class="number">60</span> ? <span class="string">&quot;及格&quot;</span>:<span class="string">&quot;不及格&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="EL的11隐含对象"><a href="#EL的11隐含对象" class="headerlink" title="EL的11隐含对象"></a>EL的11隐含对象</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220314093518792.png"> </div> <h3 id="EL获取四个域数据"><a href="#EL获取四个域数据" class="headerlink" title="EL获取四个域数据"></a>EL获取四个域数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL 获取四个特定域中的属性&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;EL 获取四个特定域中的属性&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;pageContext_key1 的值&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;request_key1 的值&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;session_key1 的值&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;application_key1 的值&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">application 的 key1: $&#123;applicationScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">pageContext 的 key1: $&#123;pageScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">session 的 key1: $&#123;sessionScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">request 的 key1: $&#123;requestScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;pageContext 对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;pageContext 对象的使用&lt;/h1&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="comment">//通过 request 对象来获取和 HTTP 协议相关的数据</span></span><br><span class="line">request.getScheme() 它可以获取请求的协议</span><br><span class="line">request.getServerName() 获取请求的服务器 ip 或域名</span><br><span class="line">request.getServerPort() 获取请求的服务器端口号</span><br><span class="line">getContextPath() 获取当前工程路径</span><br><span class="line">request.getMethod() 获取请求的方式（GET 或 POST）</span><br><span class="line">request.getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line">session.getId() 获取会话的唯一标识</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span>我们可以通过pageContext.request.xx 俩获取和http协议相关的信息</span><br><span class="line">    <span class="number">2.</span>相当于替代 request.getMethod()....</span><br><span class="line">--%&gt;</span><br><span class="line">协议： $&#123; pageContext.request.scheme &#125;&lt;br&gt;</span><br><span class="line">服务器 ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;</span><br><span class="line">服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;</span><br><span class="line">工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;</span><br><span class="line">请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;</span><br><span class="line">客户端 ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;</span><br><span class="line">会话 id ：$&#123; pageContext.session.id &#125;&lt;br&gt;</span><br><span class="line">&lt;h1&gt;使用 jsp 表达式脚本获取如上信息&lt;/h1&gt;</span><br><span class="line">ip 地址: &lt;%=request.getRemoteHost() %&gt; &lt;br&gt;</span><br><span class="line">&lt;h1&gt;使用 el 表达式形式获取信息-简化写法&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;req&quot;</span>, request);</span><br><span class="line">%&gt;</span><br><span class="line">ip 地址: $&#123;req.remoteHost&#125; &lt;br&gt;</span><br><span class="line">获取请求方法: $&#123;req.method&#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="JSTL-JSP"><a href="#JSTL-JSP" class="headerlink" title="JSTL(JSP)"></a>JSTL(JSP)</h1><h2 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h2><ol><li>JSTL 标签库 是指 JSP Standard Tag Library JSP 标准标签库</li><li>EL 表达式是为了替换 jsp 中的表达式脚本，JSTL 是为了替换代码脚本。这样 jsp 页面<br>变得更佳简洁</li><li>JSTL 由五个标签库组成</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220314100858009.png"> </div> <ol start="4"><li>使用 JSTL，需要导入相关的 jar 包</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220314100923734.png"> </div> <h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门<a id="jstlksrm"></a></h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jstl的快速入门&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jstl的快速入门&lt;/h1&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span> c:<span class="keyword">if</span> 类似</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">if</span>(<span class="number">10</span>&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;10 &gt; 2 成立~ &lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;10 &gt; 2&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;<span class="number">10</span> &gt; <span class="number">2</span> 成立~ &lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>细节</p><p>● taglib 引入标签，要放在行首<br>● 导入 jstl jar 包后，要重新发布 web 工程，否则不识别 jstl</p><h2 id="Core核心库"><a href="#Core核心库" class="headerlink" title="Core核心库"></a>Core核心库</h2><h3 id="lt-c-set-x2F-gt"><a href="#lt-c-set-x2F-gt" class="headerlink" title="&lt;c:set &#x2F;&gt;"></a>&lt;c:set &#x2F;&gt;</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:set标签的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;c:set标签的使用&lt;/h1&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="comment">//Java代码</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;hsp@sohu.com&quot;</span>);</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    &lt;c:set /&gt; set 标签可以往域中保存数据</span><br><span class="line">    <span class="number">1.</span> 等价 域对象.setAttribute(key,value);</span><br><span class="line">    <span class="number">2.</span> scope 属性设置保存到哪个域</span><br><span class="line">            page 表示 PageContext 域（默认值）</span><br><span class="line">            request 表示 Request 域</span><br><span class="line">            session 表示 Session 域</span><br><span class="line">            application 表示 ServletContext 域</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">var</span> 属性设置 key 是什么</span><br><span class="line">    <span class="number">4.</span> value 属性设置值</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">&quot;request&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;LiAng&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-c-if-x2F-gt"><a href="#lt-c-if-x2F-gt" class="headerlink" title="&lt;c:if &#x2F;&gt;"></a>&lt;c:if &#x2F;&gt;</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220314104734614.png"> </div> <p>代码见 <a href="#jstlksrm">快速入门</a></p><h3 id="lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签"></a>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</h3><p>介绍：多路判断。跟 switch … case …. default 非常接近</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:choose标签的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;c:choose标签的使用&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;score&quot;</span>,<span class="number">90</span>);</span><br><span class="line">    <span class="comment">//request.setAttribute(&quot;k1&quot;, &quot;request-k1的值&quot;);</span></span><br><span class="line">    <span class="comment">//session.setAttribute(&quot;k1&quot;, &quot;session-k1的值&quot;);</span></span><br><span class="line">    <span class="comment">//application.setAttribute(&quot;k1&quot;, &quot;application-k1的值&quot;);</span></span><br><span class="line">    <span class="comment">//pageContext.setAttribute(&quot;k1&quot;, &quot;pageContext-k1的值~&quot;);</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="number">1.</span> 如果$&#123;requestScope.score&#125; 那么就明确的指定从request域对象取出数据</span><br><span class="line"><span class="number">2.</span> 如果$&#123;score&#125;, 这是就按照从小到大的域范围去获取 pageContext-&gt;request-&gt;session-&gt;application</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt; 80&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;score&#125;-成绩优秀&lt;/h1&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 60&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;score&#125;-成绩一般, 及格了&lt;/h1&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;score&#125;-没有及格，下次努力~&lt;/h1&gt;</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-c-forEach-x2F-gt"><a href="#lt-c-forEach-x2F-gt" class="headerlink" title="&lt;c:forEach &#x2F;&gt;"></a>&lt;c:forEach &#x2F;&gt;</h3><p>介绍: c:forEach 标签 用来遍历输出, 主要有 4 种形式</p><p> ● 普通遍历输出 i 到 j<br> ● 遍历数组<br> ● 遍历 Map<br> ● 遍历 List</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.lzw.entity.Monster&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:forEach 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;c:forEach 标签&lt;/h1&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">1</span>种遍历方式从i到j&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    <span class="number">1.</span>遍历 <span class="number">1</span> 到 <span class="number">5</span>，</span><br><span class="line">    <span class="number">2.</span> 输出 begin 属性设置开始的索引 end 属性设置结束的索引</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line">    <span class="number">4.</span> 等价 <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;&#125;</span><br><span class="line">    <span class="number">5.</span> 在默认情况下, i 每次会递增<span class="number">1</span></span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;5&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;排名=$&#123;i&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">2</span>种遍历方式：遍历数组&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;sports&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;打篮球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123; requestScope.sports &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;item&quot;</span>/&gt;</span><br><span class="line">    <span class="number">1.</span> items 遍历的集合/数组</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">var</span> 遍历到的数据</span><br><span class="line">    <span class="number">3.</span> 等价 <span class="keyword">for</span> (Object item: arr) &#123;&#125;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.sports&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;sport&quot;</span>&gt;</span><br><span class="line">    运动名称= $&#123;sport&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">3</span>种遍历方式：遍历Map&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;天津&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;cities&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span> items 遍历的map集合</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">var</span> 遍历到的数据</span><br><span class="line">    <span class="number">3.</span> entry.key 取出key</span><br><span class="line">    <span class="number">4.</span> entry.value 取出值</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.cities&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;city&quot;</span>&gt;</span><br><span class="line">    城市信息: $&#123;city.key&#125;--$&#123;city.value&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">4</span>种遍历方式：遍历List&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Monster&gt; monsters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    monsters.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;小妖怪&quot;</span>, <span class="string">&quot;巡山的&quot;</span>));</span><br><span class="line">    monsters.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">200</span>, <span class="string">&quot;大妖怪&quot;</span>, <span class="string">&quot;做饭的&quot;</span>));</span><br><span class="line">    monsters.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">300</span>, <span class="string">&quot;老妖怪&quot;</span>, <span class="string">&quot;打扫位置的&quot;</span>));</span><br><span class="line">    request.setAttribute(<span class="string">&quot;monsters&quot;</span>, monsters);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    items 表示遍历的集合</span><br><span class="line">    <span class="keyword">var</span> 表示遍历到的数据</span><br><span class="line">    begin 表示遍历的开始索引值 ,从<span class="number">0</span>开始计算</span><br><span class="line">    end 表示结束的索引值</span><br><span class="line">    step 属性表示遍历的步长值</span><br><span class="line">    varStatus 属性表示当前遍历到的数据的状态,可以得到step,begin,end等属性值</span><br><span class="line">    <span class="comment">//老师提示, 对于jstl标签，能看懂，会使用即可</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.monsters&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;monster&quot;</span>&gt;</span><br><span class="line">    妖怪的信息: $&#123;monster.id&#125;-$&#123;monster.name&#125;-$&#123;monster.skill&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="三大组件-Listener监听器"><a href="#三大组件-Listener监听器" class="headerlink" title="三大组件-Listener监听器"></a>三大组件-Listener监听器</h1><h2 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>Listener 监听器它是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器</p></li><li><p>Listener 是 JavaEE 的规范，就是接口</p></li><li><p>监听器的作用是，监听某种变化(一般就是对象创建&#x2F;销毁, 属性变化), 触发对应方法完成相应的任务</p></li><li><p>JavaWeb 中的监听器（共八个）, 目前最常用的是 ServletContextListener。</p></li></ol><h2 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a>ServletContextListener 监听器</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>监听 ServletContext 创建或销毁(当我们 Web 应用启动时，就会创建 ServletContext)，即生命周期监听，</p><p>应用场景(1)加载初始化的配置文件；比如 spring 的配置文件 ；(2)任务调度（配合定时器 Timer&#x2F;TimerTask)</p><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><p>void contextInitialized(ServletContextEvent sce) 创建 Servletcontext 时触发</p><p>void contextDestroyed(ServletContextEvent sce) 销毁 Servletcontext 时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 当一个类实现了 ServletContextListener</span></span><br><span class="line"><span class="comment"> * 2. 该类就是一个监听器</span></span><br><span class="line"><span class="comment"> * 3. 该类可以监听的事件 由该类实现的监听接口决定，比如实现了 ServletContextListener</span></span><br><span class="line"><span class="comment"> *    ，则该类就可以监听 ServletContext对象的创建和销毁，以此类推</span></span><br><span class="line"><span class="comment"> * 4. LzwServletContextListener 就是一个监听者</span></span><br><span class="line"><span class="comment"> * 5. 当web应用启动时，就会产生 ServletContextEvent 事件，会调用监听器的对应事件处理方法</span></span><br><span class="line"><span class="comment"> *    contextInitialized，同时会传递 事件对象</span></span><br><span class="line"><span class="comment"> * 6. 程序员可以通过 ServletContextEvent 事件对象，来获取需要的信息，然后再进行业务处理</span></span><br><span class="line"><span class="comment"> * 7. tomcat 怎么知道这个监听器存在？ 因为需要在web.xml中配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextListener 监听到 &quot;</span> +</span><br><span class="line">                servletContext + <span class="string">&quot; 被创建&quot;</span>);</span><br><span class="line">        <span class="comment">//如果我们获取到 ServletContext 对象。。 进行业务处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextListener 监听到 &quot;</span> +</span><br><span class="line">                servletContext + <span class="string">&quot; 被销毁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如可以对 ServletContext 数据进行处理，或日志的管理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进行处理工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.lzw.listener.LzwServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContextAttributeListener-监听器"><a href="#ServletContextAttributeListener-监听器" class="headerlink" title="ServletContextAttributeListener 监听器"></a>ServletContextAttributeListener 监听器</h2><h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><p>监听 ServletContext 属性变化</p><h3 id="相关方法-1"><a href="#相关方法-1" class="headerlink" title="相关方法"></a>相关方法</h3><p>void attributeAdded(ServletContextAttributeEvent event) 添加属性时调用</p><p>void attributeReplaced(ServletContextAttributeEvent event) 替换属性时调用</p><p>void attributeRemoved(ServletContextAttributeEvent event) 移除属性时调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwServletContextAttributeListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextAttributeListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextAttributeListener 监听到添加属性&quot;</span> +</span><br><span class="line">               servletContextAttributeEvent.getName() + <span class="string">&quot;=&quot;</span> + servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextAttributeListener 监听到删除属性&quot;</span> +</span><br><span class="line">                servletContextAttributeEvent.getName() + <span class="string">&quot;=&quot;</span> + servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextAttributeListener 监听到修改属性&quot;</span> +</span><br><span class="line">                servletContextAttributeEvent.getName() + <span class="string">&quot;=&quot;</span> + servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//给servletContext 对象操作属性</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Lzw&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;LiAng&quot;</span>);</span><br><span class="line">        servletContext.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HiServlet 处理完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他监听器-使用较少"><a href="#其他监听器-使用较少" class="headerlink" title="其他监听器-使用较少"></a>其他监听器-使用较少</h2><h3 id="HttpSessionListener-监听器"><a href="#HttpSessionListener-监听器" class="headerlink" title="HttpSessionListener 监听器"></a>HttpSessionListener 监听器</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>监听 Session 创建或销毁，即生命周期监听</p><h4 id="相关方法-2"><a href="#相关方法-2" class="headerlink" title="相关方法"></a>相关方法</h4><p>void sessionCreated(HttpSessionEvent se) 创建 session 时调用 </p><p>void sessionDestroyed(HttpSessionEvent se) 销毁 session 时调用</p><p>使用方法和前面一样, 可以用于监控用户上线，离线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwHttpSessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpSessionEvent.getSession();</span><br><span class="line">        <span class="comment">//当session创建时，给它设置一个生命周期</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">5</span>);<span class="comment">//5秒</span></span><br><span class="line">        System.out.println(<span class="string">&quot;LzwHttpSessionListener 监听到 session创建=&quot;</span> + session.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;用户id=&quot;</span> + session.getId() + <span class="string">&quot; 上线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpSessionEvent.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwHttpSessionListener 监听到 session销毁=&quot;</span> + session.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;用户id=&quot;</span> + session.getId() + <span class="string">&quot; 离线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpSessionAttributeListener-监听器"><a href="#HttpSessionAttributeListener-监听器" class="headerlink" title="HttpSessionAttributeListener 监听器"></a>HttpSessionAttributeListener 监听器</h3><h4 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h4><p>监听 Session 属性的变化</p><h4 id="相关方法-3"><a href="#相关方法-3" class="headerlink" title="相关方法"></a>相关方法</h4><p>void attributeAdded(ServletRequestAttributeEvent srae) 添加属性时</p><p>void attributeReplaced(ServletRequestAttributeEvent srae) 替换属性时</p><p>void attributeRemoved(ServletRequestAttributeEvent srae) 移除属性时</p><h3 id="ServletRequestListener-监听器"><a href="#ServletRequestListener-监听器" class="headerlink" title="ServletRequestListener 监听器"></a>ServletRequestListener 监听器</h3><h4 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h4><p>监听 Request 创建或销毁，即 Request 生命周期监听</p><h4 id="相关方法-4"><a href="#相关方法-4" class="headerlink" title="相关方法"></a>相关方法</h4><p>void requestInitialized(ServletRequestEvent sre) 创建 request 时</p><p>void requestDestroyed(ServletRequestEvent sre) 销毁 request 时</p><p>可以用来监控, 某个 IP 访问我们网站的频率, 日志记录 ,访问资源的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwRequestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwRequestListener 监听到 request对象创建&quot;</span>);</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> servletRequestEvent.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;记录访问日志&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问IP = &quot;</span> + servletRequest.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">&quot;访问的资源 = &quot;</span> + ((HttpServletRequest)servletRequest).getRequestURL());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwRequestListener 监听到 request对象销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletRequestAttributeListener-监听器"><a href="#ServletRequestAttributeListener-监听器" class="headerlink" title="ServletRequestAttributeListener 监听器"></a>ServletRequestAttributeListener 监听器</h3><h4 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h4><p>监听 Request 属性变化</p><h4 id="相关方法-5"><a href="#相关方法-5" class="headerlink" title="相关方法"></a>相关方法</h4><p>void attributeAdded(ServletRequestAttributeEvent srae) 添加属性时</p><p>void attributeReplaced(ServletRequestAttributeEvent srae) 替换属性时</p><p>void attributeRemoved(ServletRequestAttributeEvent srae)移除属性时</p><h3 id="HttpSessionBindingListener-感知监听器"><a href="#HttpSessionBindingListener-感知监听器" class="headerlink" title="HttpSessionBindingListener 感知监听器"></a>HttpSessionBindingListener 感知监听器</h3><h4 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h4><p>绑定Session中的数据（对象）</p><h3 id="HttpSessionActivationListener-感知监听器"><a href="#HttpSessionActivationListener-感知监听器" class="headerlink" title="HttpSessionActivationListener 感知监听器"></a>HttpSessionActivationListener 感知监听器</h3><h4 id="作用-10"><a href="#作用-10" class="headerlink" title="作用"></a>作用</h4><p>Session绑定的对象在钝化（把对象持久化到磁盘）之前监听到。（和上面的 HttpSessionBindingListener 是一对）</p><hr><h1 id="三大组件-Filter过滤器"><a href="#三大组件-Filter过滤器" class="headerlink" title="三大组件-Filter过滤器"></a>三大组件-Filter过滤器</h1><div align="center"> <img src="\images\JavaWeb.assets\image-20220316193247406.png"> </div> <h2 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>Filter 过滤器它是 JavaWeb 的三大组件之一(Servlet 程序、Listener 监听器、Filter 过滤器)</p></li><li><p>Filter 过滤器是 JavaEE 的规范，是接口</p></li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220316193401481.png"> </div> <ol start="3"><li><p>Filter 过滤器它的作用是：拦截请求，过滤响应。</p></li><li><p>应用场景<br>● 权限检查<br>● 日记操作<br>● 事务管理</p></li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220316193546561.png"> </div> <h2 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;管理后台登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;管理后台登录&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;request=&quot;</span> + request);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&lt;%=request.getContextPath() %&gt;/loginCheckServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    u：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    p：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;用户登录&quot;</span>/&gt;&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取到用户名和密码</span></span><br><span class="line">        <span class="comment">//假设密码是 123456 就可以通过</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//合法，请求转发到admin.jsp</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/manage/admin.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//返回登录界面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;后台管理&lt;/title&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=request.getContextPath() %&gt;/manage/&quot;</span>/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;后台管理&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//验证request对象是和前面的filter是一个对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;request=&quot;</span> + request);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户列表&lt;/a&gt;||&lt;a href=<span class="string">&quot;#&quot;</span>&gt;添加用户&lt;/a&gt;||&lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;shunping.jpg&quot;</span> height=<span class="string">&quot;300&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//当Tomcat 创建 Filter 后，就会调用该方法，进行初始化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerFilter init被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//当每次调用该filter时，doFilter就会被调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerFilter doFilter 被调用...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果继续访问目标资源</span></span><br><span class="line">        <span class="comment">//在调用过滤器前，request对象已经被创建并封装</span></span><br><span class="line">        <span class="comment">//所以，我们这里可以通过 servletRequest 对象获取很多信息，比如访问url，session，参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到session</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpServletRequest.getSession();</span><br><span class="line">        <span class="comment">//获取username session 对象，还可以继续使用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(username != <span class="literal">null</span>)&#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            <span class="comment">//1. 继续访问目标资源url</span></span><br><span class="line">            <span class="comment">//2. servletRequest 和 servletResponse 对象会传递给目标资源/文件</span></span><br><span class="line">            <span class="comment">//3. 一定要理解filter传递的两个对象，再后面的servlet/jsp 是同一个对象(指的是在一次http请求)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;servletRequest=&quot;</span> + servletRequest);</span><br><span class="line">            System.out.println(<span class="string">&quot;日志信息==&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的用户名=&quot;</span> + username.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的url=&quot;</span> + httpServletRequest.getRequestURL());</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的IP=&quot;</span> + httpServletRequest.getRemoteAddr());</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//说明没有登录过</span></span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当filter被销毁时，会调用该方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerFilter destroy 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Filter 一般写在其他servlet的前面</span></span><br><span class="line"><span class="comment">        1. filter配置和servlet配置非常相似，filter也是被tomcat管理和维护</span></span><br><span class="line"><span class="comment">        2. url-pattern 就是当请求的url 匹配的时候，就会调用 filter</span></span><br><span class="line"><span class="comment">        3. /manage/* 第一个/ 解析成 http://ip:port/工程路径</span></span><br><span class="line"><span class="comment">        4. 完整的路径就是 http://ip:port/工程路径/manage/* 当请求的资源url满足该条件时</span></span><br><span class="line"><span class="comment">        都会调用 filter</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ManageFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.ManagerFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ManageFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/manage/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginCheckServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.LoginCheckServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginCheckServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginCheckServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="url-pattern"><a href="#url-pattern" class="headerlink" title="url-pattern"></a>url-pattern</h2><p>1、url-pattern : Filter 的拦截路径, 即浏览器在请求什么位置的资源时，过滤器会进行拦截过滤</p><p>2.、精确匹配 <url-pattern>&#x2F;a.jsp</url-pattern> 对应的 请求地址 <a href="http://ip[域名]:port/工程路径/a.jsp">http://ip[域名]:port/工程路径/a.jsp</a> 会拦截</p><p>3、目录匹配 <url-pattern>&#x2F;manage&#x2F; * </url-pattern>对应的 请求地址 <a href="http://ip[域名]:port/工程路径/manage/xx">http://ip[域名]:port/工程路径/manage/xx</a> , 即 web 工程 manage 目录下所有资源 会拦截</p><p>4、后缀名匹配 <url-pattern>*.jsp</url-pattern> 后缀名可变，比如 *.action *.do 等等对应的请求地址 <a href="http://ip[域名]:port/">http://ip[域名]:port/</a></p><p>工程路径&#x2F;xx.jsp , 后缀名为 .jsp 请求会拦截</p><p>5、Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在</p><h2 id="Filter生命周期"><a href="#Filter生命周期" class="headerlink" title="Filter生命周期"></a>Filter生命周期</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220316223355873.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220316224358294.png"> </div> <h2 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220317092159390.png"> </div> <h3 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h3><ol><li>FilterConfig 是 Filter 过滤器的配置类</li><li>Tomcat 每次创建 Filter 的时候，也会创建一个 FilterConfig 对象，这里包含了 Filter 配置文件的配置信息。</li><li>FilterConfig 对象作用是获取 filter 过滤器的配置内容</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LzwFilterConfig<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.LzwFilterConfig<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里就是该filter配置的参数-由程序员根据业务逻辑来设置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>127.0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>port<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LzwFilterConfig<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/abc/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//演示FilterConfig使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwFilterConfig</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ip;<span class="comment">//从配置获取的ip</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//通过FilterConfig 获取相关的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> filterConfig.getFilterName();</span><br><span class="line">        ip = filterConfig.getInitParameter(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> filterConfig.getServletContext();</span><br><span class="line">        <span class="comment">//可以获取到该filter所有的配置参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = filterConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">//遍历枚举</span></span><br><span class="line">        <span class="keyword">while</span>(initParameterNames.hasMoreElements())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;名字 = &quot;</span> + initParameterNames.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;filterName = &quot;</span> + filterName);</span><br><span class="line">        System.out.println(<span class="string">&quot;ip = &quot;</span> + ip);</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext = &quot;</span> + servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 forbidden ip 来进行控制 </span></span><br><span class="line">        <span class="comment">//先获取到访问ip</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> servletRequest.getRemoteAddr();</span><br><span class="line">        <span class="keyword">if</span>(remoteAddr.contains(ip)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;封杀该网段..&quot;</span>);</span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续访问目标资源</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h2><h3 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h3><p>在处理某些复杂业务时，一个过滤器不够，可以设计多个过滤器共同完成过滤任务，形成过滤器链。</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220317172211618.png"> </div> <h3 id="应用实例-8"><a href="#应用实例-8" class="headerlink" title="应用实例"></a>应用实例</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220317172314023.png"> </div> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.AFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>BFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.BFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>BFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AFilter doFilter 的前置代码...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行 AFilter 的 doFilter()&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;AFilter doFilter 的后置代码...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BFilter doFilter 的前置代码...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行 BFilter 的 doFilter()&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;BFilter doFilter 的后置代码...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-5"><a href="#注意事项和细节-5" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>多个 filter 和目标资源在一次 http 请求，在同一个线程中</li><li>当一个请求 url 和 filter 的 url-pattern 匹配时, 才会被执行, 如果有多个匹配上，就会顺序执行，形成一个 filter 调用链(底层可以使用一个数据结构搞定)</li><li>多个 filter 共同执行时,因为是一次 http 请求, 使用同一个 request 对象</li><li>多个 filter 执行顺序，和 web.xml 配置顺序保持一致. </li><li>chain.doFilter(req, resp)方法 将执行下一个过滤器的 doFilter 方法, 如果后面没有过滤器，则执行目标资源。</li><li>小结：注意执行过滤器链时, 顺序是(用前面的案例分析) Http请求 -&gt; A 过滤器 dofilter()-&gt; A 过滤器前置代码 -&gt; A 过滤器 chain.doFilter() -&gt; B 过滤器 dofilter() -&gt; B 过滤器前置代码 -&gt; B过滤器 chain.doFilter() -&gt; 目标文件 -&gt; B过滤器后置代码 -&gt; A过滤器后置代码 -&gt;返回给浏览器页面&#x2F;数据</li></ol><hr><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><h2 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</p></li><li><p>JSON 是轻量级的文本数据交换格式</p></li><li><p>JSON 独立于语言 [ ：即 java 、php、asp.net , go 等都可以使用 JSON]</p></li><li><p>JSON 具有自我描述性，更易理解, 一句话，非常的好用</p></li></ol><h2 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>json 快速入门案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 1. myJson 就是一个json对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 2. 演示如何获取到json对象的各个属性/key</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> myJson = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key1&quot;</span>: <span class="string">&quot;LiAng梁&quot;</span>,  <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key2&quot;</span>: <span class="number">123</span>,    <span class="comment">// Number</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key3&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">2.3</span>],  <span class="comment">// 数组</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key4&quot;</span>: &#123;<span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>&#125;,  <span class="comment">//json对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key5&quot;</span>: [      <span class="comment">//json数组</span></span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="string">&quot;k1&quot;</span>: <span class="number">10</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;milan&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="string">&quot;k3&quot;</span>: <span class="number">30</span>, <span class="string">&quot;k4&quot;</span>: <span class="string">&quot;smith&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.取出key1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key1 = &quot;</span>, myJson.<span class="property">key1</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.取出key3</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key3 = &quot;</span>, myJson.<span class="property">key3</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//可以对key3取出的值（Array），遍历</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myJson.<span class="property">key3</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第%i个元素的值 = &quot;</span>, i,myJson.<span class="property">key3</span>[i]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.取出 key4</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key4 = &quot;</span> , myJson.<span class="property">key4</span>, <span class="string">&quot; name = &quot;</span> , myJson.<span class="property">key4</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4.取出 key5</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key5 = &quot;</span>, myJson.<span class="property">key5</span>, <span class="string">&quot; k4 = &quot;</span>, myJson.<span class="property">key5</span>[<span class="number">1</span>].<span class="property">k4</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>json 快速入门案例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Json对象和字符串对象转换"><a href="#Json对象和字符串对象转换" class="headerlink" title="Json对象和字符串对象转换"></a>Json对象和字符串对象转换</h2><ol><li>JSON.stringify(json)功能: 将一个 json 对象转换成为 json 字符串</li><li>JSON.parse( jsonString )功能: 将一个 json 字符串转换成为 json 对象</li></ol><h3 id="应用实例-9"><a href="#应用实例-9" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON对象和字符串对象转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.JSON 是一个js的内置对象(build-in)，可以直接使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//console.log(&quot;JSON=&quot;, JSON);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jsonPerson = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;name&quot;</span>:<span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jsonPerson = &quot;</span>, jsonPerson);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//json-&gt;string</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> strPerson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonPerson);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strPerson = &quot;</span>, strPerson, <span class="string">&quot; strPerson类型是&quot;</span>, <span class="title function_">typeof</span>(strPerson));</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//string-&gt;json</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> strDog = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;小黄狗\&quot;,\&quot;age\&quot;:2&#125;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jsonDog = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(strDog);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jsonDog = &quot;</span>, jsonDog);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSON对象和字符串对象转换<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-6"><a href="#注意事项和细节-6" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><p>1、JSON.springify(json 对 象 ) 会 返 回 对 应 string, 并 不 会 影 响 原 来 json 对 象</p><p>2、JSON.parse(string) 函数会返回对应的 json 对象, 并不会影响原来 string</p><p>3、在定义 Json 对象时, 可以使用 ‘ ‘ 表示字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json_person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">100</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json_person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">100</span>&#125;;</span><br></pre></td></tr></table></figure><p>4、但是在把原生字符串转成 json 对象时, 必须使用 “”, 否则会报错 比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str_dog = <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;小黄狗&#x27;, &#x27;age&#x27;: 4&#125;&quot;</span>; <span class="comment">//转 json 就会报错</span></span><br></pre></td></tr></table></figure><p>5、JSON.springify(json 对象) 返回的字符串, 都是 “” 表示的字符串, 所以在语法格式正确的情况下, 是可以重新转成 json 对象的</p><h2 id="Json在Java中使用"><a href="#Json在Java中使用" class="headerlink" title="Json在Java中使用"></a>Json在Java中使用</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ol><li><p>java 中使用 json，需要引入到第 3 方的包 gson.jar</p></li><li><p>Gson 是 Google 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库</p></li><li><p>可以对 JSON 字符串 和 Java 对象相互转换</p></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>Javabean 对象和 json 字符串 的转换</li><li>List 对象和 json 字符串 的转换</li><li>map 对象和 json 字符串 的转换</li><li>应用场景示意图</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220325090230829.png"> </div> <h3 id="应用实例-10"><a href="#应用实例-10" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaJson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个gson对象，作为一个工具对象使用</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示 javabean 和 json 字符串的转换</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">100</span>,<span class="string">&quot;Java从入门到入土&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 演示把 javabean -&gt; json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBook</span> <span class="operator">=</span> gson.toJson(book);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBook = &quot;</span> + strBook);</span><br><span class="line">        <span class="comment">//2. json字符串 -&gt; javabean</span></span><br><span class="line">        <span class="comment">//(1) strBook 就是json字符串</span></span><br><span class="line">        <span class="comment">//(2) Book.class 指定将 json字符串转成 Book 对象</span></span><br><span class="line">        <span class="comment">//(3) 底层是反射机制</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> gson.fromJson(strBook, Book.class);</span><br><span class="line">        System.out.println(book2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 演示把list对象 -&gt; json 字符串</span></span><br><span class="line">        List&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        bookList.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">200</span>, <span class="string">&quot;天龙八部&quot;</span>));</span><br><span class="line">        bookList.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">300</span>, <span class="string">&quot;三国演义&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为把对象,集合转成字符串, 相对比较简单</span></span><br><span class="line">        <span class="comment">//底层只需要遍历, 按照json格式拼接返回即可</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBookList</span> <span class="operator">=</span> gson.toJson(bookList);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBookList= &quot;</span> + strBookList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 演示把json字符串 -&gt; list对象</span></span><br><span class="line">        <span class="comment">//(1) 如果需要把json字符串 转成 集合这样复杂的类型, 需要使用gson提供的一个类</span></span><br><span class="line">        <span class="comment">//(2) TypeToken , 是一个自定义泛型类, 然后通过TypeToken来指定我们需要转换成的类型</span></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        com.google.gson.reflect</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        public class TypeToken&lt;T&gt; &#123;</span></span><br><span class="line"><span class="comment">            final Class&lt;? super T&gt; rawType;</span></span><br><span class="line"><span class="comment">            final Type type;</span></span><br><span class="line"><span class="comment">            final int hashCode;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            protected TypeToken() &#123;</span></span><br><span class="line"><span class="comment">                this.type = getSuperclassTypeParameter(this.getClass());</span></span><br><span class="line"><span class="comment">                this.rawType = Types.getRawType(this.type);</span></span><br><span class="line"><span class="comment">                this.hashCode = this.type.hashCode();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//(1) 返回类型的完整路径java.util.List&lt;com.lzw.json.Book&gt;</span></span><br><span class="line">        <span class="comment">//(2) gson的设计者，需要得到类型的完整路径，然后进行底层反射</span></span><br><span class="line">        <span class="comment">//(3) 所以gson 设计者就提供TypeToken, 来搞定.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//二说 TypeToken , 为什么要加 &#123;&#125;</span></span><br><span class="line">        <span class="comment">//(1) 如果我们  new TypeToken&lt;List&lt;Book&gt;&gt;()  提示</span></span><br><span class="line">        <span class="comment">// &#x27;TypeToken()&#x27; has protected access in &#x27;com.google.gson.reflect.TypeToken&#x27;</span></span><br><span class="line">        <span class="comment">//(2) 因为TypeToken 的无参构造器是protected ， 而 new TypeToken&lt;List&lt;Book&gt;&gt;() 就是调用其无参构造器</span></span><br><span class="line">        <span class="comment">//(3) 根据java基础, 如果一个方法是protected ,而且不在同一个包， 是不能直接访问的, 因此报错</span></span><br><span class="line">        <span class="comment">//(4) 为什么 new TypeToken&lt;List&lt;Book&gt;&gt;()&#123;&#125; 使用就可以，这里就涉及到匿名内部类的知识.</span></span><br><span class="line">        <span class="comment">//(5) 当 new TypeToken&lt;List&lt;Book&gt;&gt;()&#123;&#125; 其实这个类型就不是 TypeToken 而是一个匿名内部类(子类)</span></span><br><span class="line">        <span class="comment">//(6) 而且这个匿名内部类是有自己的无参构造器(隐式), 根据java基础规则 当执行子类的无参构造器时, 默认super();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//三说 TypeToken-&gt;举一个例子.[对java基础回顾.]</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;Book&gt;&gt;() &#123;&#125;.getType();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        System.out.println(&quot;type = &quot; + type);</span></span><br><span class="line">        List&lt;Book&gt; bookList2 = gson.fromJson(strBookList, type);</span><br><span class="line">        System.out.println(<span class="string">&quot;bookList2 = &quot;</span> + bookList2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 把map对象-&gt;json字符串</span></span><br><span class="line">        Map&lt;String, Book&gt; bookMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bookMap.put(<span class="string">&quot;k1&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">400</span>,<span class="string">&quot;西游记&quot;</span>));</span><br><span class="line">        bookMap.put(<span class="string">&quot;k2&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">500</span>,<span class="string">&quot;水浒传&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBookMap</span> <span class="operator">=</span> gson.toJson(bookMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBookMap = &quot;</span> + strBookMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 把json字符串 -&gt; map对象</span></span><br><span class="line">        <span class="comment">//   new TypeToken&lt;Map&lt;String, Book&gt;&gt;() &#123;&#125;.getType()=&gt;</span></span><br><span class="line">        <span class="comment">//   java.util.Map&lt;java....String,com.lzw.json.Book&gt;</span></span><br><span class="line">        Map&lt;String, Book&gt; bookMap2 = gson.fromJson(strBookMap, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;Map&lt;String, Book&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">        System.out.println(bookMap2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h2><ol><li>AJAX 即”Asynchronous Javascript And XML”(异步 JavaScript 和 XML)</li><li>Ajax 是一种浏览器&#x3D;&#x3D;异步发起请求(指定发哪些数据)&#x3D;&#x3D;，&#x3D;&#x3D;局部更新页面&#x3D;&#x3D;的技术</li></ol><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>搜索引擎根据用户输入关键字，自动提示检索关键字</li><li>动态加载数据，按需取得数据【树形菜单、联动菜单…】</li><li>改善用户体验。【输入内容前提示、带进度条文件上传…】</li><li>电子商务应用。 【购物车、邮件订阅…】</li><li>访问第三方服务。【访问搜索服务、rss 阅读器】</li><li>页面局部刷新, <a href="https://piaofang.maoyan.com/dashboard">https://piaofang.maoyan.com/dashboard</a></li></ol><p>（1）异步请求（2）发送指定数据（3）局部</p><h2 id="原理示意图"><a href="#原理示意图" class="headerlink" title="原理示意图"></a>原理示意图</h2><h3 id="传统web数据通信方式"><a href="#传统web数据通信方式" class="headerlink" title="传统web数据通信方式"></a>传统web数据通信方式</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220326221601071.png"> </div> <h3 id="Ajax原理示意图"><a href="#Ajax原理示意图" class="headerlink" title="Ajax原理示意图"></a>Ajax原理示意图</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220326221743296.png"> </div> <h2 id="JavaScript原生Ajax请求"><a href="#JavaScript原生Ajax请求" class="headerlink" title="JavaScript原生Ajax请求"></a>JavaScript原生Ajax请求</h2><h3 id="应用实例-验证用户名是否存在"><a href="#应用实例-验证用户名是否存在" class="headerlink" title="应用实例-验证用户名是否存在"></a>应用实例-验证用户名是否存在</h3><p>1、演示 javascript 发送原生 ajax 请求的案例</p><p>​1）在输入框输入用户名</p><p>​2）点击验证用户名, 使用 ajax 方式， 服务端验证该用户名是否已经占用了, 如果该用户已经占用, 以 json 格式返回该用户信息</p><p>​3)假定用户名为 king , 就不可用, 其它用户名可以&#x3D;》 后面我们接入 DB[Mysql+JDBC]</p><p>​4）对页面进行局部刷新, 显示返回信息</p><div align="center"> <img src="\images\JavaWeb.assets\image-20220327104208251.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.ajax.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User类就是一个 javabean/pojo/entity/domain</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String pwd, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lzw.ajax.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;CheckServlet 被调用&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收ajax提交的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;uname = &quot;</span> + uname);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//假定用户名为king，就不可用，其他用户名可以</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;king&quot;</span>.equals(uname))&#123;</span><br><span class="line">            <span class="comment">//后面这个信息，从DB获取</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">king</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">100</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;666&quot;</span>, <span class="string">&quot;king@163.com&quot;</span>);</span><br><span class="line">            <span class="comment">//把king 转成 json</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">strKing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(king);</span><br><span class="line">            <span class="comment">//返回</span></span><br><span class="line">            response.getWriter().write(strKing);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果用户名可以用，返回“”</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//页面加载后执行function</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> checkButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkButton&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//给checkButton绑定onclick</span></span></span><br><span class="line"><span class="language-javascript">            checkButton.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1. 创建XMLHttpRequest对象(!!!) [ajax引擎对象]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//   获取用户填写的用户名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> uname =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;uname&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2. 准备发送指定数据 open, send</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)&quot;GET&quot; 请求方式可以 GET/POST</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)&quot;/ajax/checkServlet?username=&quot; + uname 就是 url</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(3)true , 表示异步发送</span></span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/checkServlet?uname=&quot;</span> + uname, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//在send函数调用前，给XMLHttpRequest 绑定一个事件onreadystatechange</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//该事件表示，可以去指定一个函数，当数据变化，会触发onreadystatechange</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 每当 xhr对象readyState 改变时，就会触发 onreadystatechange 事件</span></span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//如果请求已完成，且响应已就绪, 并且状态码是200</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> = <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//把返回的json数据显示在div上</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>).<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// console.log(&quot;xhr=&quot; , xhr);</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> responseText = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// console.log(&quot;返回的信息=&quot; +responseText);</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(responseText != <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myres&quot;</span>).<span class="property">value</span> = <span class="string">&quot;用户名不可用&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myres&quot;</span>).<span class="property">value</span> = <span class="string">&quot;用户名可用&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3. 真正的发送ajax请求[http请求]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果你POST 请求，再send(&quot;发送的数据&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/ajax/checkServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;border-width: 0;color: red&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myres&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    电子邮件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>返回的json数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JQuery中的Ajax"><a href="#JQuery中的Ajax" class="headerlink" title="JQuery中的Ajax"></a>JQuery中的Ajax</h2><h3 id="ajax-函数"><a href="#ajax-函数" class="headerlink" title="$.ajax 函数"></a>$.ajax 函数</h3><p>● url： 请求的地址<br>● type : 请求的方式 get 或 post<br>● data : 发送到服务器的数据。将自动转换为请求字符串格式<br>● success: 成功的回调函数<br>● error: 失败后的回调函数<br>● dataType: 返回的数据类型 常用 json 或 text</p><h3 id="get函数和-post函数"><a href="#get函数和-post函数" class="headerlink" title="$.get函数和$.post函数"></a>$.get函数和$.post函数</h3><p>url: 请求的 URL 地址<br>data: 请求发送到服务器的数据<br>success: 成功时回调函数<br>type: 返回内容格式，xml, html, script, json, text</p><p>&#x3D;&#x3D;$.get 和 $.post 底层还是使用$.ajax()方法来实现异步请求&#x3D;&#x3D;</p><h3 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON"></a>$.getJSON</h3><p>url: 请求发送的哪个 URL<br>data: 请求发送到服务器的数据<br>success: 请求成功时运行的函数</p><p>&#x3D;&#x3D;$.getJSON 底层使用$.ajax()方法来实现异步请求&#x3D;&#x3D;</p><h3 id="应用实例-11"><a href="#应用实例-11" class="headerlink" title="应用实例"></a>应用实例</h3><ol><li>演示 jquery 发送 ajax 请求的案例</li></ol><ol><li>在输入框输入用户名</li><li>点击验证用户名, 服务端验证该用户名是否已经占用了, 如果该用户已经占用, 以 json格式返回该用户信息</li><li>假定用户名为 king , 就不可用, 其它用户名可以</li><li>对页面进行局部刷新, 显示返回信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入jquery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./script/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//发出ajax</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 * 1. 指定参数时，需要在&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 * 2. 给参数时，前面需要指定参数名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 * 3. dataType: &quot;json&quot; 要求服务器返回的数据格式是json</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 */</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $.ajax(&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     url:&quot;/ajax/checkUserServlet2&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     type:&quot;POST&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     data:&#123;//这里给json</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         username:$(&quot;#uname&quot;).val(),</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         date: new Date()</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     error:function()&#123;//失败后的回调函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;失败~&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     success:function (data,status,xhr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;成功~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;data = &quot;, data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;status = &quot;, status);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;xhr = &quot;, xhr);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         //data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         $(&quot;#div1&quot;).html(JSON.stringify(data));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         if(&quot;&quot; == data.username)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名不可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     dataType:&quot;json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//说明</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.$.get() 默认是get请求，不需要指定 请求方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2.不需要指定参数名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3.填写的实参，是顺序 url, data, success回调函数, 返回的数据格式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//讲解.get() 使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $.get(</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;/ajax/checkUserServlet2&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         username:$(&quot;#uname&quot;).val(),</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         date: new Date()</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     function (data,status,xhr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;$.get 成功~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;data = &quot;, data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;status = &quot;, status);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;xhr = &quot;, xhr);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         //data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         $(&quot;#div1&quot;).html(JSON.stringify(data));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         if(&quot;&quot; == data.username)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名不可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// )</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//$.post() 和 $.get() 的方式一样</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//只是这时，是按照post方式发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $.post(</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;/ajax/checkUserServlet2&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         username:$(&quot;#uname&quot;).val(),</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         date: new Date()</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     function (data,status,xhr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;$.post 成功~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;data = &quot;, data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;status = &quot;, status);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;xhr = &quot;, xhr);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         //data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         $(&quot;#div1&quot;).html(JSON.stringify(data));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         if(&quot;&quot; == data.username)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名不可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// )</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1. 如果你通过jquery发出的ajax请求是get 并且 返回的数据格式是json</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2. 可以直接使用getJSON() 函数，就很简洁</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">getJSON</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;/ajax/checkUserServlet2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:$(<span class="string">&quot;#uname&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">function</span> (<span class="params">data,status,xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;$.getJSON 成功~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data = &quot;</span>, data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;status = &quot;</span>, status);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xhr = &quot;</span>, xhr);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(<span class="string">&quot;&quot;</span> == data.<span class="property">username</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#myres&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;该用户名可用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#myres&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;该用户名不可用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册-Jquery+Ajax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/ajax/checkUserServlet2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;border-width: 0;color: red&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myres&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    电子邮件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>返回的json数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lzw.ajax.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.lzw.ajax.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUserServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个UserService属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//接收jquery发送的ajax数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserByName(username);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">           response.getWriter().write(gson.toJson(user));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            User user1 = new User();</span></span><br><span class="line"><span class="comment">//            user1.setUsername(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//            response.getWriter().write(gson.toJson(user1));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if(&quot;king&quot;.equals(username))&#123;</span></span><br><span class="line"><span class="comment">//            //接入到db</span></span><br><span class="line"><span class="comment">//            User user = new User(100, &quot;king&quot;, &quot;abc&quot;, &quot;king@163.com&quot;);</span></span><br><span class="line"><span class="comment">//            response.getWriter().write(gson.toJson(user));</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            //返回一个不存在的user</span></span><br><span class="line"><span class="comment">//            User user = new User(-1, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="comment">//            response.getWriter().write(gson.toJson(user));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="线程数据共享和安全-ThreadLocal"><a href="#线程数据共享和安全-ThreadLocal" class="headerlink" title="*线程数据共享和安全-ThreadLocal"></a>*线程数据共享和安全-ThreadLocal</h1><h2 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h2><ol><li>ThreadLocal 的作用，可以实现&#x3D;&#x3D;在同一个线程数据共享&#x3D;&#x3D;, 从而解决多线程数据安全问题. 2. ThreadLocal 可以给当前线程关联一个数据(普通变量、对象、数组)set 方法 [源码!]</li><li>ThreadLocal 可以像 Map 一样存取数据，key 为当前线程, get 方法</li><li>每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，就需要使用多个 ThreadLocal 对象实例</li><li>每个 ThreadLocal 对象实例定义的时候，一般为 static 类型</li><li>ThreadLocal 中保存数据，在线程销毁后，会自动释放</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220328163701554.png"> </div> <h2 id="快速入门-4"><a href="#快速入门-4" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T2DAO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//取出线程关联的threadLocal1对象的数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> T1.threadLocal1.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前线程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;在T2DAO的update() 线程是= &quot;</span> + name + <span class="string">&quot; 取出dog=&quot;</span> + o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1Service</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//取出 threadLocal1 关联的对象</span></span><br><span class="line">        <span class="comment">/**解读源码</span></span><br><span class="line"><span class="comment">         * * public T get() &#123;</span></span><br><span class="line"><span class="comment">         *          //1. 先得到当前的线程对象</span></span><br><span class="line"><span class="comment">         *         Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">         *         //2.通过线程获取到对应的ThreadLocalMap</span></span><br><span class="line"><span class="comment">         *         ThreadLocalMap map = getMap(t);</span></span><br><span class="line"><span class="comment">         *         if (map != null) &#123;</span></span><br><span class="line"><span class="comment">         *              //3. 如果map不为空, 根据当前的 threadlocal对象，得到对应的Entry</span></span><br><span class="line"><span class="comment">         *             ThreadLocalMap.Entry e = map.getEntry(this);</span></span><br><span class="line"><span class="comment">         *             //4. 如果e 不为null</span></span><br><span class="line"><span class="comment">         *             if (e != null) &#123;</span></span><br><span class="line"><span class="comment">         *                 <span class="doctag">@SuppressWarnings</span>(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="comment">         *                 //返回当前threadlocal关联的数据value</span></span><br><span class="line"><span class="comment">         *                 T result = (T)e.value;</span></span><br><span class="line"><span class="comment">         *                 return result;</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;</span></span><br><span class="line"><span class="comment">         *         return setInitialValue();</span></span><br><span class="line"><span class="comment">         *     &#125;*</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> T1.threadLocal1.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前线程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;在T1Service的update() 线程name= &quot;</span> + name + <span class="string">&quot; dog= &quot;</span> + o);</span><br><span class="line">        <span class="comment">//调用dao-update</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">T2DAO</span>().update();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line">    <span class="comment">//创建ThreadLocal对象，做成public static.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal1 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal2 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Task 是线程类 -&gt; 内部类 / 线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">            <span class="type">Pig</span> <span class="variable">pig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">            <span class="comment">//给threadLocal1 对象放入set dog , 隔山打牛</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Task 放入了 dog= &quot;</span> + dog);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                解读源码</span></span><br><span class="line"><span class="comment">             public void set(T value) &#123;</span></span><br><span class="line"><span class="comment">                 //1. 获取当前线程, 关联到当前线程!</span></span><br><span class="line"><span class="comment">                 Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">                 //2. 通过线程对象, 获取到ThreadLocalMap</span></span><br><span class="line"><span class="comment">                 //   ThreadLocalMap 类型 ThreadLocal.ThreadLocalMap</span></span><br><span class="line"><span class="comment">                 ThreadLocalMap map = getMap(t);</span></span><br><span class="line"><span class="comment">                 //3. 如果map不为null, 将数据(dog,pig..) 放入map -key:threadLocal value:存放的数据</span></span><br><span class="line"><span class="comment">                 //   从这个源码我们已然看出一个threadlocal只能关联一个数据，如果你set, 就会替换</span></span><br><span class="line"><span class="comment">                 //4. 如果map为null, 就创建一个和当前线程关联的ThreadLocalMap, 并且该数据放入</span></span><br><span class="line"><span class="comment">                 if (map != null)</span></span><br><span class="line"><span class="comment">                    map.set(this, value);</span></span><br><span class="line"><span class="comment">                 else</span></span><br><span class="line"><span class="comment">                    createMap(t, value);</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            threadLocal1.set(dog);</span><br><span class="line">            <span class="comment">//threadLocal1.set(pig);</span></span><br><span class="line">            threadLocal2.set(pig);</span><br><span class="line">            System.out.println(<span class="string">&quot;Task 在run 方法中 线程=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">T1Service</span>().update();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>()).start();<span class="comment">//主线程启动一个新的线程,注意不是主线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><div align="center"> <img src="\images\JavaWeb.assets\image-20220328173610621.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************/</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\JavaWeb.assets\image-20220328173812023.png"> </div> <div align="center"> <img src="\images\JavaWeb.assets\image-20220328173837621.png"> </div> <hr><h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="*文件上传下载"></a>*文件上传下载</h1><h2 id="介绍-22"><a href="#介绍-22" class="headerlink" title="介绍"></a>介绍</h2><ol><li>文件的上传和下载，是常见的功能。</li><li>后面项目就使用了文件上传下载。</li><li>如果是传输大文件，一般用专门工具或者插件</li><li>文件上传下载需要使用到两个包 , 需要导入</li><li>说明:</li></ol><div align="center"> <img src="\images\JavaWeb.assets\image-20220330161244605.png"> </div> <h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h3><img src="E:\VIP\JavaWeb\笔记\JavaWeb.assets\image-20220330162807058.png" alt="image-20220330162807058"  /><div align="center"> <img src="\images\JavaWeb.assets\image-20220330162919197.png"> </div> <h3 id="应用实例-12"><a href="#应用实例-12" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;FileUploadServlet 被调用&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 判断是不是文件表单(enctype=&quot;multipart/form-data&quot;)</span></span><br><span class="line">        <span class="keyword">if</span>(ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line">            <span class="comment">//2. 创建 DiskFileItemFactory 对象, 用于构建一个 解析上传数据的工具 对象</span></span><br><span class="line">            <span class="type">DiskFileItemFactory</span> <span class="variable">diskFileItemFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">            <span class="comment">//3. 创建一个解析上传数据的工具对象</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *     表单提交的数据就是 input 元素</span></span><br><span class="line"><span class="comment">             *     &lt;input type=&quot;file&quot; name=&quot;pic&quot; id=&quot;&quot; value=&quot;2xxx.jpg&quot; onchange=&quot;prev(this)&quot;/&gt;</span></span><br><span class="line"><span class="comment">             *     家居名: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">             *     &lt;input type=&quot;submit&quot; value=&quot;上传&quot;/&gt;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(diskFileItemFactory);</span><br><span class="line">            <span class="comment">//解决接收到文件名是中文乱码</span></span><br><span class="line">            servletFileUpload.setHeaderEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 关键的地方, servletFileUpload 对象可以把表单提交的数据text / 文件</span></span><br><span class="line">            <span class="comment">//   将其封装到 FileItem 文件项中</span></span><br><span class="line">            <span class="comment">//   心得体会: 如果我们不知道一个对象是什么结构[1.输出 2.debug 3. 底层自动看到]</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(request);</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                [name=1.jpg, StoreLocation=D:\Environment\Tomcat\apache-tomcat-8.0.50\temp\xupload_351e9703_17fda038795__7f67_00000000.tmp, size=0bytes, isFormField=false, FieldName=pic,</span></span><br><span class="line"><span class="comment">                // name=null, StoreLocation=D:\Environment\Tomcat\apache-tomcat-8.0.50\temp\xupload_351e9703_17fda038795__7f67_00000001.tmp, size=0bytes, isFormField=true, FieldName=name]</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                 <span class="comment">//System.out.println(&quot;list ==&gt; &quot; + list);</span></span><br><span class="line">                <span class="comment">//遍历，并分别处理</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;fileItem = &quot; + fileItem);</span></span><br><span class="line">                    <span class="comment">//判断是不是一个文件</span></span><br><span class="line">                    <span class="keyword">if</span>(fileItem.isFormField())&#123;<span class="comment">//如果是true就是文本 input text</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fileItem.getString(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;家具名=&quot;</span> + name);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;<span class="comment">//是一个文件</span></span><br><span class="line">                        <span class="comment">//用一个方法</span></span><br><span class="line">                        <span class="comment">//获取上传的文件的名字</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fileItem.getName();</span><br><span class="line">                        System.out.println(<span class="string">&quot;上传的文件名=&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//把这个上传到 服务器的 temp下的文件保存到你指定的目录</span></span><br><span class="line">                        <span class="comment">//1.指定一个目录 , 就是我们网站工作目录下</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>;</span><br><span class="line">                        <span class="comment">//2.获取到完整目录 [io/servlet基础]</span></span><br><span class="line">                        <span class="comment">//  这个目录是和你的web项目运行环境绑定的. 是动态的。</span></span><br><span class="line">                        <span class="comment">// fileRealPath = E:\VIP\JavaWeb\Demo\fileupdown\out\artifacts\fileupdown_war_exploded\xupload\</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileRealPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(filePath);</span><br><span class="line">                        System.out.println(<span class="string">&quot;fileRealPath = &quot;</span> + fileRealPath);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//3. 创建这个上传的目录=&gt; 创建目录?=&gt; Java基础</span></span><br><span class="line">                        <span class="comment">//   我们写一个工具类，可以返回 /2024/11/11 字符串</span></span><br><span class="line">                        <span class="type">File</span> <span class="variable">fileRealPathDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileRealPath + WebUtils.getYearMonthDay());</span><br><span class="line">                        <span class="keyword">if</span>(!fileRealPathDirectory.exists())&#123;<span class="comment">//不存在就创建</span></span><br><span class="line">                            fileRealPathDirectory.mkdirs();<span class="comment">//创建</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//4. 将文件拷贝到fileRealPathDirectory目录</span></span><br><span class="line">                        <span class="comment">//   构建一个上传文件的完整路径 ：目录+文件名</span></span><br><span class="line">                        <span class="comment">//   对上传的文件名进行处理, 前面增加一个前缀，保证是唯一即可, 不错</span></span><br><span class="line">                        name = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> + name;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileFullPath</span> <span class="operator">=</span> fileRealPathDirectory + <span class="string">&quot;/&quot;</span> + name;</span><br><span class="line">                        fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(fileFullPath));</span><br><span class="line">                        <span class="comment">//5.提示信息</span></span><br><span class="line">                        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">                        response.getWriter().write(<span class="string">&quot;上传成功~&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是文件表单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getYearMonthDay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> ldt.getYear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">monthValue</span> <span class="operator">=</span> ldt.getMonthValue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> ldt.getDayOfMonth();</span><br><span class="line">        <span class="type">String</span> <span class="variable">yearMonthDay</span> <span class="operator">=</span> year + <span class="string">&quot;/&quot;</span> + monthValue + <span class="string">&quot;/&quot;</span> + dayOfMonth + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        System.out.println(yearMonthDay);</span><br><span class="line">        <span class="keyword">return</span> yearMonthDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;!-- 指定了base标签 --&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=request.getContextPath()+&quot;</span>/<span class="string">&quot;%&gt;&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">            outline: none;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            background-color: #31B0D5;</span><br><span class="line">            border: none;</span><br><span class="line">            width: 70px;</span><br><span class="line">            height: 35px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            border-radius: <span class="number">50</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input[type=<span class="string">&quot;file&quot;</span>] &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: <span class="number">0</span>;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">            height: 200px;</span><br><span class="line">            opacity: <span class="number">0</span>;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        function <span class="title function_">prev</span><span class="params">(event)</span> &#123;</span><br><span class="line">            <span class="comment">//获取展示图片的区域</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">img</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;prevView&quot;</span>);</span><br><span class="line">            <span class="comment">//获取文件对象</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">file</span> <span class="operator">=</span> event.files[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//获取文件阅读器： Js的一个类，直接使用即可</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">            reader.readAsDataURL(file);</span><br><span class="line">            reader.onload = function () &#123;</span><br><span class="line">                <span class="comment">//给img的src设置图片url</span></span><br><span class="line">                img.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="built_in">this</span>.result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 表单的enctype属性要设置为multipart/form-data</span><br><span class="line">    enctype=<span class="string">&quot;multipart/form-data&quot;</span> 表示提交的数据是多个部分构造，有文件和文本</span><br><span class="line"> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;fileUploadServlet&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    家居图: &lt;img src=<span class="string">&quot;2.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> width=<span class="string">&quot;200&quot;</span> height=<span class="string">&quot;200&quot;</span> id=<span class="string">&quot;prevView&quot;</span>&gt;</span><br><span class="line">    &lt;%--    小伙伴愿意完成自己测试--%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;pic&quot;</span> id=<span class="string">&quot;&quot;</span> value=<span class="string">&quot;&quot;</span> onchange=<span class="string">&quot;prev(this)&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    家居名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-7"><a href="#注意事项和细节-7" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><p>如果将文件都上传到一个目录下，当上传文件很多时，会造成访问文件速度变慢，因此可以将文件上传到不同目录 比如 一天上传的文件，统一放到一个文件夹 年月日, 比如21001010 文件夹</p></li><li><p>一个完美的文件上传，要考虑的因素很多，比如断点续传、控制图片大小，尺寸，分片上传，防止恶意上传等，在项目中，可以考虑使用 WebUploader 组件(百度开发)<a href="http://fex.baidu.com/webuploader/doc/index.html">http://fex.baidu.com/webuploader/doc/index.html</a></p></li><li><p>文件上传功能，在项目中建议有限制的使用，一般用在头像、证明、合同、产品展示等，如果不加限制，会造成服务器空间被大量占用 [比如 b 站评论，就不能传图片，微信发 1次朋友圈最多 9 张图等..]</p></li><li><p>文件上传，创建 web&#x2F;upload 的文件夹，在 tomcat 启动时，没有在 out 目录下 创建 对应的 upload 文件夹, 原因是 tomcat 对应空目录是不会在 out 下创建相应目录的，所以，只需在 upload 目录下，放一个文件即可, 这个是 Idea + Tomcat 的问题, 实际开发不会存在</p></li></ol><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h3><div align="center"> <img src="\images\JavaWeb.assets\image-20220330195348040.png"> </div> <h3 id="应用实例-13"><a href="#应用实例-13" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDownLoadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FileDownLoadServlet 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 先准备要下载的文件[假定这些文件是公共的资源]</span></span><br><span class="line">        <span class="comment">//   重要: 保证当我们的tomcat启动后，在工作目录out下有download文件夹, 并且有可供下载的文件!!</span></span><br><span class="line">        <span class="comment">//   如果你没有看到你创建的download在工作目录out下 rebuild project -&gt; restart, 就OK</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取到要下载的文件的名字</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadFileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;downLoadFileName = &quot;</span> + downLoadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 给http响应，设置响应头 Content-Type , 就是文件的MIME</span></span><br><span class="line">        <span class="comment">//   通过servletContext 来获取</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadPath</span> <span class="operator">=</span> <span class="string">&quot;/download/&quot;</span>;<span class="comment">//下载目录从web工程根目录计算 /download/1.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadFileFullPath</span> <span class="operator">=</span> downLoadPath + downLoadFileName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> servletContext.getMimeType(downLoadFileFullPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;mimeType = &quot;</span> + mimeType);</span><br><span class="line">        response.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 给http响应，设置响应头 Content-Disposition</span></span><br><span class="line">        <span class="comment">//  这里考虑的细节比较多，比如不同的浏览器写法不一样，考虑编辑</span></span><br><span class="line">        <span class="comment">//   ff 是 文件名中文需要 base64, 而 ie/chrome 是 URL编码</span></span><br><span class="line">        <span class="comment">//   这里我们不需要同学们记住，只需知道原理</span></span><br><span class="line">        <span class="comment">//  解读</span></span><br><span class="line">        <span class="comment">//(1)如果是Firefox 则中文编码需要 base64</span></span><br><span class="line">        <span class="comment">//(2)Content-Disposition 是指定下载的数据的展示形式 , 如果attachment 则使用文件下载方式</span></span><br><span class="line">        <span class="comment">//(3)如果是其他(主流ie/chrome) 中文编码使用URL编码</span></span><br><span class="line">        <span class="keyword">if</span> (request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐 Base64编码</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename==?UTF-8?B?&quot;</span> +</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(downLoadFileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他(主流ie/chrome)使用URL编码操作</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> +</span><br><span class="line">                    URLEncoder.encode(downLoadFileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 读取下载的文件数据，返回给客户端/浏览器</span></span><br><span class="line">        <span class="comment">//(1) 创建一个和要下载的文件，关联的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(downLoadFileFullPath);</span><br><span class="line">        <span class="comment">//(2) 得到返回数据的输出流 [因为返回文件大多数是二进制(字节), IO java基础]</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3) 使用工具类，将输入流关联的文件，对拷到输出流，并返回给客户端/浏览器</span></span><br><span class="line">        IOUtils.copy(resourceAsStream, outputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;文件下载&lt;/title&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=request.getContextPath()+&quot;</span>/<span class="string">&quot;%&gt;&gt;&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;文件下载&lt;/h1&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;fileDownLoadServlet?name=1.jpg&quot;</span>&gt;点击下载小狗图片&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;fileDownLoadServlet?name=笔记.pdf&quot;</span>&gt;点击下载 笔记.pdf&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;fileDownLoadServlet?name=高山流水.mp3&quot;</span>&gt;点击下载 高山流水.mp3&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-8"><a href="#注意事项和细节-8" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><p>文件下载，比较麻烦的就是文件名中文处理</p></li><li><p>因此，在代码中，针对不同浏览器做了处理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 火狐 Base64编码</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename==?UTF-8?B?&quot;</span> +</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(downLoadFileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他(主流ie/chrome)使用URL编码操作</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> +</span><br><span class="line">            URLEncoder.encode(downLoadFileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于网站的文件，很多文件使用另存为即可下载，对于大文件(文档，视频)，会使用专业的下载工具(迅雷、百度，腾讯，网盘等)</li><li>对于不同的浏览器, 在把文件下载完毕后，处理的方式不一样, 有些是直接打开文件，有些是将文件下载到 本地&#x2F;下载目录</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/07/23/origin/JavaWeb/"/>
      <url>/2022/07/23/origin/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><h2 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 数字：^[<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line"><span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line"><span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line"><span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line"><span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line"><span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">7</span> 带<span class="number">1</span>-<span class="number">2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"><span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line"><span class="number">11</span> 非零的正整数：^[<span class="number">1</span>-<span class="number">9</span>]\d*$ 或 ^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line"><span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span>-<span class="number">9</span>][]<span class="number">0</span>-<span class="number">9</span><span class="string">&quot;*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br></pre></td></tr></table></figure><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"><span class="number">2</span> 英文和数字：^[A-Za-z0-<span class="number">9</span>]+$ 或 ^[A-Za-z0-<span class="number">9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br><span class="line"><span class="number">3</span> 长度为<span class="number">3</span>-<span class="number">20</span>的所有字符：^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">4</span> 由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"><span class="number">5</span> 由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"><span class="number">6</span> 由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"><span class="number">7</span> 由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0-<span class="number">9</span>]+$</span><br><span class="line"><span class="number">8</span> 由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">9</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line"><span class="number">10</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">11</span> 可以输入含有^%&amp;<span class="string">&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;</span>,;=?$\x22]+</span><br><span class="line"><span class="number">12</span> 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h2 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">3 InternetURL：[a-zA-z]+://[^\s]* 或 ^https://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span><br><span class="line">6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">7 身份证号：</span><br><span class="line">15或18位身份证：^\d&#123;15&#125;|\d&#123;18&#125;$</span><br><span class="line">15位身份证：^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$</span><br><span class="line">18位身份证：^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;4&#125;$</span><br><span class="line">8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span><br><span class="line">9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line">10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$ </span><br><span class="line">12 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span><br><span class="line">15 钱的输入格式：</span><br><span class="line">16 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ </span><br><span class="line">17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </span><br><span class="line">18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </span><br><span class="line">19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span><br><span class="line">20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </span><br><span class="line">21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </span><br><span class="line">24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line">26 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">27 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">29 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">30 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">31 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br><span class="line">32 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</span><br><span class="line">33 IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)</span><br></pre></td></tr></table></figure><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217103122880.png" alt="image-20220217103122880"></p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217103225948.png" alt="image-20220217103225948"> </p><ol><li><p>server.xml 用于配置 tomcat 的基本设置(启动端口，关闭端口, 主机名)</p></li><li><p>web.xml 用于指定 tomcat 运行时配置(比如 servlet 等..)</p></li><li><p>webapps 目录是存放 web 应用，就是网站</p></li></ol><h2 id="catalina-启动-Tomcat"><a href="#catalina-启动-Tomcat" class="headerlink" title="catalina 启动 Tomcat"></a>catalina 启动 Tomcat</h2><h3 id="1-进入到-Tomcat-的-bin-目录下"><a href="#1-进入到-Tomcat-的-bin-目录下" class="headerlink" title="1. 进入到 Tomcat 的 bin 目录下"></a>1. 进入到 Tomcat 的 bin 目录下</h3><h3 id="2-执行命令：-catalina-run"><a href="#2-执行命令：-catalina-run" class="headerlink" title="2. 执行命令： catalina run"></a>2. 执行命令： catalina run</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217103622254.png" alt="image-20220217103622254"></p><h2 id="停止-Tomcat"><a href="#停止-Tomcat" class="headerlink" title="停止 Tomcat"></a>停止 Tomcat</h2><ol><li>点击 tomcat 服务器窗口，直接点击的关闭按钮</li><li>进入 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器(推荐)</li></ol><h2 id="修改-Tomcat-服务端口"><a href="#修改-Tomcat-服务端口" class="headerlink" title="修改 Tomcat 服务端口"></a>修改 Tomcat 服务端口</h2><ol><li>Tomcat 目录下的 conf 目录，修改 server.xml 配置文件</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217104707653.png" alt="image-20220217104707653"></p><ol start="2"><li><a href="http://localhost/">http://localhost</a> , 默 认 是 访 问 80 端 口 , 即 <a href="http://localhost/">http://localhost</a> 等 价<br><a href="http://localhost/">http://localhost:80</a></li></ol><h2 id="Tomcat-服务中部署-WEB-应用"><a href="#Tomcat-服务中部署-WEB-应用" class="headerlink" title="Tomcat 服务中部署 WEB 应用"></a>Tomcat 服务中部署 WEB 应用</h2><p>JavaWeb程序&#x2F;应用&#x2F;工程目录结构</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217111239361.png" alt="image-20220217111239361"></p><h3 id="部署方式1：将-web-工程的目录拷贝到-Tomcat-的-webapps-目录下"><a href="#部署方式1：将-web-工程的目录拷贝到-Tomcat-的-webapps-目录下" class="headerlink" title="部署方式1：将 web 工程的目录拷贝到 Tomcat 的 webapps 目录下"></a>部署方式1：将 web 工程的目录拷贝到 Tomcat 的 webapps 目录下</h3><ol><li>news Web工程(目前都是静态资源 html, 图片)</li><li>将该news目录&#x2F;文件夹 拷贝到 Tomcat 的webapps目录下</li><li>浏览器输入： <a href="http://ip[域名]:port/news/子目录../文件名">http://ip[域名]:port/news/子目录../文件名</a></li></ol><h3 id="部署方式2：通过配置文件来部署-只做介绍"><a href="#部署方式2：通过配置文件来部署-只做介绍" class="headerlink" title="部署方式2：通过配置文件来部署(只做介绍)"></a>部署方式2：通过配置文件来部署(只做介绍)</h3><ol><li>在Tomcat 下的 conf 目录\Catalina\localhost\ 下,配置文件，比如hsp.xml(提醒：知道Tomcat通过配置，可以把一个web应用映射到指定的目录，可以解决磁盘空间分配的问题.)</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217111811795.png" alt="image-20220217111811795"></p><ol start="2"><li>访问web工程: <a href="http://ip[域名]:port/hsp/index.html">http://ip[域名]:port/hsp/index.html</a> 就表示访问 D:\album 目录下的<br>index.html</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217111829250.png" alt="image-20220217111829250"></p><p>ROOT 的工程的访问</p><ol><li>在浏览器地址栏中输入访问地址如下： <a href="http://ip[域名]:port，">http://ip[域名]:port，</a> 没有Web工程&#x2F;应用名时，默认访问的是 ROOT 工程</li><li>在浏览器地址栏中输入的访问地址如下： <a href="http://ip[域名]:port/工程名/">http://ip[域名]:port/工程名/</a> ，没有资源名，默认访问 index.jsp 页面</li></ol><h2 id="浏览器访问-web-服务器文件-UML-时序图"><a href="#浏览器访问-web-服务器文件-UML-时序图" class="headerlink" title="浏览器访问 web 服务器文件 UML 时序图!!!"></a>浏览器访问 web 服务器文件 UML 时序图!!!</h2><p>&#x3D;&#x3D;非常重要！！！&#x3D;&#x3D;</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220217112237523.png" alt="image-20220217112237523"></p><hr><h1 id="三大组件-Servlet"><a href="#三大组件-Servlet" class="headerlink" title="三大组件-Servlet"></a>三大组件-Servlet</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Servlet和Tomcat的关系：&#x3D;&#x3D;Tomcat支持Servlet&#x3D;&#x3D;</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220219101925731.png" alt="image-20220219101925731"></p><p>Servlet 在开发动态 WEB 工程中，得到广泛的应用，掌握好 Servlet 非常重要了, Servlet(基石)是 SpringMVC 的基础</p><p>Servlet(java 服务器小程序)，它的特点:</p><ol><li>他是由服务器端调用和执行的(一句话：是Tomcat解析和执行)</li><li>他是用java语言编写的, 本质就是Java类</li><li>他是按照Servlet规范开发的(除了tomcat-&gt;Servlet weblogic-&gt;Servlet)</li><li>功能强大，可以完成几乎所有的网站功能</li></ol><h2 id="手动开发Servlet"><a href="#手动开发Servlet" class="headerlink" title="手动开发Servlet"></a>手动开发Servlet</h2><ol><li>编写类HelloServlet去实现 Servlet 接口</li><li>实现 service 方法，处理请求，并响应数据</li><li>在 web.xml 中去配置 servlet 程序的访问地址</li></ol><p>注意：要手动添加servlet-api.jar(在tomcat&#x2F;lib下) 到工程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/2/19 10:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.初始化 servlet</span></span><br><span class="line"><span class="comment">     * 2.当创建HelloServlet 实例时，会调用init方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init() 被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回ServletConfig 也就是返回Servlet的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.service方法处理浏览器的请求（包括get/post）</span></span><br><span class="line"><span class="comment">     * 2.当浏览器每次请求Servlet时，就会调用一次service方法</span></span><br><span class="line"><span class="comment">     * 3.当tomcat调用该方法时，会把http请求的数据封装成实现了ServletRequest接口的request对象</span></span><br><span class="line"><span class="comment">     * 4.通过servletRequest 对象，可以得到用户提交的数据</span></span><br><span class="line"><span class="comment">     * 5. servletResponse 对象可以用于返回数据给Tomcat-&gt;浏览器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回servlet信息，使用较少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.该方法是在servlet销毁时，被调用</span></span><br><span class="line"><span class="comment">     * 2.只会调用一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;destroy 调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注释小技巧--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意</span></span><br><span class="line"><span class="comment">        1.servlet-name：给Servlet取名，该名字唯一</span></span><br><span class="line"><span class="comment">        2.servlet-class：Servlet的类的全路径：Tomcat在反射生成该Servlet需要使用</span></span><br><span class="line"><span class="comment">        3.url-pattern：这个就是该servlet访问的url的配置（路径）</span></span><br><span class="line"><span class="comment">        4.这时应该这样访问：http://localhost:8080/servlet/helloServlet</span></span><br><span class="line"><span class="comment">        5.url-pattern 取名是程序员决定的，/不要丢</span></span><br><span class="line"><span class="comment">6.load-on-startup 表示在tomcat 启动时，会自动的加载servlet实例</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="浏览器调用Servlet流程"><a href="#浏览器调用Servlet流程" class="headerlink" title="浏览器调用Servlet流程"></a>浏览器调用Servlet流程</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220219114712452.png" alt="image-20220219114712452"></p><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220219121322087.png" alt="image-20220219121322087"></p><ol><li>init()初始化阶段</li><li>service()处理浏览器请求阶段</li><li>destroy()终止阶段</li></ol><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>Servlet 容器(比如: Tomcat)加载 Servlet，加载完成后，Servlet 容器会创建一个 Servlet 实例并调用 init()方法，init()方法只会调用一次, Servlet 容器在下面的情况装载 Servlet：</p><ol><li>Servlet 容器(Tomcat)启动时自动装载某些 servlet，实现这个需要在 web.xml 文件中添加<br><load-on-startup>1</load-on-startup> 1 表示装载的顺序</li><li>在 Servlet 容器启动后，浏览器首次向 Servlet 发送请求(这个前面说过)</li><li>Servlet 重新装载时(比如 tomcat 进行 redeploy【redeploy 会销毁所有的 Servlet 实例】)，<br>浏览器再向 Servlet 发送请求的第 1 次</li></ol><h3 id="处理浏览器请求阶段-service-方法"><a href="#处理浏览器请求阶段-service-方法" class="headerlink" title="处理浏览器请求阶段(service 方法)"></a>处理浏览器请求阶段(service 方法)</h3><ol><li>每收到一个 http 请求，服务器就会产生一个新的线程去处理[线程]</li><li>创建一个用于封装 HTTP 请求消息的 ServletRequest 对象和一个代表 HTTP 响应消息的<br>ServletResponse 对象</li><li>然后调用 Servlet 的 service()方法并将请求和响应对象作为参数传递进去</li></ol><h3 id="终止阶段-destory-方法-体现-Servlet-完整的生命周期"><a href="#终止阶段-destory-方法-体现-Servlet-完整的生命周期" class="headerlink" title="终止阶段 destory 方法(体现 Servlet 完整的生命周期)"></a>终止阶段 destory 方法(体现 Servlet 完整的生命周期)</h3><p>当 web 应用被终止，或者 Servlet 容器终止运行，或者 Servlet 类重新装载时，会调用destroy()<br>方法</p><h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220219173331414.png" alt="image-20220219173331414"></p><h2 id="Servlet注意事项和细节"><a href="#Servlet注意事项和细节" class="headerlink" title="Servlet注意事项和细节"></a>Servlet注意事项和细节</h2><ol><li>Servlet 是一个供其他 Java 程序（Servlet 引擎）调用的 Java 类，不能独立运行。</li><li>针对浏览器的多次 Servlet 请求，通常情况下，服务器只会创建一个 Servlet 实例对象，<br>也就是说 Servlet 实例对象一旦创建，它就会驻留在内存中，为后续的其它请求服务，直至<br>web 容器退出&#x2F;或者 redeploy 该 web 应用，servlet 实例对象才会销毁。</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220219213907606.png" alt="image-20220219213907606"></p><ol start="3"><li><p>在 Servlet 的整个生命周期内，init 方法只被调用一次。而对每次请求都导致 Servlet 引<br>擎调用一次 servlet 的 service 方法。</p></li><li><p>对于每次访问请求，Servlet 引擎都会创建一个新的 HttpServletRequest 请求对象和一个<br>新的 HttpServletResponse 响应对象，然后将这两个对象作为参数传递给它调用的 Servlet<br>的 service()方法，service 方法再根据请求方式分别调用 doXXX 方法。</p></li><li><p>如果在<servlet>元素中配置了一个<load-on-startup>元素，那么 WEB 应用程序在启动时，<br>就会装载并创建 Servlet 的实例对象、以及调用 Servlet 实例对象的 init()方法。</p></li></ol><h2 id="Servlet注解方式"><a href="#Servlet注解方式" class="headerlink" title="Servlet注解方式"></a>Servlet注解方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/2/21 8:25</span></span><br><span class="line"><span class="comment"> * 注解方式来配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@WebServlet</span> 是一个注解</span></span><br><span class="line"><span class="comment"> * 2. <span class="doctag">@WebServlet</span> 源码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Retention</span>(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Documented</span> =&gt; 在javadoc工具生成文档有记录</span></span><br><span class="line"><span class="comment"> * public <span class="doctag">@interface</span> WebServlet &#123;</span></span><br><span class="line"><span class="comment"> *     String name() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String[] value() default &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String[] urlPatterns() default &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     int loadOnStartup() default -1;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     WebInitParam[] initParams() default &#123;&#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     boolean asyncSupported() default false;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String smallIcon() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String largeIcon() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String description() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     String displayName() default &quot;&quot;;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 3. urlPatterns 对应web.xml 的 &lt;url-pattern&gt;&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment"> * 4. &#123;&quot;/ok1&quot;, &quot;/ok2&quot;&#125; 可以给OkServlet配置多个 url-pattern</span></span><br><span class="line"><span class="comment"> * 5. 相当于 <span class="doctag">@WebServlet</span>(urlPatterns = &#123;&quot;/ok1&quot;, &quot;/ok2&quot;&#125;) 代替了web.xml的配置</span></span><br><span class="line"><span class="comment"> *    底层使用了 反射+注解+IO+集合 来完成一个支撑</span></span><br><span class="line"><span class="comment"> * 6. 浏览器可以这样访问OkServlet时，http://localhost:8080/servlet/ok1</span></span><br><span class="line"><span class="comment"> *    或 http://localhost:8080/servlet/ok2</span></span><br><span class="line"><span class="comment"> * 7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/ok1&quot;, &quot;/ok2&quot;&#125;, loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解 init()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解 doPost()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解 doGet()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Servlet-urlPattern-配置"><a href="#Servlet-urlPattern-配置" class="headerlink" title="Servlet urlPattern 配置"></a>Servlet urlPattern 配置</h2><h3 id="1-精确匹配"><a href="#1-精确匹配" class="headerlink" title="1.精确匹配"></a>1.精确匹配</h3><p>配置路径 : @WebServlet(“&#x2F;ok&#x2F;zs”)</p><p>访问 servlet: localhost:8080&#x2F;servlet&#x2F;ok&#x2F;zs</p><h3 id="2-目录匹配"><a href="#2-目录匹配" class="headerlink" title="2.目录匹配"></a>2.目录匹配</h3><p>配置路径 : @WebServlet(“&#x2F;ok&#x2F;*”)</p><p>访问文件: localhost:8080&#x2F;servlet&#x2F;ok&#x2F;aaa localhost:8080&#x2F;servlet&#x2F;ok&#x2F;bbb</p><h3 id="3-扩展名匹配"><a href="#3-扩展名匹配" class="headerlink" title="3.扩展名匹配"></a>3.扩展名匹配</h3><p>配置路径 : @WebServlet(“**.action”)*</p><p>访问文件: localhost:8080&#x2F;hsp&#x2F;zs.action localhost:8080&#x2F;hsp&#x2F;ls.action</p><p>提示: @WebServlet(“&#x2F;*.action”) , 不能带 &#x2F; , 否则 tomcat 报错</p><h3 id="4-任意匹配"><a href="#4-任意匹配" class="headerlink" title="4.任意匹配"></a>4.任意匹配</h3><p>配置路径 : @WebServlet(“&#x2F;“) @WebServlet(“&#x2F;*”)</p><p>访问文件: localhost:8080&#x2F;hsp&#x2F;aaa localhost:8080&#x2F;hsp&#x2F;bbb localhost:8080&#x2F;hsp&#x2F;ccc</p><p>提示：&#x2F; 和 &#x2F;*的配置，会匹配所有的请求，这个比较麻烦，要避免</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、当 Servlet 配置了 “&#x2F;“, 会覆盖 tomcat 的 DefaultServlet, 当其他的 utl-pattern 都匹配不上时，都会走这个Servlet，这样可以拦截到其他静态资源。</p><p>2、当 Servelt 配置了 “&#x2F;*”, 表示可以匹配任意访问路径</p><p>3、提示: 建议不要使用 &#x2F; 和 &#x2F;*， 建议尽量使用精确匹配</p><p>4、优先级遵守: 精确路径 &gt; 目录路径 &gt; 扩展名路径 &gt; &#x2F;* &gt; &#x2F;</p><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.ServletConfig 类是为 Servlet 程序的配置信息的类</p><p>2.Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建</p><p>3.Servlet 程序默认是第 1 次访问的时候创建，ServletConfig 在 Servlet 程序创建时，就创建一个对应的 ServletConfig对象</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1.获取 Servlet 程序的 servlet-name 的值</p><p>2.获取初始化参数 init-param</p><p>3.获取 ServletContext 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.DBServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置信息，而不是硬编码到程序--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pwd<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/db<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 当DBServlet对象初始化时，tomcat会同时创建一个 ServletConfig对象</span></span><br><span class="line"><span class="comment">     * 2. 这是如果DBServlet init() 方法中你调用 super.init(config);</span></span><br><span class="line"><span class="comment">     * 3. 调用父类</span></span><br><span class="line"><span class="comment">     * public void init(ServletConfig config) throws ServletException &#123;</span></span><br><span class="line"><span class="comment">     *         this.config = config;</span></span><br><span class="line"><span class="comment">     *         this.init();</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     *     这时就会把 Tomcat创建的ServletConfig对象赋给GenericServlet的属性 config</span></span><br><span class="line"><span class="comment">     * 4. 因此如果你重写init()方法，如果你想在其他方法通过 getServletConfig() 获取ServletConfig</span></span><br><span class="line"><span class="comment">     * 有一定记住，要调用 super.init(config);</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span> + config);</span><br><span class="line">        <span class="built_in">super</span>.init(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//在 DBServlet 执行 doGet()/doPost() 时，可以获取到 web.xml 配置的用户名和密码</span></span><br><span class="line">        <span class="comment">//DBServlet的父类GenericServlet有getServletConfig()</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. getServletConfig() 方法是 GenericServlet</span></span><br><span class="line"><span class="comment">         * 2. 返回的 servletConfig 对象是 private transient ServletConfig config</span></span><br><span class="line"><span class="comment">         * 3. 当一个属性被 transient 修饰，表示该属性不会被串行化(有些重要信息，不希望保存到文件)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line">        System.out.println(servletConfig);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数username = &quot;</span>  + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数pwd = &quot;</span>  + pwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>1.ServletContext 是一个接口，它表示 Servlet 上下文对象</p><p>2.一个 web 工程，只有一个 ServletContext 对象实例</p><p>3.ServletContext 对象 是在 web 工程启动的时候创建，在 web 工程停止的时候销毁</p><p>4.ServletContext 对象可以通过 ServletConfig.getServletContext 方法获得对 ServletContext对象的引用，也可以通过 this.getServletContext()来获得其对象的引用。</p><p>5.由于一个 WEB 应用中的所有 Servlet 共享同一个 ServletContext 对象，因此 Servlet 对象之间可以通过 ServletContext对象来实现多个 Servlet 间通讯。ServletContext 对象通常也被称之为域对象。</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220224092941224.png" alt="image-20220224092941224"></p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>1.获取 web.xml 中配置的上下文参数 context-param [信息和整个 web 应用相关，而不是属于某个 Servlet]</p><p>2.获取当前的工程路径，格式: &#x2F;工程路径 &#x3D;》 比如 &#x2F;servlet</p><p>3.获 取 工 程 部 署 后 在 服 务 器 硬 盘 上 的 绝 对 路 径 ( 比如：D:\lzw_javaweb\servlet\out\artifacts\servlet_war_exploded）</p><p>4.像 Map 一样存取数据, 多个 Servlet 共享数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContext_<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.servletcontext.ServletContext_<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContext_<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletContext_<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置整个网站的信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>website<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://www.lzw.net<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>company<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>巴拉巴拉<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.servletcontext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContext_</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取web.xml的context-parameter</span></span><br><span class="line">        <span class="comment">//1.获取到ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">//2.获取website</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">website</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;website&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;company&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取项目的工程路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext.getContextPath();</span><br><span class="line">        <span class="comment">//4.获取项目发布后 真正的工作路径</span></span><br><span class="line">        <span class="comment">// &quot;/&quot; 表示我们的项目(发布后)的根路径 E:\VIP\JavaWeb\Demo\servlet\out\artifacts\servlet_war_exploded</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;项目发布后的绝对路径 = &quot;</span> + realPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;项目路径 = &quot;</span> + contextPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;website = &quot;</span> + website);</span><br><span class="line">        System.out.println(<span class="string">&quot;company = &quot;</span> + company);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="HttpServletRequest-Servlet"><a href="#HttpServletRequest-Servlet" class="headerlink" title="HttpServletRequest(Servlet)"></a>HttpServletRequest(Servlet)</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><ol><li>HttpServletRequest 对象代表客户端的请求</li><li>当客户端&#x2F;浏览器通过 HTTP 协议访问服务器时，HTTP 请求头中的所有信息都封装在这个对象中</li><li>通过这个对象的方法，可以获得客户端信息。</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>1.getRequestURI() 获取请求的资源路径 <a href="http://localhost:8080/servlet/loginServlet">http://localhost:8080/servlet/loginServlet</a></p><p>2.getRequestURL() 获取请求的统一资源定位符（绝对路径）<a href="http://localhost:8080/servlet/loginServlet">http://localhost:8080/servlet/loginServlet</a></p><p>3.getRemoteHost() 获取客户端的 主机, getRemoteAddr()</p><p>4.getHeader() 获取请求头</p><p>5.getParameter() 获取请求的参数</p><p>6.getParameterValues() 获取请求的参数（多个值的时候使用） , 比如 checkbox, 返回的是数组</p><p>7.getMethod() 获取请求的方式 GET 或 POST</p><p>8.setAttribute(key, value); 设置域数据</p><p>9.getAttribute(key); 获取域数据</p><p>10.getRequestDispatcher() 获取请求转发对象, 请求转发的核心对象</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet/requestMethods&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    u:　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    p:　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    选择你喜欢的老师:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lls&quot;</span>&gt;</span>罗老师</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lx&quot;</span>&gt;</span>罗翔</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>苍老师<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册用户&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletRequestMethods</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//使用request对象，获取表单提交的各种数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HttpServletRequestMethods doPost() 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">/***********************************</span></span><br><span class="line"><span class="comment">         *  获取和http请求头相关信息</span></span><br><span class="line"><span class="comment">         ***********************************/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的资源路径URI= &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="comment">//http://主机/uri</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的统一资源定位符（绝对路径）URL= &quot;</span> + request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求的客户端ip 地址= &quot;</span> + request.getRemoteAddr());<span class="comment">//本地就是127.0.0.1</span></span><br><span class="line">        <span class="comment">//思考题：如发现某个ip 在10s中，访问的次数超过 100次，就封ip</span></span><br><span class="line">        <span class="comment">//实现思路： 1用一个集合concurrentHashmap[ip:访问次数] 2[线程/定时扫描] 3 做成处理</span></span><br><span class="line">        <span class="comment">// 获取http请求头的信息，可以指定其他，比如 User-Agent , Host等待</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http请求头HOST= &quot;</span> + request.getHeader(<span class="string">&quot;Host&quot;</span>));</span><br><span class="line">        <span class="comment">// 说明，如果我们希望得到请求的头的相关信息，可以使用request.getHeader(&quot;请求头字段&quot;)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的发起地址是=&quot;</span> + request.getHeader(<span class="string">&quot;Referer&quot;</span>));</span><br><span class="line">        <span class="comment">// 请获取访问网站的浏览器是什么？</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;User-Agent= &quot;</span> + userAgent);</span><br><span class="line">        <span class="comment">// 取出 Chrome, 取出最后</span></span><br><span class="line">        String[] s = userAgent.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;浏览器 = &quot;</span> + s[s.length-<span class="number">1</span>].split(<span class="string">&quot;\\/&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        <span class="comment">//JSESSIONID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cookie</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Cookie&quot;</span>);</span><br><span class="line">        String cs[] = cookie.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = cs[<span class="number">1</span>].toCharArray();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;取出JSESSIONID: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i] == (<span class="number">59</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(chars[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主要是Get / Post</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http请求方式~= &quot;</span> + request.getMethod());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***********************************</span></span><br><span class="line"><span class="comment">         *  获取和请求参数相关信息, 注意要求在返回数据前，获取参数</span></span><br><span class="line"><span class="comment">         ***********************************/</span></span><br><span class="line">        <span class="comment">//解决接收参数的中文乱码问题, 老师提示，写在 getParameter前.</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取表单的数据[单个数据]</span></span><br><span class="line">        <span class="comment">//username=tom&amp;pwd=&amp;hobby=hsp&amp;hobby=spls</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取表单一组数据</span></span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;pwd = &quot;</span> + pwd);</span><br><span class="line">        <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hobby = &quot;</span> + hobby);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回接收到的信息，给浏览器回显</span></span><br><span class="line">        <span class="comment">//本质就是在http响应头，加上 Content-Type: text/html;charset=utf-8</span></span><br><span class="line">        <span class="comment">//说 text/html 表示返回的数据类型，浏览器会根据这个类型来解析数据</span></span><br><span class="line">        <span class="comment">// text/plain 表示返回的数据，请浏览器使用文本方式解析</span></span><br><span class="line">        <span class="comment">// application/x-tar 表示返回的是文件，浏览器就会以下载文件的方式处理</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;提交的用户名 = &quot;</span> +  username);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><p>1.获取 doPost 参数中文乱码解决方案 , 注意 setCharacterEncoding(“utf-8”) 要写在request.getParameter()前</p><p>2.注意：如果通过 PrintWriter writer, 有返回数据给浏览器，建议将获取参数代码写在writer.print() 之前，否则可能获取不到参数值(doPost)</p><p>3.处理 http 响应数据中文乱码问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本质就是在http响应头，加上 Content-Type: text/html;charset=utf-8</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><h3 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h3><p>实际开发中，往往业务比较复杂，需要在一次请求中，使用到多个 Servlet 完成一个任务(Servlet 链, 流水作业) 如图</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220301091705216.png" alt="image-20220301091705216"></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>实现请求转发：请求转发指一个 web 资源收到客户端请求后，通知服务器去调用另外一个 web 资源进行处理</li><li>HttpServletRequest 对象(也叫 Request 对象)提供了一个 getRequestDispatcher 方法，该方法返回一个 RequestDispatcher 对象，调用这个对象的 forward 方法可以实现请求转发</li><li>request 对象同时也是一个域对象，开发人员通过 request 对象在实现转发时，把数据通过 request 对象带给其它 web 资源处理</li></ol><h3 id="实现请求转发"><a href="#实现请求转发" class="headerlink" title="实现请求转发"></a>实现请求转发</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220301091852148.png" alt="image-20220301091852148"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet/checkServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    u: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CheckServlet 被调用&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户名来确定该用户是什么身份</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">//注意如果是同一个request对象，那么可以在不同的servlet中，是 getParameter</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tom&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//分配</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;普通用户&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分发器</span></span><br><span class="line">        <span class="comment">// 1. /managerServlet 写的是要转发的servlet的url</span></span><br><span class="line">        <span class="comment">// 2. / 会被解析成 /servlet</span></span><br><span class="line">      <span class="comment">// 3. forward(request, response) 表示把当前servlet的request对象和response对象，传递给下一个servlet使用</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/managerServlet&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerServlet 被调用&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> (String)request.getAttribute(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">//输出信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;用户名：&quot;</span> + username + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        writer.print(<span class="string">&quot;角色：&quot;</span> + role);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>浏览器地址不会变化(地址会保留在第 1 个 servlet 的 url)</p></li><li><p>在同一次 HTTP 请求中，进行多次转发，仍然是一次 HTTP 请求</p></li><li><p>在同一次 HTTP 请求中，进行多次转发，多个 Servlet 可以共享 request 域&#x2F;对象的数据(因为始终是同一个 request 对象)</p></li><li><p>可以转发到 WEB-INF 目录下</p></li><li><p>不能访问当前 WEB 工程外的资源</p></li><li><p>因为浏览器地址栏会停止在第一个 servlet ,如果你刷新页面，会再次发出请求(并且会带数据), 所以在支付页面情况下，不要使用请求转发，否则会造成重复支付</p></li></ol><hr><h1 id="HttpServletResponse-Servlet"><a href="#HttpServletResponse-Servlet" class="headerlink" title="HttpServletResponse(Servlet)"></a>HttpServletResponse(Servlet)</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><ol><li>每次 HTTP 请求，Tomcat 会创建一个 HttpServletResponse 对象传递给 Servlet 程序去使用。</li><li>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，如果需要设置返回给客户端的信息，通过 HttpServletResponse 对象来进行设置即可。</li></ol><h2 id="向客户端返回数据方法"><a href="#向客户端返回数据方法" class="headerlink" title="向客户端返回数据方法"></a>向客户端返回数据方法</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220301195412155.png" alt="image-20220301195412155"></p><ol><li>字节流 getOutputStream(); 常用于下载（处理二进制数据）</li><li>字符流 getWriter(); 常用于回传字符串</li><li>(细节：)两个流同时只能使用一个。 使用了字节流，就不能再使用字符流，反之亦然，否则就会报错</li></ol><h2 id="向客户端返回数据实例"><a href="#向客户端返回数据实例" class="headerlink" title="向客户端返回数据实例"></a>向客户端返回数据实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseServlet_</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException &#123;</span><br><span class="line">        <span class="comment">/*  :</span></span><br><span class="line"><span class="comment">        1. setContentType 会设置服务器和客户端都用 utf-8 字符集，还设置了响应头</span></span><br><span class="line"><span class="comment">        2. setContentType 要在获取流对象(getWriter)之前调用才有效</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;hello, world~&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;hi, LiAng&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><p>1.处理中文乱码问题-方案1</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220301203616954.png" alt="image-20220301203616954"></p><p>2.处理中文乱码问题-方案2</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220301203628158.png" alt="image-20220301203628158"></p><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ol><li>请求重定向指：一个 web 资源收到客户端请求后，通知客户端去访问另外一个 web资源，这称之为请求重定向</li><li>请求重定向原理示意图<img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220301203730411.png" alt="image-20220301203730411"></li></ol><h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//完成了自己的业务</span></span><br><span class="line">        <span class="comment">//发出请求重定向 -&gt;</span></span><br><span class="line">        <span class="comment">//1. sendRedirect 本质就会 返回 302状态码 Location; /servlet/downServletNew</span></span><br><span class="line">        <span class="comment">//2. 因此 302 和 /servlet/downServletNew 是浏览器解析，而不是服务器</span></span><br><span class="line">        <span class="comment">//3. 浏览器在解析 /servlet/downServletNew =&gt; http://localhost:8080/servlet/downServletNew</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> getServletContext().getContextPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPath = &quot;</span> + contextPath);</span><br><span class="line"><span class="comment">//        response.sendRedirect(&quot;/servlet/downServletNew&quot;);</span></span><br><span class="line">        response.sendRedirect(contextPath + <span class="string">&quot;/downServletNew&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种重定向的写法</span></span><br><span class="line"><span class="comment">//        response.setStatus(302); //设置http响应的状态码</span></span><br><span class="line"><span class="comment">//        //设置http响应的Location ：/servlet/downServletNew</span></span><br><span class="line"><span class="comment">//        response.setHeader(&quot;Location&quot;, &quot;/servlet/downServletNew&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownServletNew</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DownServletNew 被调用&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/x-tar;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>最佳应用场景：网站迁移，比如原域名是 <a href="http://www.hsp.com/">www.hsp.com</a> 迁移到 <a href="http://www.hsp.cn/">www.hsp.cn</a> ，但是百度抓取的还是原来网址. </li><li>浏览器地址会发生变化，本质是两次 http 请求. </li><li>不能共享 Request 域中的数据，本质是两次 http 请求，会生成两个 HttpServletRequest对象</li><li>不能重定向到 &#x2F;WEB-INF 下的资源</li><li>可以重定向到 Web 工程以外的资源， 比如 到 <a href="http://www.baidu.com/">www.baidu.com</a> 【在前面的案例演示】</li><li>重定向有两种方式, 推荐使用前者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/servlet/downServletNew&quot;</span>);</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">response.setStatus(<span class="number">302</span>); <span class="comment">//设置http响应的状态码</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;/servlet/downServletNew&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="7"><li>动态获取到 application context</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> getServletContext().getContextPath();</span><br><span class="line">      System.out.println(<span class="string">&quot;contextPath = &quot;</span> + contextPath);</span><br><span class="line">      response.sendRedirect(contextPath + <span class="string">&quot;/downServletNew&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>超文本传输协议(HTTP，HyperText Transfer Protocol)是互联网上应用广泛的一种网络协议。是工作在 tcp&#x2F;ip 协议基础上的,所有的 WWW 文件都遵守这个标准。</p></li><li><p>http1.0 短连接 http1.1 长连接</p></li><li><p>http 是 TCP&#x2F;IP 协议的一个应用层协议,http 也是我们 web 开发的基础</p></li></ol><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>1.form标签method&#x3D;get；2.a标签；3.link标签引入css；4.script标签引入js文件；5.img标签引入图片；</p><p>6.iframe引入html页面；7.在浏览器地址栏中输入地址后敲回车</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220223211412046.png"></p><p>&#x3D;&#x3D;Get与Post传输数据大小的区别&#x3D;&#x3D;</p><p>1.get传送的数据量较小。不能大于2kb（不同浏览器不一样）</p><p>2.post传送的数据量较大。一般默认不受限制。</p><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>1.form标签method&#x3D;post；</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220223211519127.png" alt="image-20220223211519127"></p><p>建议：(1)GET方式的安全性较POST方式要差。包括机密信息的话。建议用POST数据提交方式；</p><p>(2)数据查询时，建议用GET。数据加入、改动或删除时，建议用POST方式。</p><h2 id="HTTP响应包"><a href="#HTTP响应包" class="headerlink" title="HTTP响应包"></a>HTTP响应包</h2><p>由响应行、响应头、响应体三部分组成。</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220223212341065.png" alt="image-20220223212341065"></p><hr><h1 id="WEB工程路径"><a href="#WEB工程路径" class="headerlink" title="WEB工程路径"></a>WEB工程路径</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="创建-index-html"><a href="#创建-index-html" class="headerlink" title="创建 index.html"></a>创建 index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>base 标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册用户~~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 可以看到，我们原来的访问一个web资源的路径非常的麻烦</span></span><br><span class="line"><span class="comment">    2. 目前我们访问的是 ok的资源</span></span><br><span class="line"><span class="comment">    3. 我们可以使用相对路径来解决</span></span><br><span class="line"><span class="comment">    4. http://localhost:8080/webpath/ok =&gt; ok</span></span><br><span class="line"><span class="comment">    5. 如果你action=&quot;ok&quot; 等价 http://localhost:8080/webpath/ok</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/webpath/ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    u:　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册用户&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>讨论区~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/webpath/ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    讨论内容:　<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发布讨论&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>回复区~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/webpath/ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    回复内容:　<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回复&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>​使用相对路径来解决， 一个非常重要的规则：页面所有的相对路径，在默认情 况下，都会参考当前浏览器地址栏的路径 <code>http://ip:port/工程名/</code> + 资源来进行跳转。所以我们可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;ok&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220625090140553.png" alt="image-20220625090140553"></p><h3 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li><p>base 标签是 HTML 语言中的基准网址标记，它是一个单标签，位于网页头部文件的 head 标签内。</p></li><li><p>一个页面最多只能使用一个 base 元素，用来提供一个指定的默认目标，是一种表达路径和连接网址的标记。</p></li><li><p>常见的 url 路径形式分别有相对路径与绝对路径，如果 base 标签指定了目标，浏览器 将通过这个目标来解析当前文档中的所有相对路径，包括的标签有（a、img、link、form）。</p></li><li><p>也就是说，浏览器解析时会在路径前加上 base 给的目标，而页面中的相对路径也都转 换成了绝对路径。使用了 base 标签就应带上 href 属性和 target 属性。</p></li></ol><h4 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例"></a>应用实例</h4><h5 id="创建-web-a-html"><a href="#创建-web-a-html" class="headerlink" title="创建 web\a.html"></a>创建 web\a.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>a.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是a.html~~~~~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相对路径</span></span><br><span class="line"><span class="comment">    1. href=&quot;d1/d2/b.html&quot; 等价于 http://localhost:8080/项目名/d1/d2/b.html</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;d1/d2/b.html&quot;</span>&gt;</span>跳转到/d1/d2/b.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 在实际开发中，往往不是直接访问一个资源的而是在服务端进行转发或者重定向来访问资源</span></span><br><span class="line"><span class="comment">2. 演示转发定位 b.html</span></span><br><span class="line"><span class="comment">3. href=&quot;servlet03&quot; http://localhost:8080/webpath/servlet03</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet03&quot;</span>&gt;</span>转发到/d1/d2/b.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建-web-d1-d2-b-html"><a href="#创建-web-d1-d2-b-html" class="headerlink" title="创建 web\d1\d2\b.html"></a>创建 web\d1\d2\b.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>b.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1. 如果没有&lt;base href=&quot;http://localhost:8080/hspedu_servlet/&quot;&gt;</span></span><br><span class="line"><span class="comment">        2. 当点击 返回a.html 超链接，将会以当前浏览器的地址为路径来确定 路径</span></span><br><span class="line"><span class="comment">        3. 如果增加了&lt;base href=&quot;http://localhost:8080/hspedu_servlet/&quot;&gt;</span></span><br><span class="line"><span class="comment">        4. 将以 base 指定的href的地址为路径，来确定 超链接的路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;base href=&quot;http://localhost:10000/hspedu_servlet/&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简写形式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用base 标签搞定</span></span><br><span class="line"><span class="comment">    1. 下面写的 base href=&quot;http://localhost:8080/webpath/&quot;</span></span><br><span class="line"><span class="comment">    2. 表示的含义就是当前这个页面的访问所有资源都是以 http://localhost:8080/webpath/ 参照</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;base href=&quot;http://localhost:8080/webpath/&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面的写法可以简化一把--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1. base 标签是哪个在解析? =&gt; 浏览器</span></span><br><span class="line"><span class="comment">        2. 浏览器在解析 第一个 /时候，会解析成 http://localhost:8080/</span></span><br><span class="line"><span class="comment">        3. 浏览器 href=&quot;/webpath/&quot; =解析=&gt; href=&quot;http://localhost:8080/webpath/&quot;</span></span><br><span class="line"><span class="comment">        4. 浏览器 &lt;a href=&quot;a.html&quot;&gt;返回a.html~&lt;/a&gt; , 参考 base =&gt; 最后</span></span><br><span class="line"><span class="comment">          href=&quot;http://localhost:8080/webpath/a.html&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/webpath/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是/d1/d2/b.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 返回a.html =&gt; 使用前面的相对路径http://localhost:8080/webpath/d1/d2/</span></span><br><span class="line"><span class="comment">    2. ../../a.html =&gt; http://localhost:8080/webpath/a.html</span></span><br><span class="line"><span class="comment">    3. 相对路径会让这个项目相互调用的关系变得复杂</span></span><br><span class="line"><span class="comment">    4. 使用base 标签搞定</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;a href=&quot;../../a.html&quot;&gt;返回a.html~&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;a.html&quot;</span>&gt;</span>返回a.html~<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建-Serlvet03-java"><a href="#创建-Serlvet03-java" class="headerlink" title="创建 Serlvet03.java"></a>创建 Serlvet03.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet03</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//这里我们希望通过转发来定位b.html</span></span><br><span class="line">        <span class="comment">//1.在服务器端 解析第一个 / 时，会被解析成 http://ip:port/项目名</span></span><br><span class="line">        <span class="comment">//2. &quot;/d1/d2/b.html&quot; =&gt;  被解析成 http://ip:port/项目名/d1/d2/b.html</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/d1/d2/b.html&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="comment">//3. 在服务器进行转发时，没有/就按照默认的方式参考定位 http://ip:port/项目名</span></span><br><span class="line">        <span class="comment">//建议使用上面的</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher(&quot;d1/d2/b.html&quot;).forward(request, response);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项和细节-2"><a href="#注意事项和细节-2" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><ol><li>Web 工程的相对路径和绝对路径</li></ol><p>​（1）相对路径：<code>.</code>表示当前目录，<code>..</code>表示上一级目录，资源名 表示 当前目录&#x2F;资源名</p><p>​（2）绝对路径：<a href="http://ip:port/工程路径/资源路径">http://ip:port/工程路径/资源路径</a></p><ol start="2"><li><p>在实际开发中，路径都使用<strong>绝对路径</strong>，而不是相对路径。</p></li><li><p>在 web 中 &#x2F; 斜杠 如果被浏览器解析，得到的地址是：<code>http://ip[域名]:port/ </code> </p><p>比如: <code>&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;</code></p></li><li><p>在 web 中 &#x2F; 斜杠 如果被服务器解析，得到的地址是：<code>http://ip[域名]:port/工程路径/</code>， 你也可以理解成 &#x2F;工程路径&#x2F; 下面的几种情况就是如此</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) &lt;url-pattern&gt;/servelturl&lt;/url-pattern&gt;</span><br><span class="line">(2) servletContext.getRealPath(&quot;/&quot;); ==&gt; 是得到执行路径/工作路径</span><br><span class="line">(3) request.getRequestDispatcher(&quot;/&quot;);</span><br></pre></td></tr></table></figure><ol start="5"><li>在 javaWeb 中 路径最后带 &#x2F; 和 不带 &#x2F; 含义不同，一定要小心</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/a/servlet03&quot;&gt;网址&lt;/a&gt; : servlet03 表示资源</span><br><span class="line">&lt;a href=&quot;/a/servlet03/&quot;&gt;网址&lt;/a&gt; : servlet03 表示路径</span><br></pre></td></tr></table></figure><ol start="6"><li>重定向 response.sendRediect(“&#x2F;“)；这条语句虽然是在服务器执行的，但是服务器是把斜杠 &#x2F; 发送给浏览器解析。因此得到地址 <code>http://ip[域名]:port/</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编写资源路径时 , 考虑这么几点</p><p>(1) 这个路径 前面有没有 &#x2F; 。</p><p>(2) 这个路径 在哪里被解析 [服务器还是浏览器] , 如果前面有 &#x2F; , 并且是在 浏览器被解 析的 被解析成 <a href="http://ip:port/">http://ip:port/</a> , 如果在服务器端被解析 , 被解析成 &#x2F;工程路径&#x2F; </p><p>(3) 如果这个路径，前面没有 &#x2F; , 并且在浏览器被解析，则以浏览器当前的地址栏 去掉 资源部分，作为一个相对路径。</p><p>(4) 这个路径最后有没有 &#x2F; , 如果最后有&#x2F; 表示路径， 如果没有 &#x2F; 表示资源。</p><hr><h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个 web 资源，然后关闭浏览器，整个过程称之为一个会话。</p><h3 id="会话的两种技术"><a href="#会话的两种技术" class="headerlink" title="会话的两种技术"></a>会话的两种技术</h3><p>Cookie</p><p>Session</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><ol><li>Cookie 是服务器在客户端保存用户的信息，比如登录名，浏览历史等, 就可以以 cookie方式保存。</li><li>Cookie 信息就像是小甜饼(cookie 中文)一样，数据量并不大，&#x3D;&#x3D;服务器端在需要的时候可以从客户端&#x2F;浏览器读取(http 协议)&#x3D;&#x3D;。</li></ol><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ol><li>保存上次登录时间等信息</li><li>保存用户名，密码, 在一定时间不用重新登录</li><li>网站的个性化，比如定制网站的服务，内容。</li></ol><h3 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例"></a>应用实例</h3><h4 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个Cookie对象</span></span><br><span class="line">        <span class="comment">//(1) username 该cookie的名字 是唯一的，可以理解为是key</span></span><br><span class="line">        <span class="comment">//(2) lzw 是值</span></span><br><span class="line">        <span class="comment">//(3) 可以创建多个Cookie</span></span><br><span class="line">        <span class="comment">//(4) 这时Cookie在服务器端，还没有到浏览器</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;lzw&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.将Cookie发送给浏览器，让浏览器将该Cookie保存</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;创建Cookie成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取指定Cookie"><a href="#读取指定Cookie" class="headerlink" title="读取指定Cookie"></a>读取指定Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadCookies</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 通过Request对象读取cookie信息</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">//2. 遍历cookie</span></span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="literal">null</span> &amp;&amp; cookies.length != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;cookie name= &quot;</span> +cookie.getName() + <span class="string">&quot;, value=&quot;</span> + cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;读取Cookie成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="comment">//返回指定名字的Cookie值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title function_">readCookieByName</span><span class="params">(String name, Cookie[] cookies)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断传入的参数是否正确</span></span><br><span class="line">        <span class="keyword">if</span>(name == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(name) || cookies == <span class="literal">null</span> || cookies.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历cookie</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.equals(cookie.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> cookie;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="修改Cookie"><a href="#修改Cookie" class="headerlink" title="修改Cookie"></a>修改Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//需求</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 需求 演示如何修改Cookie</span></span><br><span class="line"><span class="comment">         * 1) 给定一个cookie的name, 找到该cookie, 如果找到, 则修改该cookie的值为 hsp-hi</span></span><br><span class="line"><span class="comment">         * 2) 如果找不到指定的cookie , 则提示, 没有该cookie</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1. 根据name 去查找 cookie</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieName</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们直接创建了一个同名的cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">userNameCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.readCookieByName(cookieName, cookies);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == cookie) &#123;<span class="comment">//在该浏览器没有email cookie</span></span><br><span class="line">            System.out.println(<span class="string">&quot;当前访问 服务端的 浏览器没有 该cookie&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cookie.setValue(<span class="string">&quot;lzw-hi&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 遍历cookie</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie1 : cookies) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cookie name= &quot;</span> + cookie1.getName() + <span class="string">&quot; value= &quot;</span> + cookie1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookie != <span class="literal">null</span>)&#123;</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">        response.addCookie(userNameCookie);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;更新完成&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Cookie生命周期"><a href="#Cookie生命周期" class="headerlink" title="Cookie生命周期"></a>Cookie生命周期</h3><h4 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h4><ol><li><p>Cookie 的生命周期指的是如何管理 Cookie 什么时候被销毁（删除）</p></li><li><p>setMaxAge()</p></li></ol><p>  ● 正数，表示在指定的秒数后过期<br>  ● 负数，表示浏览器关闭，Cookie 就会被删除（默认值是-1）<br>  ● 0，表示马上删除 Cookie</p><h4 id="应用实例-4"><a href="#应用实例-4" class="headerlink" title="应用实例"></a>应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieLive</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//演示创建一个cookie , 生命周期为 60s</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 从创建该cookie开始计时, 60秒后无效</span></span><br><span class="line">        <span class="comment">// 2. 浏览器来根据创建的时间，计时到60s秒，就认为该cookie无效</span></span><br><span class="line">        <span class="comment">// 3. 如果该cookie无效，那么浏览器在发出http请求时，就不在携带该cookie</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//讲cookie保存到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示如何删除一个cookie, 比如删除username</span></span><br><span class="line">        <span class="comment">//1 先得到username cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">usernameCookie</span> <span class="operator">=</span> CookieUtils.readCookieByName(<span class="string">&quot;username&quot;</span>, cookies);</span><br><span class="line">        <span class="keyword">if</span>(usernameCookie != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2. 将其生命周期设置为0</span></span><br><span class="line">            usernameCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//3. 重新保存该cookie, 因为你将其生命周期设置0, 就等价于让浏览器删除该cookie</span></span><br><span class="line">            <span class="comment">//4. 说明：该cookie会被浏览器直接删除</span></span><br><span class="line">            <span class="comment">//   返回一个Set-Cookie</span></span><br><span class="line">            <span class="comment">//   Set-Cookie: username=tom; Expires=Thu, 01-Jan-1970 00:00:10 GMT</span></span><br><span class="line">            response.addCookie(usernameCookie);<span class="comment">//返回一个Set-Cookie: xxxxx =&gt; 一会抓包.</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到该cookie, 无法删除...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***********************</span></span><br><span class="line"><span class="comment">         * 默认的会话级别的 Cookie [即浏览器关闭就销毁了]</span></span><br><span class="line"><span class="comment">         * 前面我们讲课时，都是默认会话级别的生命周期</span></span><br><span class="line"><span class="comment">         ***********************/</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;dkey&quot;</span>, <span class="string">&quot;dkey_value&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * public void setMaxAge(int expiry) &#123;</span></span><br><span class="line"><span class="comment">         *         this.maxAge = expiry;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * private int maxAge = -1; 默认就是-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//cookie.setMaxAge(-1);//设置存活时间</span></span><br><span class="line">        response.addCookie(cookie3);</span><br><span class="line">        <span class="comment">// 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;设置cookie生命周期&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Cookie有效路径"><a href="#Cookie有效路径" class="headerlink" title="Cookie有效路径"></a>Cookie有效路径</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ol><li>Cookie 有效路径 Path 的设置</li><li>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。 path<br>属性是通过请求的地址来进行有效的过滤</li><li>规则如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cookie1.setPath = /工程路径</span><br><span class="line">cookie2.setPath = /工程路径/aaa</span><br><span class="line">请求地址: http://ip:端口/工程路径/资源</span><br><span class="line">cookie1 会发给服务器</span><br><span class="line">cookie2 不会发给服务器</span><br><span class="line">请求地址: http://ip:端口/工程路径/aaa/资源</span><br><span class="line">cookie1 会发给服务器</span><br><span class="line">cookie2 会发给服务器</span><br></pre></td></tr></table></figure><h5 id="应用实例-5"><a href="#应用实例-5" class="headerlink" title="应用实例"></a>应用实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookiePathServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建两个cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;bj&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;20000&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 设置不同有效路径</span></span><br><span class="line">        <span class="comment">//   request.getContextPath() =&gt; /cs</span></span><br><span class="line">        cookie.setPath(request.getContextPath());</span><br><span class="line">        <span class="comment">//   cookie2有效路径 /cs/aaa</span></span><br><span class="line">        cookie2.setPath(request.getContextPath() + <span class="string">&quot;/aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//如果我们没有设置cookie有效路径，默认就是 /工程路径</span></span><br><span class="line">        <span class="comment">//3. 保存到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line">        <span class="comment">//4. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;设置cookie有效路径成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-3"><a href="#注意事项和细节-3" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>一个 Cookie 只能标识一种信息，它至少含有一个标识该信息的名称（NAME）和设置值（VALUE）。</li><li>一个 WEB 站点可以给一个浏览器发送多个 Cookie，一个浏览器也可以存储多个 WEB 站点提供的 Cookie。</li><li>cookie 的总数量没有限制，但是每个域名的 COOKIE 数量和每个 COOKIE 的大小是有限制的 (不同的浏览器限制不同, 知道即可) , Cookie 不适合存放数据量大的信息。</li><li>注意，删除 cookie 时，path 必须一致，否则不会删除</li><li>Java servlet 中 cookie 中文乱码解决</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncoderCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;EncoderCookie 被调用&quot;);</span></span><br><span class="line">        <span class="comment">//1. 创建cookie, 有中文</span></span><br><span class="line">        <span class="comment">//1) 如果直接存放中文的cookie, 报错 Control character in cookie value or attribute.</span></span><br><span class="line">        <span class="comment">//2) 解决方法，就是将中文 编程成 URL编码  英文： Encode=编码</span></span><br><span class="line">        <span class="comment">//3) 编码后，再保存即可</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;LiAng&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//URLDecoder.decode(); 解码</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;company&quot;</span>, company);</span><br><span class="line">        <span class="comment">//2. 保存到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="comment">//3. 给浏览器返回信息</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;设置中文cookie成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><ol><li>Session 是服务器端技术，服务器在运行时为每一个用户的浏览器创建一个其独享的session 对象&#x2F;集合</li><li>由于 session 为各个用户浏览器独享，所以用户在访问服务器的不同页面时，可以从各自的 session 中读取&#x2F;添加数据, 从而完成相应任务</li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>当用户打开浏览器，访问某个网站, 操作 session 时，服务器就会在内存(在服务端)为该浏览器分配一个 session 对象，该 session 对象被这个浏览器独占, 如图</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220310135905260.png" alt="image-20220310135905260"></p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220310135916708.png" alt="image-20220310135916708"></p><ol start="2"><li>这个 session 对象也可看做是一个容器&#x2F;集合,session 对象默认存在时间为 30min(这是在tomcat&#x2F;conf&#x2F;web.xml)，也可修改</li></ol><h3 id="如何理解Session"><a href="#如何理解Session" class="headerlink" title="如何理解Session"></a>如何理解Session</h3><p>1.存储结构示意图</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220310140256266.png" alt="image-20220310140256266"></p><p>2.你可以把 session 看作是一容器类似 HashMap，有两列(K-V)，每一行就是 session 的一个属性。</p><p>3.每个属性包含有两个部分，一个是该属性的名字(String)，另外一个是它的值(Object)</p><h3 id="Session底层实现机制"><a href="#Session底层实现机制" class="headerlink" title="Session底层实现机制"></a>Session底层实现机制</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220310141232989.png" alt="image-20220310141232989"></p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220310141252966.png" alt="image-20220310141252966"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取session, 同时也可能创建session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 给session获取id</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CreateSession 当前sessionid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//3. 给session存放数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zs@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 给浏览器发送一个回复</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;创建/操作session成功...&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取session, 如果没有session, 也会创建</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//输出sessionId</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ReadSession sessionid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//2. 读取属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">email</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (email != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;session属性 email= &quot;</span> + (String) email);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;session中没有 email属性 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给浏览器回复一下</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;读取session成功...&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Session生命周期"><a href="#Session生命周期" class="headerlink" title="Session生命周期"></a>Session生命周期</h3><h4 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h4><ol><li>public void setMaxInactiveInterval(int interval) 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session 就会被销毁。</li><li>值为正数的时候，设定 Session 的超时时长。</li><li>负数表示永不超时</li><li>public int getMaxInactiveInterval()获取 Session 的超时时间</li><li>public void invalidate() 让当前 Session 会话立即无效</li><li>如果没有调用 setMaxInactiveInterval() 来指定 Session 的生命时长，Tomcat 会以 Session默认时长为准，Session 默认的超时为 30 分钟， 可以在 tomcat 的 web.xml 设置</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220310202550602.png" alt="image-20220310202550602"></p><ol start="7"><li>Session 的生命周期指的是 ：客户端&#x2F;浏览器两次请求最大间隔时长，而不是累积时长。即当客户端访问了自己的 session，session 的生命周期将从 0 开始重新计算。(指的是同一个会话两次请求之间的间隔时间)</li><li>底层: Tomcat 用一个线程来轮询会话状态，如果某个会话的空闲时间超过设定的最大值，则将该会话销毁</li></ol><h4 id="应用实例-6"><a href="#应用实例-6" class="headerlink" title="应用实例"></a>应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateSession2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CreateSession2 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;CreateSession2 sid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//设置生命周期</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">30</span>);<span class="comment">//30秒</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;u&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="comment">//回复下浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;创建session成功, 设置生命周期30s&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadSession2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取到session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;ReadSession2 sid= &quot;</span> + session.getId());</span><br><span class="line">        <span class="comment">//2. 读取session的属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">u</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;u&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取到session属性 u= &quot;</span> + (String) u);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取不到session属性 u 说明原来的session被销毁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//演示如何删除session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="comment">//如果你要删除session的某个属性</span></span><br><span class="line">        <span class="comment">//session.removeAttribute(&quot;xxx&quot;);</span></span><br><span class="line">        <span class="comment">//回复一下浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;删除session成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="服务器渲染技术-JSP-会使用"><a href="#服务器渲染技术-JSP-会使用" class="headerlink" title="服务器渲染技术-JSP[会使用]"></a>服务器渲染技术-JSP[会使用]</h1><h2 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220312082018008.png" alt="image-20220312082018008"></p><ol><li><p>JSP 全称是 Java Server Pages，Java 的服务器页面</p></li><li><p>JSP 这门技术的最大的特点在于，写 JSP 就像在写 HTML</p></li></ol><p>  ● 相比 html 而言，html 只能为用户提供静态数据，而 JSP 技术允许在页面中嵌套 java 代码，为用户提供动态数据<br>  ● 相比 Servlet 而言，Servlet 很难对数据进行排版，而 jsp 除了可以用 java 代码产 生动态数据的同时，也很容易对数据进行排版。</p><ol start="3"><li>jsp 技术基于 Servlet, 你可以理解成 JSP 就是对 Servlet 的包装. 4. 会使用 JSP 的程序员, 再使用 thymeleaf 是非常容易的事情, 几乎是无缝接轨。</li></ol><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jsp简单求和计算器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp简单求和计算器&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//1. 在jsp的该标签中，可以写java代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> i + j;</span><br><span class="line">    <span class="comment">//2. jsp中内置对象，可以直接使用，比如 out</span></span><br><span class="line">    <span class="comment">// 格式化快捷键 ctrl + alt + l</span></span><br><span class="line">    out.print(i + <span class="string">&quot; + &quot;</span> + j + <span class="string">&quot; = &quot;</span> + res);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><ol><li>jsp 页面本质是一个 Servlet 程序, 其性能是和 java 关联的, 只是长得丑。</li><li>第 1 次访问 jsp 页面的时候。Tomcat 服务器会把 jsp 页面解析成为一个 java 源文件。并且对它进行编译成为.class 字节码程序。 看下 Cal.jsp 对应的 cal_jsp.java 和cal_jsp.class 文件<img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220312084236388.png" alt="image-20220312084236388"><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220312084350591.png" alt="image-20220312084350591"></li><li>分析下 cal_jsp.java 的源码，可以看出本质就是 Servlet。（要看到源码和分析类图，需要加入 jasper.jar 这个包[在tomcat&#x2F;lib 下拷贝]）<img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220312084934681.png" alt="image-20220312084934681"></li></ol><p>（1）sum.jsp -&gt; sum_jsp.jsp</p><p>（2）sum_jsp 继承 HttpJspBase</p><p>（3）HttpJspBase 继承了 HttpServlet</p><p>（4）结论 sum.jsp本质就是servlet</p><p>（5）因为sum_jsp 类还继承 HttpJspBase 所以就有更强的功能</p><h2 id="常用page指令"><a href="#常用page指令" class="headerlink" title="常用page指令"></a>常用page指令</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><ol><li>language 表示 jsp 翻译后是什么语言文件, 只支持 java</li><li>contentType 表示 jsp 返回的数据类型，对应源码中 response.setContentType()参数值</li><li>pageEncoding 属性 表示当前 jsp 页面文件本身的字符集</li><li>import 属性 跟 java 源代码中一样。用于导包，导类</li></ol><h2 id="JSP常用三种脚本"><a href="#JSP常用三种脚本" class="headerlink" title="JSP常用三种脚本"></a>JSP常用三种脚本</h2><h3 id="声明脚本基本语法"><a href="#声明脚本基本语法" class="headerlink" title="声明脚本基本语法"></a>声明脚本基本语法</h3><ol><li><p>声明脚本的格式是： &lt;%! 声明 java 代码 %&gt;</p></li><li><p>作用：定义 jsp 的需要属性、方法、静态代码块和内部类等</p></li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jsp声明脚本&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp声明脚本&lt;/h1&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">//这里我们可以声明该jsp需要使用的属性，方法，静态代码块，内部类</span></span><br><span class="line">    <span class="comment">//也就是给 statement.jsp 对应的 statement_jsp 类定义成员</span></span><br><span class="line">    <span class="comment">//1. 属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String company;</span><br><span class="line">    <span class="comment">//2. 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        company = <span class="string">&quot;阿里巴巴&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="表达式脚本基本语法"><a href="#表达式脚本基本语法" class="headerlink" title="表达式脚本基本语法"></a>表达式脚本基本语法</h3><ol><li>表达式脚本的格式是：&lt;%&#x3D;表达式%&gt;</li><li>表达式脚本的作用是：在 jsp 页面上输出数据</li><li>表达式脚本中的表达式不能以分号结束</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;表达式脚本的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;个人信息&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;lzw&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">用户名：&lt;%=name%&gt;&lt;br&gt;</span><br><span class="line">工作是：&lt;%=<span class="string">&quot;java工程师&quot;</span>%&gt;&lt;br&gt;</span><br><span class="line">年龄:&lt;%=request.getParameter(<span class="string">&quot;age&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">邮箱:&lt;%=email%&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="代码脚本基本语法"><a href="#代码脚本基本语法" class="headerlink" title="代码脚本基本语法"></a>代码脚本基本语法</h3><ol><li>代码脚本的语法是：&lt;% java 代码%&gt;</li><li>代码脚本的作用是：可以在 jsp 页面中，编写我们需要的功能（使用 java ）</li><li>可以由多个代码脚本块组合完成一个完整的 java 语句。</li><li>代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(Integer id, String name, String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSkill</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkill</span><span class="params">(String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.lzw.entity.Monster&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;演示代码脚本&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;演示代码脚本&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//创建 ArrayList，放入两个monster</span></span><br><span class="line">    ArrayList&lt;Monster&gt; monsterLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    monsterLists.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">1</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="string">&quot;芭蕉扇&quot;</span>));</span><br><span class="line">    monsterLists.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">2</span>, <span class="string">&quot;蜘蛛精&quot;</span>, <span class="string">&quot;吐口水&quot;</span>));</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table bgcolor=<span class="string">&quot;#bfa&quot;</span> border=<span class="string">&quot;1px&quot;</span> width=<span class="string">&quot;300px&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;名字&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;技能&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; monsterLists.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先取出monster对象</span></span><br><span class="line">            <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> monsterLists.get(i);</span><br><span class="line">    %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=monster.getId()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=monster.getName()%&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=monster.getSkill()%&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><h3 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h3><p>1、JSP 内置对象(已经创建好的对象, 直接使用 inbuild)，是指 Tomcat 在翻译 jsp 页面成为Servlet 后，内部提供的九大对象，叫内置对象<br>2、内置对象，可以直接使用，不需要手动定义</p><h3 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h3><ol><li>out 向客户端输出数据，out.println(“”);</li><li>request 客户端的 http 请求</li><li>response 响应对象</li><li>session 会话对象</li><li>application 对应 ServletContext</li><li>pageContext jsp 页面的上下文，是一个域对象，可以 setAttribue(),作用范围只是本页面</li><li>exception 异常对象 , getMessage()</li><li>page 代表 jsp 这个实例本身</li><li>config 对应 ServletConfig</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220313153638744.png" alt="image-20220313153638744"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HiServlet 被调用&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;job&quot;</span>,<span class="string">&quot;java工程师&quot;</span>);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">666</span>);</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line">        servletConfig.getInitParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jsp内置对象&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp内置对象&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//jsp的内置对象</span></span><br><span class="line">    <span class="comment">//out 类型是 JspWriter 父类就是 Writer.</span></span><br><span class="line">    out.println(<span class="string">&quot;jsp out&quot;</span>);</span><br><span class="line">    <span class="comment">//request是HttpServletRequest</span></span><br><span class="line">    request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//response就是 HttpServletResponse</span></span><br><span class="line">    <span class="comment">//response.sendRedirect(&quot;http://www.baidu.com&quot;);</span></span><br><span class="line">    <span class="comment">//session 就是 HttpSession</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;PHP工程师&quot;</span>);</span><br><span class="line">    <span class="comment">//application类型就是ServletContext</span></span><br><span class="line">    application.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老韩老师&quot;</span>);</span><br><span class="line">    <span class="comment">//pageContext 可以存放数据(属性), 但是该数据只能在本页面使用</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//exception 异常对象 使用比较少</span></span><br><span class="line">    <span class="comment">//page 内置对象，类似 this</span></span><br><span class="line">    out.println(<span class="string">&quot;page=&quot;</span> + page);</span><br><span class="line">    <span class="comment">//config 内置对象的类型就是ServletConfig</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> config.getInitParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">age: &lt;%=pageContext.getAttribute(<span class="string">&quot;age&quot;</span>)%&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP域对象"><a href="#JSP域对象" class="headerlink" title="JSP域对象"></a>JSP域对象</h2><h3 id="JSP四大域对象"><a href="#JSP四大域对象" class="headerlink" title="JSP四大域对象"></a>JSP四大域对象</h3><ol><li>pageContext (域对象，存放的数据只能在当前页面使用)</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220313212927458.png" alt="image-20220313212927458"></p><ol start="2"><li>request (域对象，存放的数据在一次 request 请求有效)</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220313213142802.png" alt="image-20220313213142802"></p><ol start="3"><li>session(域对象,存放的数据在一次会话有效)</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220313213158673.png" alt="image-20220313213158673"></p><ol start="4"><li>application(域对象,存放的数据在整个 web 应用运行期间有效, 范围更大)</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220313213230807.png" alt="image-20220313213230807"></p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220313214003016.png" alt="image-20220313214003016"></p><h3 id="应用实例-7"><a href="#应用实例-7" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;scope文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//在不同的域对象中，放入数据</span></span><br><span class="line">    <span class="comment">//1. 因为四个域对象，是不同的对象，因此name(key) 相同时，并不会冲突</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;pageContext 数据（k1）&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;request 数据(k1)&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;session 数据（k1）&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;application 数据（k1）&quot;</span>);</span><br><span class="line">    <span class="comment">//做一个请求转发的操作</span></span><br><span class="line">    <span class="comment">//路径</span></span><br><span class="line"><span class="comment">//    request.getRequestDispatcher(&quot;/scope2.jsp&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//做一个重定向</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">    response.sendRedirect(contextPath + <span class="string">&quot;/scope2.jsp&quot;</span>);</span><br><span class="line"><span class="comment">//    response.sendRedirect(&quot;/jsp/scope2.jsp&quot;);</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;四个域对象，在本页面获取数据的情况&lt;/h1&gt;</span><br><span class="line">pageContext-k1:&lt;%=pageContext.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">request-k1:&lt;%=request.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">session-k1:&lt;%=session.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">application-k1:&lt;%=application.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;scope2.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;scope2页面获取数据的情况&lt;/h1&gt;</span><br><span class="line">pageContext-k1:&lt;%=pageContext.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">request-k1:&lt;%=request.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">session-k1:&lt;%=session.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">application-k1:&lt;%=application.getAttribute(<span class="string">&quot;k1&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-4"><a href="#注意事项和细节-4" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存储范围</li><li>从存储范围(作用域范围看) pageContext &lt; request &lt; session &lt; application</li></ol><h2 id="JSP请求转发标签"><a href="#JSP请求转发标签" class="headerlink" title="JSP请求转发标签"></a>JSP请求转发标签</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;aa.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="number">1.</span> jsp提供了很多标签，但是因为jsp不是重点，老韩就讲一个常用forward</span><br><span class="line"><span class="number">2.</span> jsp:forward 本质就是 等价 request.getRequestDispatcher(<span class="string">&quot;/bb.jsp&quot;</span>).<span class="keyword">for</span>...</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;bb.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="EL表达式-JSP"><a href="#EL表达式-JSP" class="headerlink" title="EL表达式(JSP)"></a>EL表达式(JSP)</h1><h2 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h2><ol><li>EL 表达式全称：Expression Language，是表达式语言</li><li>EL 表达式主要是代替 jsp 页面的表达式脚本&lt;%&#x3D;request.getAttribute(“xx”)%&gt;</li><li>EL 表达式输出数据的时，比 jsp 的表达式脚本简洁</li><li>EL 表达式基本语法： ${key1}, 你可以理解就是一个语法糖</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;el表达式快速入门&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;el表达式快速入门&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;梁lzw&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span> 如果name是<span class="literal">null</span>，request.getAttribute() 返回的是<span class="literal">null</span>字符串</span><br><span class="line">    <span class="number">2.</span> 如果name是<span class="literal">null</span>，$&#123;name&#125;，返回的<span class="string">&quot;&quot;</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;h1&gt;jsp表达式脚本&lt;/h1&gt;</span><br><span class="line">名字 = &lt;%=request.getAttribute(<span class="string">&quot;name&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:request.getAttribute(<span class="string">&quot;name&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;h1&gt;el 表达式&lt;/h1&gt;</span><br><span class="line">名字 = $&#123;name&#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="EL常用输出形式"><a href="#EL常用输出形式" class="headerlink" title="EL常用输出形式"></a>EL常用输出形式</h2><p>EL 表达式常用输出 Bean 的普通属性、 数组属性、List 集合属性和 map 集合属性</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.lzw.entity.Book&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;el表达式输出数据演示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;el表达式输出数据演示&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//创建Book对象，放入相关的属性</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setName(<span class="string">&quot;昆虫总动员&quot;</span>);</span><br><span class="line">    book.setWriter(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;tom&quot;</span>&#125;);</span><br><span class="line">    ArrayList&lt;String&gt; reader = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    reader.add(<span class="string">&quot;老韩&quot;</span>);</span><br><span class="line">    reader.add(<span class="string">&quot;lzw&quot;</span>);</span><br><span class="line">    book.setReader(reader);<span class="comment">//放入readers</span></span><br><span class="line">    HashMap&lt;String, String&gt; topics = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    topics.put(<span class="string">&quot;topic1&quot;</span>,<span class="string">&quot;这是我看过最好的动画片&quot;</span>);</span><br><span class="line">    topics.put(<span class="string">&quot;topic2&quot;</span>,<span class="string">&quot;不错的电影&quot;</span>);</span><br><span class="line">    book.setTopics(topics);</span><br><span class="line">    <span class="comment">//把book放入到request域对象</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;bookkey&quot;</span>,book);</span><br><span class="line">%&gt;</span><br><span class="line">book对象：$&#123;bookkey&#125;&lt;br/&gt;</span><br><span class="line">book.name：$&#123;bookkey.name&#125;&lt;br/&gt;</span><br><span class="line">book.writer：$&#123;bookkey.writer&#125;&lt;br/&gt;</span><br><span class="line">book.writer[<span class="number">0</span>]：$&#123;bookkey.writer[<span class="number">0</span>]&#125;&lt;br/&gt;</span><br><span class="line">book.readers：$&#123;bookkey.reader&#125;&lt;br/&gt;</span><br><span class="line">book.readers第二个：$&#123;bookkey.reader.get(<span class="number">1</span>)&#125;&lt;br/&gt;</span><br><span class="line">book.readers第二个：$&#123;bookkey.reader[<span class="number">1</span>]&#125;&lt;br/&gt;</span><br><span class="line">book.topics：$&#123;bookkey.topics&#125;&lt;br/&gt;</span><br><span class="line">book.topics第一个：$&#123;bookkey.topics[<span class="string">&quot;topic1&quot;</span>]&#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="EL运算操作符"><a href="#EL运算操作符" class="headerlink" title="EL运算操作符"></a>EL运算操作符</h2><p>语法：${ 运算表达式 }</p><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314092625286.png" alt="image-20220314092625286"></p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314092649787.png" alt="image-20220314092649787"></p><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314092710646.png" alt="image-20220314092710646"></p><h2 id="EL的empty运算"><a href="#EL的empty运算" class="headerlink" title="EL的empty运算"></a>EL的empty运算</h2><p>1.empty 运算可以判断一个数据是否为空，如果为空，返回 true，否则返回 false</p><p>2.以下几种情况为空</p><p>● 值为 null<br>● 值为空串的时<br>● 值是 Object 类型数组，长度为零<br>● list 集合，元素个数为零<br>● map 集合，元素个数为零</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;el empty的运算&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;el empty的运算&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k3&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k4&quot;</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k5&quot;</span>,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;());</span><br><span class="line">%&gt;</span><br><span class="line">k1 是否为空= $&#123;empty k1&#125;&lt;br/&gt;</span><br><span class="line">k2 是否为空= $&#123;empty k2&#125;&lt;br/&gt;</span><br><span class="line">k3 是否为空= $&#123;empty k3&#125;&lt;br/&gt;</span><br><span class="line">k4 是否为空= $&#123;empty k4&#125;&lt;br/&gt;</span><br><span class="line">k5 是否为空= $&#123;empty k5&#125;&lt;br/&gt;</span><br><span class="line">k5 是否为空= $&#123;not empty k5&#125;&lt;br/&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="EL三元运算"><a href="#EL三元运算" class="headerlink" title="EL三元运算"></a>EL三元运算</h2><p>表达式 1?表达式 2: 表达式 3</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;score &gt;= <span class="number">60</span> ? <span class="string">&quot;及格&quot;</span>:<span class="string">&quot;不及格&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="EL的11隐含对象"><a href="#EL的11隐含对象" class="headerlink" title="EL的11隐含对象"></a>EL的11隐含对象</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314093518792.png" alt="image-20220314093518792"></p><h3 id="EL获取四个域数据"><a href="#EL获取四个域数据" class="headerlink" title="EL获取四个域数据"></a>EL获取四个域数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL 获取四个特定域中的属性&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;EL 获取四个特定域中的属性&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;pageContext_key1 的值&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;request_key1 的值&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;session_key1 的值&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;application_key1 的值&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">application 的 key1: $&#123;applicationScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">pageContext 的 key1: $&#123;pageScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">session 的 key1: $&#123;sessionScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">request 的 key1: $&#123;requestScope.key1 &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;pageContext 对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;pageContext 对象的使用&lt;/h1&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="comment">//通过 request 对象来获取和 HTTP 协议相关的数据</span></span><br><span class="line">request.getScheme() 它可以获取请求的协议</span><br><span class="line">request.getServerName() 获取请求的服务器 ip 或域名</span><br><span class="line">request.getServerPort() 获取请求的服务器端口号</span><br><span class="line">getContextPath() 获取当前工程路径</span><br><span class="line">request.getMethod() 获取请求的方式（GET 或 POST）</span><br><span class="line">request.getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line">session.getId() 获取会话的唯一标识</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span>我们可以通过pageContext.request.xx 俩获取和http协议相关的信息</span><br><span class="line">    <span class="number">2.</span>相当于替代 request.getMethod()....</span><br><span class="line">--%&gt;</span><br><span class="line">协议： $&#123; pageContext.request.scheme &#125;&lt;br&gt;</span><br><span class="line">服务器 ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;</span><br><span class="line">服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;</span><br><span class="line">工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;</span><br><span class="line">请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;</span><br><span class="line">客户端 ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;</span><br><span class="line">会话 id ：$&#123; pageContext.session.id &#125;&lt;br&gt;</span><br><span class="line">&lt;h1&gt;使用 jsp 表达式脚本获取如上信息&lt;/h1&gt;</span><br><span class="line">ip 地址: &lt;%=request.getRemoteHost() %&gt; &lt;br&gt;</span><br><span class="line">&lt;h1&gt;使用 el 表达式形式获取信息-简化写法&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;req&quot;</span>, request);</span><br><span class="line">%&gt;</span><br><span class="line">ip 地址: $&#123;req.remoteHost&#125; &lt;br&gt;</span><br><span class="line">获取请求方法: $&#123;req.method&#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="JSTL-JSP"><a href="#JSTL-JSP" class="headerlink" title="JSTL(JSP)"></a>JSTL(JSP)</h1><h2 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h2><ol><li>JSTL 标签库 是指 JSP Standard Tag Library JSP 标准标签库</li><li>EL 表达式是为了替换 jsp 中的表达式脚本，JSTL 是为了替换代码脚本。这样 jsp 页面<br>变得更佳简洁</li><li>JSTL 由五个标签库组成</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314100858009.png" alt="image-20220314100858009"></p><ol start="4"><li>使用 JSTL，需要导入相关的 jar 包</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314100923734.png" alt="image-20220314100923734"></p><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门<a id="jstlksrm"></a></h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jstl的快速入门&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jstl的快速入门&lt;/h1&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span> c:<span class="keyword">if</span> 类似</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">if</span>(<span class="number">10</span>&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;10 &gt; 2 成立~ &lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;10 &gt; 2&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;<span class="number">10</span> &gt; <span class="number">2</span> 成立~ &lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>细节</p><p>● taglib 引入标签，要放在行首<br>● 导入 jstl jar 包后，要重新发布 web 工程，否则不识别 jstl</p><h2 id="Core核心库"><a href="#Core核心库" class="headerlink" title="Core核心库"></a>Core核心库</h2><h3 id="lt-c-set-x2F-gt"><a href="#lt-c-set-x2F-gt" class="headerlink" title="&lt;c:set &#x2F;&gt;"></a>&lt;c:set &#x2F;&gt;</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:set标签的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;c:set标签的使用&lt;/h1&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="comment">//Java代码</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;hsp@sohu.com&quot;</span>);</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    &lt;c:set /&gt; set 标签可以往域中保存数据</span><br><span class="line">    <span class="number">1.</span> 等价 域对象.setAttribute(key,value);</span><br><span class="line">    <span class="number">2.</span> scope 属性设置保存到哪个域</span><br><span class="line">            page 表示 PageContext 域（默认值）</span><br><span class="line">            request 表示 Request 域</span><br><span class="line">            session 表示 Session 域</span><br><span class="line">            application 表示 ServletContext 域</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">var</span> 属性设置 key 是什么</span><br><span class="line">    <span class="number">4.</span> value 属性设置值</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">&quot;request&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;LiAng&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-c-if-x2F-gt"><a href="#lt-c-if-x2F-gt" class="headerlink" title="&lt;c:if &#x2F;&gt;"></a>&lt;c:if &#x2F;&gt;</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220314104734614.png" alt="image-20220314104734614"></p><p>代码见 <a href="#jstlksrm">快速入门</a></p><h3 id="lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签"></a>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</h3><p>介绍：多路判断。跟 switch … case …. default 非常接近</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:choose标签的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;c:choose标签的使用&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;score&quot;</span>,<span class="number">90</span>);</span><br><span class="line">    <span class="comment">//request.setAttribute(&quot;k1&quot;, &quot;request-k1的值&quot;);</span></span><br><span class="line">    <span class="comment">//session.setAttribute(&quot;k1&quot;, &quot;session-k1的值&quot;);</span></span><br><span class="line">    <span class="comment">//application.setAttribute(&quot;k1&quot;, &quot;application-k1的值&quot;);</span></span><br><span class="line">    <span class="comment">//pageContext.setAttribute(&quot;k1&quot;, &quot;pageContext-k1的值~&quot;);</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="number">1.</span> 如果$&#123;requestScope.score&#125; 那么就明确的指定从request域对象取出数据</span><br><span class="line"><span class="number">2.</span> 如果$&#123;score&#125;, 这是就按照从小到大的域范围去获取 pageContext-&gt;request-&gt;session-&gt;application</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt; 80&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;score&#125;-成绩优秀&lt;/h1&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;requestScope.score &gt;= 60&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;score&#125;-成绩一般, 及格了&lt;/h1&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;score&#125;-没有及格，下次努力~&lt;/h1&gt;</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-c-forEach-x2F-gt"><a href="#lt-c-forEach-x2F-gt" class="headerlink" title="&lt;c:forEach &#x2F;&gt;"></a>&lt;c:forEach &#x2F;&gt;</h3><p>介绍: c:forEach 标签 用来遍历输出, 主要有 4 种形式</p><p> ● 普通遍历输出 i 到 j<br> ● 遍历数组<br> ● 遍历 Map<br> ● 遍历 List</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.lzw.entity.Monster&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;c:forEach 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;c:forEach 标签&lt;/h1&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">1</span>种遍历方式从i到j&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    <span class="number">1.</span>遍历 <span class="number">1</span> 到 <span class="number">5</span>，</span><br><span class="line">    <span class="number">2.</span> 输出 begin 属性设置开始的索引 end 属性设置结束的索引</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line">    <span class="number">4.</span> 等价 <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;&#125;</span><br><span class="line">    <span class="number">5.</span> 在默认情况下, i 每次会递增<span class="number">1</span></span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;5&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;排名=$&#123;i&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">2</span>种遍历方式：遍历数组&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;sports&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;打篮球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123; requestScope.sports &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;item&quot;</span>/&gt;</span><br><span class="line">    <span class="number">1.</span> items 遍历的集合/数组</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">var</span> 遍历到的数据</span><br><span class="line">    <span class="number">3.</span> 等价 <span class="keyword">for</span> (Object item: arr) &#123;&#125;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.sports&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;sport&quot;</span>&gt;</span><br><span class="line">    运动名称= $&#123;sport&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">3</span>种遍历方式：遍历Map&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;天津&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;cities&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="number">1.</span> items 遍历的map集合</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">var</span> 遍历到的数据</span><br><span class="line">    <span class="number">3.</span> entry.key 取出key</span><br><span class="line">    <span class="number">4.</span> entry.value 取出值</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.cities&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;city&quot;</span>&gt;</span><br><span class="line">    城市信息: $&#123;city.key&#125;--$&#123;city.value&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;第<span class="number">4</span>种遍历方式：遍历List&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Monster&gt; monsters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    monsters.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;小妖怪&quot;</span>, <span class="string">&quot;巡山的&quot;</span>));</span><br><span class="line">    monsters.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">200</span>, <span class="string">&quot;大妖怪&quot;</span>, <span class="string">&quot;做饭的&quot;</span>));</span><br><span class="line">    monsters.add(<span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">300</span>, <span class="string">&quot;老妖怪&quot;</span>, <span class="string">&quot;打扫位置的&quot;</span>));</span><br><span class="line">    request.setAttribute(<span class="string">&quot;monsters&quot;</span>, monsters);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    items 表示遍历的集合</span><br><span class="line">    <span class="keyword">var</span> 表示遍历到的数据</span><br><span class="line">    begin 表示遍历的开始索引值 ,从<span class="number">0</span>开始计算</span><br><span class="line">    end 表示结束的索引值</span><br><span class="line">    step 属性表示遍历的步长值</span><br><span class="line">    varStatus 属性表示当前遍历到的数据的状态,可以得到step,begin,end等属性值</span><br><span class="line">    <span class="comment">//老师提示, 对于jstl标签，能看懂，会使用即可</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.monsters&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;monster&quot;</span>&gt;</span><br><span class="line">    妖怪的信息: $&#123;monster.id&#125;-$&#123;monster.name&#125;-$&#123;monster.skill&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="三大组件-Listener监听器"><a href="#三大组件-Listener监听器" class="headerlink" title="三大组件-Listener监听器"></a>三大组件-Listener监听器</h1><h2 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>Listener 监听器它是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器</p></li><li><p>Listener 是 JavaEE 的规范，就是接口</p></li><li><p>监听器的作用是，监听某种变化(一般就是对象创建&#x2F;销毁, 属性变化), 触发对应方法完成相应的任务</p></li><li><p>JavaWeb 中的监听器（共八个）, 目前最常用的是 ServletContextListener。</p></li></ol><h2 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a>ServletContextListener 监听器</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>监听 ServletContext 创建或销毁(当我们 Web 应用启动时，就会创建 ServletContext)，即生命周期监听，</p><p>应用场景(1)加载初始化的配置文件；比如 spring 的配置文件 ；(2)任务调度（配合定时器 Timer&#x2F;TimerTask)</p><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><p>void contextInitialized(ServletContextEvent sce) 创建 Servletcontext 时触发</p><p>void contextDestroyed(ServletContextEvent sce) 销毁 Servletcontext 时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 当一个类实现了 ServletContextListener</span></span><br><span class="line"><span class="comment"> * 2. 该类就是一个监听器</span></span><br><span class="line"><span class="comment"> * 3. 该类可以监听的事件 由该类实现的监听接口决定，比如实现了 ServletContextListener</span></span><br><span class="line"><span class="comment"> *    ，则该类就可以监听 ServletContext对象的创建和销毁，以此类推</span></span><br><span class="line"><span class="comment"> * 4. LzwServletContextListener 就是一个监听者</span></span><br><span class="line"><span class="comment"> * 5. 当web应用启动时，就会产生 ServletContextEvent 事件，会调用监听器的对应事件处理方法</span></span><br><span class="line"><span class="comment"> *    contextInitialized，同时会传递 事件对象</span></span><br><span class="line"><span class="comment"> * 6. 程序员可以通过 ServletContextEvent 事件对象，来获取需要的信息，然后再进行业务处理</span></span><br><span class="line"><span class="comment"> * 7. tomcat 怎么知道这个监听器存在？ 因为需要在web.xml中配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextListener 监听到 &quot;</span> +</span><br><span class="line">                servletContext + <span class="string">&quot; 被创建&quot;</span>);</span><br><span class="line">        <span class="comment">//如果我们获取到 ServletContext 对象。。 进行业务处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextListener 监听到 &quot;</span> +</span><br><span class="line">                servletContext + <span class="string">&quot; 被销毁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如可以对 ServletContext 数据进行处理，或日志的管理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进行处理工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.lzw.listener.LzwServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContextAttributeListener-监听器"><a href="#ServletContextAttributeListener-监听器" class="headerlink" title="ServletContextAttributeListener 监听器"></a>ServletContextAttributeListener 监听器</h2><h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><p>监听 ServletContext 属性变化</p><h3 id="相关方法-1"><a href="#相关方法-1" class="headerlink" title="相关方法"></a>相关方法</h3><p>void attributeAdded(ServletContextAttributeEvent event) 添加属性时调用</p><p>void attributeReplaced(ServletContextAttributeEvent event) 替换属性时调用</p><p>void attributeRemoved(ServletContextAttributeEvent event) 移除属性时调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwServletContextAttributeListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextAttributeListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextAttributeListener 监听到添加属性&quot;</span> +</span><br><span class="line">               servletContextAttributeEvent.getName() + <span class="string">&quot;=&quot;</span> + servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextAttributeListener 监听到删除属性&quot;</span> +</span><br><span class="line">                servletContextAttributeEvent.getName() + <span class="string">&quot;=&quot;</span> + servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwServletContextAttributeListener 监听到修改属性&quot;</span> +</span><br><span class="line">                servletContextAttributeEvent.getName() + <span class="string">&quot;=&quot;</span> + servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//给servletContext 对象操作属性</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Lzw&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;LiAng&quot;</span>);</span><br><span class="line">        servletContext.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HiServlet 处理完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他监听器-使用较少"><a href="#其他监听器-使用较少" class="headerlink" title="其他监听器-使用较少"></a>其他监听器-使用较少</h2><h3 id="HttpSessionListener-监听器"><a href="#HttpSessionListener-监听器" class="headerlink" title="HttpSessionListener 监听器"></a>HttpSessionListener 监听器</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>监听 Session 创建或销毁，即生命周期监听</p><h4 id="相关方法-2"><a href="#相关方法-2" class="headerlink" title="相关方法"></a>相关方法</h4><p>void sessionCreated(HttpSessionEvent se) 创建 session 时调用 </p><p>void sessionDestroyed(HttpSessionEvent se) 销毁 session 时调用</p><p>使用方法和前面一样, 可以用于监控用户上线，离线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwHttpSessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpSessionEvent.getSession();</span><br><span class="line">        <span class="comment">//当session创建时，给它设置一个生命周期</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">5</span>);<span class="comment">//5秒</span></span><br><span class="line">        System.out.println(<span class="string">&quot;LzwHttpSessionListener 监听到 session创建=&quot;</span> + session.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;用户id=&quot;</span> + session.getId() + <span class="string">&quot; 上线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpSessionEvent.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwHttpSessionListener 监听到 session销毁=&quot;</span> + session.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;用户id=&quot;</span> + session.getId() + <span class="string">&quot; 离线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpSessionAttributeListener-监听器"><a href="#HttpSessionAttributeListener-监听器" class="headerlink" title="HttpSessionAttributeListener 监听器"></a>HttpSessionAttributeListener 监听器</h3><h4 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h4><p>监听 Session 属性的变化</p><h4 id="相关方法-3"><a href="#相关方法-3" class="headerlink" title="相关方法"></a>相关方法</h4><p>void attributeAdded(ServletRequestAttributeEvent srae) 添加属性时</p><p>void attributeReplaced(ServletRequestAttributeEvent srae) 替换属性时</p><p>void attributeRemoved(ServletRequestAttributeEvent srae) 移除属性时</p><h3 id="ServletRequestListener-监听器"><a href="#ServletRequestListener-监听器" class="headerlink" title="ServletRequestListener 监听器"></a>ServletRequestListener 监听器</h3><h4 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h4><p>监听 Request 创建或销毁，即 Request 生命周期监听</p><h4 id="相关方法-4"><a href="#相关方法-4" class="headerlink" title="相关方法"></a>相关方法</h4><p>void requestInitialized(ServletRequestEvent sre) 创建 request 时</p><p>void requestDestroyed(ServletRequestEvent sre) 销毁 request 时</p><p>可以用来监控, 某个 IP 访问我们网站的频率, 日志记录 ,访问资源的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwRequestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwRequestListener 监听到 request对象创建&quot;</span>);</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> servletRequestEvent.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;记录访问日志&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问IP = &quot;</span> + servletRequest.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">&quot;访问的资源 = &quot;</span> + ((HttpServletRequest)servletRequest).getRequestURL());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwRequestListener 监听到 request对象销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletRequestAttributeListener-监听器"><a href="#ServletRequestAttributeListener-监听器" class="headerlink" title="ServletRequestAttributeListener 监听器"></a>ServletRequestAttributeListener 监听器</h3><h4 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h4><p>监听 Request 属性变化</p><h4 id="相关方法-5"><a href="#相关方法-5" class="headerlink" title="相关方法"></a>相关方法</h4><p>void attributeAdded(ServletRequestAttributeEvent srae) 添加属性时</p><p>void attributeReplaced(ServletRequestAttributeEvent srae) 替换属性时</p><p>void attributeRemoved(ServletRequestAttributeEvent srae)移除属性时</p><h3 id="HttpSessionBindingListener-感知监听器"><a href="#HttpSessionBindingListener-感知监听器" class="headerlink" title="HttpSessionBindingListener 感知监听器"></a>HttpSessionBindingListener 感知监听器</h3><h4 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h4><p>绑定Session中的数据（对象）</p><h3 id="HttpSessionActivationListener-感知监听器"><a href="#HttpSessionActivationListener-感知监听器" class="headerlink" title="HttpSessionActivationListener 感知监听器"></a>HttpSessionActivationListener 感知监听器</h3><h4 id="作用-10"><a href="#作用-10" class="headerlink" title="作用"></a>作用</h4><p>Session绑定的对象在钝化（把对象持久化到磁盘）之前监听到。（和上面的 HttpSessionBindingListener 是一对）</p><hr><h1 id="三大组件-Filter过滤器"><a href="#三大组件-Filter过滤器" class="headerlink" title="三大组件-Filter过滤器"></a>三大组件-Filter过滤器</h1><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220316193247406.png" alt="image-20220316193247406"></p><h2 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>Filter 过滤器它是 JavaWeb 的三大组件之一(Servlet 程序、Listener 监听器、Filter 过滤器)</p></li><li><p>Filter 过滤器是 JavaEE 的规范，是接口</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220316193401481.png" alt="image-20220316193401481"></p></li><li><p>Filter 过滤器它的作用是：拦截请求，过滤响应。</p></li><li><p>应用场景<br>● 权限检查<br>● 日记操作<br>● 事务管理</p></li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220316193546561.png" alt="image-20220316193546561"></p><h2 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;管理后台登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;管理后台登录&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;request=&quot;</span> + request);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&lt;%=request.getContextPath() %&gt;/loginCheckServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    u：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    p：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;用户登录&quot;</span>/&gt;&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取到用户名和密码</span></span><br><span class="line">        <span class="comment">//假设密码是 123456 就可以通过</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//合法，请求转发到admin.jsp</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/manage/admin.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//返回登录界面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;后台管理&lt;/title&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=request.getContextPath() %&gt;/manage/&quot;</span>/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;后台管理&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//验证request对象是和前面的filter是一个对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;request=&quot;</span> + request);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户列表&lt;/a&gt;||&lt;a href=<span class="string">&quot;#&quot;</span>&gt;添加用户&lt;/a&gt;||&lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除用户&lt;/a&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;shunping.jpg&quot;</span> height=<span class="string">&quot;300&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//当Tomcat 创建 Filter 后，就会调用该方法，进行初始化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerFilter init被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//当每次调用该filter时，doFilter就会被调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerFilter doFilter 被调用...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果继续访问目标资源</span></span><br><span class="line">        <span class="comment">//在调用过滤器前，request对象已经被创建并封装</span></span><br><span class="line">        <span class="comment">//所以，我们这里可以通过 servletRequest 对象获取很多信息，比如访问url，session，参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到session</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpServletRequest.getSession();</span><br><span class="line">        <span class="comment">//获取username session 对象，还可以继续使用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(username != <span class="literal">null</span>)&#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            <span class="comment">//1. 继续访问目标资源url</span></span><br><span class="line">            <span class="comment">//2. servletRequest 和 servletResponse 对象会传递给目标资源/文件</span></span><br><span class="line">            <span class="comment">//3. 一定要理解filter传递的两个对象，再后面的servlet/jsp 是同一个对象(指的是在一次http请求)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;servletRequest=&quot;</span> + servletRequest);</span><br><span class="line">            System.out.println(<span class="string">&quot;日志信息==&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的用户名=&quot;</span> + username.toString());</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的url=&quot;</span> + httpServletRequest.getRequestURL());</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的IP=&quot;</span> + httpServletRequest.getRemoteAddr());</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//说明没有登录过</span></span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当filter被销毁时，会调用该方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ManagerFilter destroy 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Filter 一般写在其他servlet的前面</span></span><br><span class="line"><span class="comment">        1. filter配置和servlet配置非常相似，filter也是被tomcat管理和维护</span></span><br><span class="line"><span class="comment">        2. url-pattern 就是当请求的url 匹配的时候，就会调用 filter</span></span><br><span class="line"><span class="comment">        3. /manage/* 第一个/ 解析成 http://ip:port/工程路径</span></span><br><span class="line"><span class="comment">        4. 完整的路径就是 http://ip:port/工程路径/manage/* 当请求的资源url满足该条件时</span></span><br><span class="line"><span class="comment">        都会调用 filter</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ManageFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.ManagerFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ManageFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/manage/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginCheckServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lzw.servlet.LoginCheckServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginCheckServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginCheckServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="url-pattern"><a href="#url-pattern" class="headerlink" title="url-pattern"></a>url-pattern</h2><p>1、url-pattern : Filter 的拦截路径, 即浏览器在请求什么位置的资源时，过滤器会进行拦截过滤</p><p>2.、精确匹配 <url-pattern>&#x2F;a.jsp</url-pattern> 对应的 请求地址 <a href="http://ip[域名]:port/工程路径/a.jsp">http://ip[域名]:port/工程路径/a.jsp</a> 会拦截</p><p>3、目录匹配 <url-pattern>&#x2F;manage&#x2F; * </url-pattern>对应的 请求地址 <a href="http://ip[域名]:port/工程路径/manage/xx">http://ip[域名]:port/工程路径/manage/xx</a> , 即 web 工程 manage 目录下所有资源 会拦截</p><p>4、后缀名匹配 <url-pattern>*.jsp</url-pattern> 后缀名可变，比如 *.action *.do 等等对应的请求地址 <a href="http://ip[域名]:port/">http://ip[域名]:port/</a></p><p>工程路径&#x2F;xx.jsp , 后缀名为 .jsp 请求会拦截</p><p>5、Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在</p><h2 id="Filter生命周期"><a href="#Filter生命周期" class="headerlink" title="Filter生命周期"></a>Filter生命周期</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220316223355873.png" alt="image-20220316223355873"></p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220316224358294.png" alt="image-20220316224358294"></p><h2 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220317092159390.png" alt="image-20220317092159390"></p><h3 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h3><ol><li>FilterConfig 是 Filter 过滤器的配置类</li><li>Tomcat 每次创建 Filter 的时候，也会创建一个 FilterConfig 对象，这里包含了 Filter 配置文件的配置信息。</li><li>FilterConfig 对象作用是获取 filter 过滤器的配置内容</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LzwFilterConfig<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.LzwFilterConfig<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里就是该filter配置的参数-由程序员根据业务逻辑来设置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>127.0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>port<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LzwFilterConfig<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/abc/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//演示FilterConfig使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwFilterConfig</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ip;<span class="comment">//从配置获取的ip</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//通过FilterConfig 获取相关的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> filterConfig.getFilterName();</span><br><span class="line">        ip = filterConfig.getInitParameter(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> filterConfig.getServletContext();</span><br><span class="line">        <span class="comment">//可以获取到该filter所有的配置参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = filterConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">//遍历枚举</span></span><br><span class="line">        <span class="keyword">while</span>(initParameterNames.hasMoreElements())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;名字 = &quot;</span> + initParameterNames.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;filterName = &quot;</span> + filterName);</span><br><span class="line">        System.out.println(<span class="string">&quot;ip = &quot;</span> + ip);</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext = &quot;</span> + servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 forbidden ip 来进行控制 </span></span><br><span class="line">        <span class="comment">//先获取到访问ip</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> servletRequest.getRemoteAddr();</span><br><span class="line">        <span class="keyword">if</span>(remoteAddr.contains(ip)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;封杀该网段..&quot;</span>);</span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续访问目标资源</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h2><h3 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h3><p>在处理某些复杂业务时，一个过滤器不够，可以设计多个过滤器共同完成过滤任务，形成过滤器链。</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220317172211618.png" alt="image-20220317172211618"></p><h3 id="应用实例-8"><a href="#应用实例-8" class="headerlink" title="应用实例"></a>应用实例</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220317172314023.png" alt="image-20220317172314023"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.AFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>BFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lzw.filter.BFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>BFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AFilter doFilter 的前置代码...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行 AFilter 的 doFilter()&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;AFilter doFilter 的后置代码...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BFilter doFilter 的前置代码...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行 BFilter 的 doFilter()&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;BFilter doFilter 的后置代码...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-5"><a href="#注意事项和细节-5" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>多个 filter 和目标资源在一次 http 请求，在同一个线程中</li><li>当一个请求 url 和 filter 的 url-pattern 匹配时, 才会被执行, 如果有多个匹配上，就会顺序执行，形成一个 filter 调用链(底层可以使用一个数据结构搞定)</li><li>多个 filter 共同执行时,因为是一次 http 请求, 使用同一个 request 对象</li><li>多个 filter 执行顺序，和 web.xml 配置顺序保持一致. </li><li>chain.doFilter(req, resp)方法 将执行下一个过滤器的 doFilter 方法, 如果后面没有过滤器，则执行目标资源。</li><li>小结：注意执行过滤器链时, 顺序是(用前面的案例分析) Http请求 -&gt; A 过滤器 dofilter()-&gt; A 过滤器前置代码 -&gt; A 过滤器 chain.doFilter() -&gt; B 过滤器 dofilter() -&gt; B 过滤器前置代码 -&gt; B过滤器 chain.doFilter() -&gt; 目标文件 -&gt; B过滤器后置代码 -&gt; A过滤器后置代码 -&gt;返回给浏览器页面&#x2F;数据</li></ol><hr><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><h2 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</p></li><li><p>JSON 是轻量级的文本数据交换格式</p></li><li><p>JSON 独立于语言 [ ：即 java 、php、asp.net , go 等都可以使用 JSON]</p></li><li><p>JSON 具有自我描述性，更易理解, 一句话，非常的好用</p></li></ol><h2 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>json 快速入门案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 1. myJson 就是一个json对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 2. 演示如何获取到json对象的各个属性/key</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> myJson = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key1&quot;</span>: <span class="string">&quot;LiAng梁&quot;</span>,  <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key2&quot;</span>: <span class="number">123</span>,    <span class="comment">// Number</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key3&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">2.3</span>],  <span class="comment">// 数组</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key4&quot;</span>: &#123;<span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>&#125;,  <span class="comment">//json对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;key5&quot;</span>: [      <span class="comment">//json数组</span></span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="string">&quot;k1&quot;</span>: <span class="number">10</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;milan&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="string">&quot;k3&quot;</span>: <span class="number">30</span>, <span class="string">&quot;k4&quot;</span>: <span class="string">&quot;smith&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.取出key1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key1 = &quot;</span>, myJson.<span class="property">key1</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.取出key3</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key3 = &quot;</span>, myJson.<span class="property">key3</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//可以对key3取出的值（Array），遍历</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myJson.<span class="property">key3</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第%i个元素的值 = &quot;</span>, i,myJson.<span class="property">key3</span>[i]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.取出 key4</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key4 = &quot;</span> , myJson.<span class="property">key4</span>, <span class="string">&quot; name = &quot;</span> , myJson.<span class="property">key4</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4.取出 key5</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key5 = &quot;</span>, myJson.<span class="property">key5</span>, <span class="string">&quot; k4 = &quot;</span>, myJson.<span class="property">key5</span>[<span class="number">1</span>].<span class="property">k4</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>json 快速入门案例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Json对象和字符串对象转换"><a href="#Json对象和字符串对象转换" class="headerlink" title="Json对象和字符串对象转换"></a>Json对象和字符串对象转换</h2><ol><li>JSON.stringify(json)功能: 将一个 json 对象转换成为 json 字符串</li><li>JSON.parse( jsonString )功能: 将一个 json 字符串转换成为 json 对象</li></ol><h3 id="应用实例-9"><a href="#应用实例-9" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON对象和字符串对象转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.JSON 是一个js的内置对象(build-in)，可以直接使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//console.log(&quot;JSON=&quot;, JSON);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jsonPerson = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;name&quot;</span>:<span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jsonPerson = &quot;</span>, jsonPerson);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//json-&gt;string</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> strPerson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonPerson);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strPerson = &quot;</span>, strPerson, <span class="string">&quot; strPerson类型是&quot;</span>, <span class="title function_">typeof</span>(strPerson));</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//string-&gt;json</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> strDog = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;小黄狗\&quot;,\&quot;age\&quot;:2&#125;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jsonDog = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(strDog);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jsonDog = &quot;</span>, jsonDog);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSON对象和字符串对象转换<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-6"><a href="#注意事项和细节-6" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><p>1、JSON.springify(json 对 象 ) 会 返 回 对 应 string, 并 不 会 影 响 原 来 json 对 象</p><p>2、JSON.parse(string) 函数会返回对应的 json 对象, 并不会影响原来 string</p><p>3、在定义 Json 对象时, 可以使用 ‘ ‘ 表示字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json_person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">100</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json_person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">100</span>&#125;;</span><br></pre></td></tr></table></figure><p>4、但是在把原生字符串转成 json 对象时, 必须使用 “”, 否则会报错 比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str_dog = <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;小黄狗&#x27;, &#x27;age&#x27;: 4&#125;&quot;</span>; <span class="comment">//转 json 就会报错</span></span><br></pre></td></tr></table></figure><p>5、JSON.springify(json 对象) 返回的字符串, 都是 “” 表示的字符串, 所以在语法格式正确的情况下, 是可以重新转成 json 对象的</p><h2 id="Json在Java中使用"><a href="#Json在Java中使用" class="headerlink" title="Json在Java中使用"></a>Json在Java中使用</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ol><li><p>java 中使用 json，需要引入到第 3 方的包 gson.jar</p></li><li><p>Gson 是 Google 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库</p></li><li><p>可以对 JSON 字符串 和 Java 对象相互转换</p></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>Javabean 对象和 json 字符串 的转换</li><li>List 对象和 json 字符串 的转换</li><li>map 对象和 json 字符串 的转换</li><li>应用场景示意图</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220325090230829.png" alt="image-20220325090230829"></p><h3 id="应用实例-10"><a href="#应用实例-10" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaJson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个gson对象，作为一个工具对象使用</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示 javabean 和 json 字符串的转换</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">100</span>,<span class="string">&quot;Java从入门到入土&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 演示把 javabean -&gt; json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBook</span> <span class="operator">=</span> gson.toJson(book);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBook = &quot;</span> + strBook);</span><br><span class="line">        <span class="comment">//2. json字符串 -&gt; javabean</span></span><br><span class="line">        <span class="comment">//(1) strBook 就是json字符串</span></span><br><span class="line">        <span class="comment">//(2) Book.class 指定将 json字符串转成 Book 对象</span></span><br><span class="line">        <span class="comment">//(3) 底层是反射机制</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> gson.fromJson(strBook, Book.class);</span><br><span class="line">        System.out.println(book2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 演示把list对象 -&gt; json 字符串</span></span><br><span class="line">        List&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        bookList.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">200</span>, <span class="string">&quot;天龙八部&quot;</span>));</span><br><span class="line">        bookList.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">300</span>, <span class="string">&quot;三国演义&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为把对象,集合转成字符串, 相对比较简单</span></span><br><span class="line">        <span class="comment">//底层只需要遍历, 按照json格式拼接返回即可</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBookList</span> <span class="operator">=</span> gson.toJson(bookList);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBookList= &quot;</span> + strBookList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 演示把json字符串 -&gt; list对象</span></span><br><span class="line">        <span class="comment">//(1) 如果需要把json字符串 转成 集合这样复杂的类型, 需要使用gson提供的一个类</span></span><br><span class="line">        <span class="comment">//(2) TypeToken , 是一个自定义泛型类, 然后通过TypeToken来指定我们需要转换成的类型</span></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        com.google.gson.reflect</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        public class TypeToken&lt;T&gt; &#123;</span></span><br><span class="line"><span class="comment">            final Class&lt;? super T&gt; rawType;</span></span><br><span class="line"><span class="comment">            final Type type;</span></span><br><span class="line"><span class="comment">            final int hashCode;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            protected TypeToken() &#123;</span></span><br><span class="line"><span class="comment">                this.type = getSuperclassTypeParameter(this.getClass());</span></span><br><span class="line"><span class="comment">                this.rawType = Types.getRawType(this.type);</span></span><br><span class="line"><span class="comment">                this.hashCode = this.type.hashCode();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//(1) 返回类型的完整路径java.util.List&lt;com.lzw.json.Book&gt;</span></span><br><span class="line">        <span class="comment">//(2) gson的设计者，需要得到类型的完整路径，然后进行底层反射</span></span><br><span class="line">        <span class="comment">//(3) 所以gson 设计者就提供TypeToken, 来搞定.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//二说 TypeToken , 为什么要加 &#123;&#125;</span></span><br><span class="line">        <span class="comment">//(1) 如果我们  new TypeToken&lt;List&lt;Book&gt;&gt;()  提示</span></span><br><span class="line">        <span class="comment">// &#x27;TypeToken()&#x27; has protected access in &#x27;com.google.gson.reflect.TypeToken&#x27;</span></span><br><span class="line">        <span class="comment">//(2) 因为TypeToken 的无参构造器是protected ， 而 new TypeToken&lt;List&lt;Book&gt;&gt;() 就是调用其无参构造器</span></span><br><span class="line">        <span class="comment">//(3) 根据java基础, 如果一个方法是protected ,而且不在同一个包， 是不能直接访问的, 因此报错</span></span><br><span class="line">        <span class="comment">//(4) 为什么 new TypeToken&lt;List&lt;Book&gt;&gt;()&#123;&#125; 使用就可以，这里就涉及到匿名内部类的知识.</span></span><br><span class="line">        <span class="comment">//(5) 当 new TypeToken&lt;List&lt;Book&gt;&gt;()&#123;&#125; 其实这个类型就不是 TypeToken 而是一个匿名内部类(子类)</span></span><br><span class="line">        <span class="comment">//(6) 而且这个匿名内部类是有自己的无参构造器(隐式), 根据java基础规则 当执行子类的无参构造器时, 默认super();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//三说 TypeToken-&gt;举一个例子.[对java基础回顾.]</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;Book&gt;&gt;() &#123;&#125;.getType();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        System.out.println(&quot;type = &quot; + type);</span></span><br><span class="line">        List&lt;Book&gt; bookList2 = gson.fromJson(strBookList, type);</span><br><span class="line">        System.out.println(<span class="string">&quot;bookList2 = &quot;</span> + bookList2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 把map对象-&gt;json字符串</span></span><br><span class="line">        Map&lt;String, Book&gt; bookMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bookMap.put(<span class="string">&quot;k1&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">400</span>,<span class="string">&quot;西游记&quot;</span>));</span><br><span class="line">        bookMap.put(<span class="string">&quot;k2&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">500</span>,<span class="string">&quot;水浒传&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">strBookMap</span> <span class="operator">=</span> gson.toJson(bookMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;strBookMap = &quot;</span> + strBookMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 把json字符串 -&gt; map对象</span></span><br><span class="line">        <span class="comment">//   new TypeToken&lt;Map&lt;String, Book&gt;&gt;() &#123;&#125;.getType()=&gt;</span></span><br><span class="line">        <span class="comment">//   java.util.Map&lt;java....String,com.lzw.json.Book&gt;</span></span><br><span class="line">        Map&lt;String, Book&gt; bookMap2 = gson.fromJson(strBookMap, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;Map&lt;String, Book&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">        System.out.println(bookMap2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h2><ol><li>AJAX 即”Asynchronous Javascript And XML”(异步 JavaScript 和 XML)</li><li>Ajax 是一种浏览器&#x3D;&#x3D;异步发起请求(指定发哪些数据)&#x3D;&#x3D;，&#x3D;&#x3D;局部更新页面&#x3D;&#x3D;的技术</li></ol><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>搜索引擎根据用户输入关键字，自动提示检索关键字</li><li>动态加载数据，按需取得数据【树形菜单、联动菜单…】</li><li>改善用户体验。【输入内容前提示、带进度条文件上传…】</li><li>电子商务应用。 【购物车、邮件订阅…】</li><li>访问第三方服务。【访问搜索服务、rss 阅读器】</li><li>页面局部刷新, <a href="https://piaofang.maoyan.com/dashboard">https://piaofang.maoyan.com/dashboard</a></li></ol><p>（1）异步请求（2）发送指定数据（3）局部</p><h2 id="原理示意图"><a href="#原理示意图" class="headerlink" title="原理示意图"></a>原理示意图</h2><h3 id="传统web数据通信方式"><a href="#传统web数据通信方式" class="headerlink" title="传统web数据通信方式"></a>传统web数据通信方式</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220326221601071.png" alt="image-20220326221601071"></p><h3 id="Ajax原理示意图"><a href="#Ajax原理示意图" class="headerlink" title="Ajax原理示意图"></a>Ajax原理示意图</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220326221743296.png" alt="image-20220326221743296"></p><h2 id="JavaScript原生Ajax请求"><a href="#JavaScript原生Ajax请求" class="headerlink" title="JavaScript原生Ajax请求"></a>JavaScript原生Ajax请求</h2><h3 id="应用实例-验证用户名是否存在"><a href="#应用实例-验证用户名是否存在" class="headerlink" title="应用实例-验证用户名是否存在"></a>应用实例-验证用户名是否存在</h3><p>1、演示 javascript 发送原生 ajax 请求的案例</p><p>​1）在输入框输入用户名</p><p>​2）点击验证用户名, 使用 ajax 方式， 服务端验证该用户名是否已经占用了, 如果该用户已经占用, 以 json 格式返回该用户信息</p><p>​3)假定用户名为 king , 就不可用, 其它用户名可以&#x3D;》 后面我们接入 DB[Mysql+JDBC]</p><p>​4）对页面进行局部刷新, 显示返回信息</p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220327104208251.png" alt="image-20220327104208251"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.ajax.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User类就是一个 javabean/pojo/entity/domain</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String pwd, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lzw.ajax.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;CheckServlet 被调用&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收ajax提交的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;uname = &quot;</span> + uname);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//假定用户名为king，就不可用，其他用户名可以</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;king&quot;</span>.equals(uname))&#123;</span><br><span class="line">            <span class="comment">//后面这个信息，从DB获取</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">king</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">100</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;666&quot;</span>, <span class="string">&quot;king@163.com&quot;</span>);</span><br><span class="line">            <span class="comment">//把king 转成 json</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">strKing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(king);</span><br><span class="line">            <span class="comment">//返回</span></span><br><span class="line">            response.getWriter().write(strKing);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果用户名可以用，返回“”</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//页面加载后执行function</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> checkButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkButton&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//给checkButton绑定onclick</span></span></span><br><span class="line"><span class="language-javascript">            checkButton.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1. 创建XMLHttpRequest对象(!!!) [ajax引擎对象]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//   获取用户填写的用户名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> uname =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;uname&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2. 准备发送指定数据 open, send</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)&quot;GET&quot; 请求方式可以 GET/POST</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)&quot;/ajax/checkServlet?username=&quot; + uname 就是 url</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(3)true , 表示异步发送</span></span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/checkServlet?uname=&quot;</span> + uname, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//在send函数调用前，给XMLHttpRequest 绑定一个事件onreadystatechange</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//该事件表示，可以去指定一个函数，当数据变化，会触发onreadystatechange</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 每当 xhr对象readyState 改变时，就会触发 onreadystatechange 事件</span></span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//如果请求已完成，且响应已就绪, 并且状态码是200</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> = <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//把返回的json数据显示在div上</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>).<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// console.log(&quot;xhr=&quot; , xhr);</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> responseText = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// console.log(&quot;返回的信息=&quot; +responseText);</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(responseText != <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myres&quot;</span>).<span class="property">value</span> = <span class="string">&quot;用户名不可用&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myres&quot;</span>).<span class="property">value</span> = <span class="string">&quot;用户名可用&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3. 真正的发送ajax请求[http请求]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果你POST 请求，再send(&quot;发送的数据&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/ajax/checkServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;border-width: 0;color: red&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myres&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    电子邮件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>返回的json数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JQuery中的Ajax"><a href="#JQuery中的Ajax" class="headerlink" title="JQuery中的Ajax"></a>JQuery中的Ajax</h2><h3 id="ajax-函数"><a href="#ajax-函数" class="headerlink" title="$.ajax 函数"></a>$.ajax 函数</h3><p>● url： 请求的地址<br>● type : 请求的方式 get 或 post<br>● data : 发送到服务器的数据。将自动转换为请求字符串格式<br>● success: 成功的回调函数<br>● error: 失败后的回调函数<br>● dataType: 返回的数据类型 常用 json 或 text</p><h3 id="get函数和-post函数"><a href="#get函数和-post函数" class="headerlink" title="$.get函数和$.post函数"></a>$.get函数和$.post函数</h3><p>url: 请求的 URL 地址<br>data: 请求发送到服务器的数据<br>success: 成功时回调函数<br>type: 返回内容格式，xml, html, script, json, text</p><p>&#x3D;&#x3D;$.get 和 $.post 底层还是使用$.ajax()方法来实现异步请求&#x3D;&#x3D;</p><h3 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON"></a>$.getJSON</h3><p>url: 请求发送的哪个 URL<br>data: 请求发送到服务器的数据<br>success: 请求成功时运行的函数</p><p>&#x3D;&#x3D;$.getJSON 底层使用$.ajax()方法来实现异步请求&#x3D;&#x3D;</p><h3 id="应用实例-11"><a href="#应用实例-11" class="headerlink" title="应用实例"></a>应用实例</h3><ol><li>演示 jquery 发送 ajax 请求的案例</li></ol><ol><li>在输入框输入用户名</li><li>点击验证用户名, 服务端验证该用户名是否已经占用了, 如果该用户已经占用, 以 json格式返回该用户信息</li><li>假定用户名为 king , 就不可用, 其它用户名可以</li><li>对页面进行局部刷新, 显示返回信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入jquery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./script/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//发出ajax</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 * 1. 指定参数时，需要在&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 * 2. 给参数时，前面需要指定参数名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 * 3. dataType: &quot;json&quot; 要求服务器返回的数据格式是json</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                 */</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $.ajax(&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     url:&quot;/ajax/checkUserServlet2&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     type:&quot;POST&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     data:&#123;//这里给json</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         username:$(&quot;#uname&quot;).val(),</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         date: new Date()</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     error:function()&#123;//失败后的回调函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;失败~&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     success:function (data,status,xhr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;成功~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;data = &quot;, data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;status = &quot;, status);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;xhr = &quot;, xhr);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         //data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         $(&quot;#div1&quot;).html(JSON.stringify(data));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         if(&quot;&quot; == data.username)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名不可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     dataType:&quot;json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//说明</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.$.get() 默认是get请求，不需要指定 请求方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2.不需要指定参数名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3.填写的实参，是顺序 url, data, success回调函数, 返回的数据格式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//讲解.get() 使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $.get(</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;/ajax/checkUserServlet2&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         username:$(&quot;#uname&quot;).val(),</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         date: new Date()</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     function (data,status,xhr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;$.get 成功~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;data = &quot;, data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;status = &quot;, status);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;xhr = &quot;, xhr);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         //data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         $(&quot;#div1&quot;).html(JSON.stringify(data));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         if(&quot;&quot; == data.username)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名不可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// )</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//$.post() 和 $.get() 的方式一样</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//只是这时，是按照post方式发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $.post(</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;/ajax/checkUserServlet2&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         username:$(&quot;#uname&quot;).val(),</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         date: new Date()</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     function (data,status,xhr) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;$.post 成功~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;data = &quot;, data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;status = &quot;, status);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         console.log(&quot;xhr = &quot;, xhr);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         //data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         $(&quot;#div1&quot;).html(JSON.stringify(data));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         if(&quot;&quot; == data.username)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//             $(&quot;#myres&quot;).val(&quot;该用户名不可用&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &quot;json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// )</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1. 如果你通过jquery发出的ajax请求是get 并且 返回的数据格式是json</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2. 可以直接使用getJSON() 函数，就很简洁</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">getJSON</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;/ajax/checkUserServlet2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:$(<span class="string">&quot;#uname&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">function</span> (<span class="params">data,status,xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;$.getJSON 成功~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data = &quot;</span>, data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;status = &quot;</span>, status);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xhr = &quot;</span>, xhr);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//data是json对象，要转成字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(<span class="string">&quot;&quot;</span> == data.<span class="property">username</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#myres&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;该用户名可用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#myres&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;该用户名不可用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册-Jquery+Ajax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/ajax/checkUserServlet2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;border-width: 0;color: red&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myres&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    电子邮件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>返回的json数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lzw.ajax.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.lzw.ajax.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUserServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个UserService属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//接收jquery发送的ajax数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserByName(username);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">           response.getWriter().write(gson.toJson(user));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            User user1 = new User();</span></span><br><span class="line"><span class="comment">//            user1.setUsername(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//            response.getWriter().write(gson.toJson(user1));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if(&quot;king&quot;.equals(username))&#123;</span></span><br><span class="line"><span class="comment">//            //接入到db</span></span><br><span class="line"><span class="comment">//            User user = new User(100, &quot;king&quot;, &quot;abc&quot;, &quot;king@163.com&quot;);</span></span><br><span class="line"><span class="comment">//            response.getWriter().write(gson.toJson(user));</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            //返回一个不存在的user</span></span><br><span class="line"><span class="comment">//            User user = new User(-1, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="comment">//            response.getWriter().write(gson.toJson(user));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="线程数据共享和安全-ThreadLocal"><a href="#线程数据共享和安全-ThreadLocal" class="headerlink" title="*线程数据共享和安全-ThreadLocal"></a>*线程数据共享和安全-ThreadLocal</h1><h2 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h2><ol><li>ThreadLocal 的作用，可以实现&#x3D;&#x3D;在同一个线程数据共享&#x3D;&#x3D;, 从而解决多线程数据安全问题. 2. ThreadLocal 可以给当前线程关联一个数据(普通变量、对象、数组)set 方法 [源码!]</li><li>ThreadLocal 可以像 Map 一样存取数据，key 为当前线程, get 方法</li><li>每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，就需要使用多个 ThreadLocal 对象实例</li><li>每个 ThreadLocal 对象实例定义的时候，一般为 static 类型</li><li>ThreadLocal 中保存数据，在线程销毁后，会自动释放</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220328163701554.png" alt="image-20220328163701554"></p><h2 id="快速入门-4"><a href="#快速入门-4" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T2DAO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//取出线程关联的threadLocal1对象的数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> T1.threadLocal1.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前线程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;在T2DAO的update() 线程是= &quot;</span> + name + <span class="string">&quot; 取出dog=&quot;</span> + o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1Service</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//取出 threadLocal1 关联的对象</span></span><br><span class="line">        <span class="comment">/**解读源码</span></span><br><span class="line"><span class="comment">         * * public T get() &#123;</span></span><br><span class="line"><span class="comment">         *          //1. 先得到当前的线程对象</span></span><br><span class="line"><span class="comment">         *         Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">         *         //2.通过线程获取到对应的ThreadLocalMap</span></span><br><span class="line"><span class="comment">         *         ThreadLocalMap map = getMap(t);</span></span><br><span class="line"><span class="comment">         *         if (map != null) &#123;</span></span><br><span class="line"><span class="comment">         *              //3. 如果map不为空, 根据当前的 threadlocal对象，得到对应的Entry</span></span><br><span class="line"><span class="comment">         *             ThreadLocalMap.Entry e = map.getEntry(this);</span></span><br><span class="line"><span class="comment">         *             //4. 如果e 不为null</span></span><br><span class="line"><span class="comment">         *             if (e != null) &#123;</span></span><br><span class="line"><span class="comment">         *                 <span class="doctag">@SuppressWarnings</span>(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="comment">         *                 //返回当前threadlocal关联的数据value</span></span><br><span class="line"><span class="comment">         *                 T result = (T)e.value;</span></span><br><span class="line"><span class="comment">         *                 return result;</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;</span></span><br><span class="line"><span class="comment">         *         return setInitialValue();</span></span><br><span class="line"><span class="comment">         *     &#125;*</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> T1.threadLocal1.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前线程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;在T1Service的update() 线程name= &quot;</span> + name + <span class="string">&quot; dog= &quot;</span> + o);</span><br><span class="line">        <span class="comment">//调用dao-update</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">T2DAO</span>().update();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line">    <span class="comment">//创建ThreadLocal对象，做成public static.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal1 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal2 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Task 是线程类 -&gt; 内部类 / 线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">            <span class="type">Pig</span> <span class="variable">pig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">            <span class="comment">//给threadLocal1 对象放入set dog , 隔山打牛</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Task 放入了 dog= &quot;</span> + dog);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                解读源码</span></span><br><span class="line"><span class="comment">             public void set(T value) &#123;</span></span><br><span class="line"><span class="comment">                 //1. 获取当前线程, 关联到当前线程!</span></span><br><span class="line"><span class="comment">                 Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">                 //2. 通过线程对象, 获取到ThreadLocalMap</span></span><br><span class="line"><span class="comment">                 //   ThreadLocalMap 类型 ThreadLocal.ThreadLocalMap</span></span><br><span class="line"><span class="comment">                 ThreadLocalMap map = getMap(t);</span></span><br><span class="line"><span class="comment">                 //3. 如果map不为null, 将数据(dog,pig..) 放入map -key:threadLocal value:存放的数据</span></span><br><span class="line"><span class="comment">                 //   从这个源码我们已然看出一个threadlocal只能关联一个数据，如果你set, 就会替换</span></span><br><span class="line"><span class="comment">                 //4. 如果map为null, 就创建一个和当前线程关联的ThreadLocalMap, 并且该数据放入</span></span><br><span class="line"><span class="comment">                 if (map != null)</span></span><br><span class="line"><span class="comment">                    map.set(this, value);</span></span><br><span class="line"><span class="comment">                 else</span></span><br><span class="line"><span class="comment">                    createMap(t, value);</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            threadLocal1.set(dog);</span><br><span class="line">            <span class="comment">//threadLocal1.set(pig);</span></span><br><span class="line">            threadLocal2.set(pig);</span><br><span class="line">            System.out.println(<span class="string">&quot;Task 在run 方法中 线程=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">T1Service</span>().update();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>()).start();<span class="comment">//主线程启动一个新的线程,注意不是主线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220328173610621.png" alt="image-20220328173610621"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************/</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220328173812023.png" alt="image-20220328173812023"></p><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220328173837621.png" alt="image-20220328173837621"></p><hr><h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="*文件上传下载"></a>*文件上传下载</h1><h2 id="介绍-22"><a href="#介绍-22" class="headerlink" title="介绍"></a>介绍</h2><ol><li>文件的上传和下载，是常见的功能。</li><li>后面项目就使用了文件上传下载。</li><li>如果是传输大文件，一般用专门工具或者插件</li><li>文件上传下载需要使用到两个包 , 需要导入</li><li>说明:</li></ol><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220330161244605.png" alt="image-20220330161244605"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h3><img src="E:\VIP\JavaWeb\笔记\JavaWeb.assets\image-20220330162807058.png" alt="image-20220330162807058"  /><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220330162919197.png" alt="image-20220330162919197"></p><h3 id="应用实例-12"><a href="#应用实例-12" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;FileUploadServlet 被调用&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 判断是不是文件表单(enctype=&quot;multipart/form-data&quot;)</span></span><br><span class="line">        <span class="keyword">if</span>(ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line">            <span class="comment">//2. 创建 DiskFileItemFactory 对象, 用于构建一个 解析上传数据的工具 对象</span></span><br><span class="line">            <span class="type">DiskFileItemFactory</span> <span class="variable">diskFileItemFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">            <span class="comment">//3. 创建一个解析上传数据的工具对象</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *     表单提交的数据就是 input 元素</span></span><br><span class="line"><span class="comment">             *     &lt;input type=&quot;file&quot; name=&quot;pic&quot; id=&quot;&quot; value=&quot;2xxx.jpg&quot; onchange=&quot;prev(this)&quot;/&gt;</span></span><br><span class="line"><span class="comment">             *     家居名: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">             *     &lt;input type=&quot;submit&quot; value=&quot;上传&quot;/&gt;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(diskFileItemFactory);</span><br><span class="line">            <span class="comment">//解决接收到文件名是中文乱码</span></span><br><span class="line">            servletFileUpload.setHeaderEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 关键的地方, servletFileUpload 对象可以把表单提交的数据text / 文件</span></span><br><span class="line">            <span class="comment">//   将其封装到 FileItem 文件项中</span></span><br><span class="line">            <span class="comment">//   心得体会: 如果我们不知道一个对象是什么结构[1.输出 2.debug 3. 底层自动看到]</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(request);</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                [name=1.jpg, StoreLocation=D:\Environment\Tomcat\apache-tomcat-8.0.50\temp\xupload_351e9703_17fda038795__7f67_00000000.tmp, size=0bytes, isFormField=false, FieldName=pic,</span></span><br><span class="line"><span class="comment">                // name=null, StoreLocation=D:\Environment\Tomcat\apache-tomcat-8.0.50\temp\xupload_351e9703_17fda038795__7f67_00000001.tmp, size=0bytes, isFormField=true, FieldName=name]</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                 <span class="comment">//System.out.println(&quot;list ==&gt; &quot; + list);</span></span><br><span class="line">                <span class="comment">//遍历，并分别处理</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;fileItem = &quot; + fileItem);</span></span><br><span class="line">                    <span class="comment">//判断是不是一个文件</span></span><br><span class="line">                    <span class="keyword">if</span>(fileItem.isFormField())&#123;<span class="comment">//如果是true就是文本 input text</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fileItem.getString(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;家具名=&quot;</span> + name);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;<span class="comment">//是一个文件</span></span><br><span class="line">                        <span class="comment">//用一个方法</span></span><br><span class="line">                        <span class="comment">//获取上传的文件的名字</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fileItem.getName();</span><br><span class="line">                        System.out.println(<span class="string">&quot;上传的文件名=&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//把这个上传到 服务器的 temp下的文件保存到你指定的目录</span></span><br><span class="line">                        <span class="comment">//1.指定一个目录 , 就是我们网站工作目录下</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>;</span><br><span class="line">                        <span class="comment">//2.获取到完整目录 [io/servlet基础]</span></span><br><span class="line">                        <span class="comment">//  这个目录是和你的web项目运行环境绑定的. 是动态的。</span></span><br><span class="line">                        <span class="comment">// fileRealPath = E:\VIP\JavaWeb\Demo\fileupdown\out\artifacts\fileupdown_war_exploded\xupload\</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileRealPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(filePath);</span><br><span class="line">                        System.out.println(<span class="string">&quot;fileRealPath = &quot;</span> + fileRealPath);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//3. 创建这个上传的目录=&gt; 创建目录?=&gt; Java基础</span></span><br><span class="line">                        <span class="comment">//   我们写一个工具类，可以返回 /2024/11/11 字符串</span></span><br><span class="line">                        <span class="type">File</span> <span class="variable">fileRealPathDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileRealPath + WebUtils.getYearMonthDay());</span><br><span class="line">                        <span class="keyword">if</span>(!fileRealPathDirectory.exists())&#123;<span class="comment">//不存在就创建</span></span><br><span class="line">                            fileRealPathDirectory.mkdirs();<span class="comment">//创建</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//4. 将文件拷贝到fileRealPathDirectory目录</span></span><br><span class="line">                        <span class="comment">//   构建一个上传文件的完整路径 ：目录+文件名</span></span><br><span class="line">                        <span class="comment">//   对上传的文件名进行处理, 前面增加一个前缀，保证是唯一即可, 不错</span></span><br><span class="line">                        name = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> + name;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileFullPath</span> <span class="operator">=</span> fileRealPathDirectory + <span class="string">&quot;/&quot;</span> + name;</span><br><span class="line">                        fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(fileFullPath));</span><br><span class="line">                        <span class="comment">//5.提示信息</span></span><br><span class="line">                        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">                        response.getWriter().write(<span class="string">&quot;上传成功~&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是文件表单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getYearMonthDay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> ldt.getYear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">monthValue</span> <span class="operator">=</span> ldt.getMonthValue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> ldt.getDayOfMonth();</span><br><span class="line">        <span class="type">String</span> <span class="variable">yearMonthDay</span> <span class="operator">=</span> year + <span class="string">&quot;/&quot;</span> + monthValue + <span class="string">&quot;/&quot;</span> + dayOfMonth + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        System.out.println(yearMonthDay);</span><br><span class="line">        <span class="keyword">return</span> yearMonthDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;!-- 指定了base标签 --&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=request.getContextPath()+&quot;</span>/<span class="string">&quot;%&gt;&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">            outline: none;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            background-color: #31B0D5;</span><br><span class="line">            border: none;</span><br><span class="line">            width: 70px;</span><br><span class="line">            height: 35px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            border-radius: <span class="number">50</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input[type=<span class="string">&quot;file&quot;</span>] &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: <span class="number">0</span>;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">            height: 200px;</span><br><span class="line">            opacity: <span class="number">0</span>;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        function <span class="title function_">prev</span><span class="params">(event)</span> &#123;</span><br><span class="line">            <span class="comment">//获取展示图片的区域</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">img</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;prevView&quot;</span>);</span><br><span class="line">            <span class="comment">//获取文件对象</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">file</span> <span class="operator">=</span> event.files[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//获取文件阅读器： Js的一个类，直接使用即可</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">            reader.readAsDataURL(file);</span><br><span class="line">            reader.onload = function () &#123;</span><br><span class="line">                <span class="comment">//给img的src设置图片url</span></span><br><span class="line">                img.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="built_in">this</span>.result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 表单的enctype属性要设置为multipart/form-data</span><br><span class="line">    enctype=<span class="string">&quot;multipart/form-data&quot;</span> 表示提交的数据是多个部分构造，有文件和文本</span><br><span class="line"> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;fileUploadServlet&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    家居图: &lt;img src=<span class="string">&quot;2.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> width=<span class="string">&quot;200&quot;</span> height=<span class="string">&quot;200&quot;</span> id=<span class="string">&quot;prevView&quot;</span>&gt;</span><br><span class="line">    &lt;%--    小伙伴愿意完成自己测试--%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;pic&quot;</span> id=<span class="string">&quot;&quot;</span> value=<span class="string">&quot;&quot;</span> onchange=<span class="string">&quot;prev(this)&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    家居名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-7"><a href="#注意事项和细节-7" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><p>如果将文件都上传到一个目录下，当上传文件很多时，会造成访问文件速度变慢，因此可以将文件上传到不同目录 比如 一天上传的文件，统一放到一个文件夹 年月日, 比如21001010 文件夹</p></li><li><p>一个完美的文件上传，要考虑的因素很多，比如断点续传、控制图片大小，尺寸，分片上传，防止恶意上传等，在项目中，可以考虑使用 WebUploader 组件(百度开发)<a href="http://fex.baidu.com/webuploader/doc/index.html">http://fex.baidu.com/webuploader/doc/index.html</a></p></li><li><p>文件上传功能，在项目中建议有限制的使用，一般用在头像、证明、合同、产品展示等，如果不加限制，会造成服务器空间被大量占用 [比如 b 站评论，就不能传图片，微信发 1次朋友圈最多 9 张图等..]</p></li><li><p>文件上传，创建 web&#x2F;upload 的文件夹，在 tomcat 启动时，没有在 out 目录下 创建 对应的 upload 文件夹, 原因是 tomcat 对应空目录是不会在 out 下创建相应目录的，所以，只需在 upload 目录下，放一个文件即可, 这个是 Idea + Tomcat 的问题, 实际开发不会存在</p></li></ol><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h3><p><img src="D:\Github\will-liang.github.io\source_posts\JavaWeb.assets\image-20220330195348040.png" alt="image-20220330195348040"></p><h3 id="应用实例-13"><a href="#应用实例-13" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDownLoadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FileDownLoadServlet 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 先准备要下载的文件[假定这些文件是公共的资源]</span></span><br><span class="line">        <span class="comment">//   重要: 保证当我们的tomcat启动后，在工作目录out下有download文件夹, 并且有可供下载的文件!!</span></span><br><span class="line">        <span class="comment">//   如果你没有看到你创建的download在工作目录out下 rebuild project -&gt; restart, 就OK</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取到要下载的文件的名字</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadFileName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;downLoadFileName = &quot;</span> + downLoadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 给http响应，设置响应头 Content-Type , 就是文件的MIME</span></span><br><span class="line">        <span class="comment">//   通过servletContext 来获取</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadPath</span> <span class="operator">=</span> <span class="string">&quot;/download/&quot;</span>;<span class="comment">//下载目录从web工程根目录计算 /download/1.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadFileFullPath</span> <span class="operator">=</span> downLoadPath + downLoadFileName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> servletContext.getMimeType(downLoadFileFullPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;mimeType = &quot;</span> + mimeType);</span><br><span class="line">        response.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 给http响应，设置响应头 Content-Disposition</span></span><br><span class="line">        <span class="comment">//  这里考虑的细节比较多，比如不同的浏览器写法不一样，考虑编辑</span></span><br><span class="line">        <span class="comment">//   ff 是 文件名中文需要 base64, 而 ie/chrome 是 URL编码</span></span><br><span class="line">        <span class="comment">//   这里我们不需要同学们记住，只需知道原理</span></span><br><span class="line">        <span class="comment">//  解读</span></span><br><span class="line">        <span class="comment">//(1)如果是Firefox 则中文编码需要 base64</span></span><br><span class="line">        <span class="comment">//(2)Content-Disposition 是指定下载的数据的展示形式 , 如果attachment 则使用文件下载方式</span></span><br><span class="line">        <span class="comment">//(3)如果是其他(主流ie/chrome) 中文编码使用URL编码</span></span><br><span class="line">        <span class="keyword">if</span> (request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐 Base64编码</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename==?UTF-8?B?&quot;</span> +</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(downLoadFileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他(主流ie/chrome)使用URL编码操作</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> +</span><br><span class="line">                    URLEncoder.encode(downLoadFileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 读取下载的文件数据，返回给客户端/浏览器</span></span><br><span class="line">        <span class="comment">//(1) 创建一个和要下载的文件，关联的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(downLoadFileFullPath);</span><br><span class="line">        <span class="comment">//(2) 得到返回数据的输出流 [因为返回文件大多数是二进制(字节), IO java基础]</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3) 使用工具类，将输入流关联的文件，对拷到输出流，并返回给客户端/浏览器</span></span><br><span class="line">        IOUtils.copy(resourceAsStream, outputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;文件下载&lt;/title&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=request.getContextPath()+&quot;</span>/<span class="string">&quot;%&gt;&gt;&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;文件下载&lt;/h1&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;fileDownLoadServlet?name=1.jpg&quot;</span>&gt;点击下载小狗图片&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;fileDownLoadServlet?name=笔记.pdf&quot;</span>&gt;点击下载 笔记.pdf&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;fileDownLoadServlet?name=高山流水.mp3&quot;</span>&gt;点击下载 高山流水.mp3&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节-8"><a href="#注意事项和细节-8" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><p>文件下载，比较麻烦的就是文件名中文处理</p></li><li><p>因此，在代码中，针对不同浏览器做了处理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 火狐 Base64编码</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename==?UTF-8?B?&quot;</span> +</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(downLoadFileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他(主流ie/chrome)使用URL编码操作</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> +</span><br><span class="line">            URLEncoder.encode(downLoadFileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于网站的文件，很多文件使用另存为即可下载，对于大文件(文档，视频)，会使用专业的下载工具(迅雷、百度，腾讯，网盘等)</li><li>对于不同的浏览器, 在把文件下载完毕后，处理的方式不一样, 有些是直接打开文件，有些是将文件下载到 本地&#x2F;下载目录</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5</title>
      <link href="/2022/07/20/Spring5/"/>
      <url>/2022/07/20/Spring5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h1><h1 id="第一章-Spring5基本介绍"><a href="#第一章-Spring5基本介绍" class="headerlink" title="第一章 Spring5基本介绍"></a>第一章 Spring5基本介绍</h1><h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://spring.io/">https://spring.io/</a></p><h3 id="Spring5下载"><a href="#Spring5下载" class="headerlink" title="Spring5下载"></a>Spring5下载</h3><p>1.进入该网站</p><p><a href="https://repo.spring.io/">https://repo.spring.io</a></p><p>2.找到Artifacts</p><img src="\images\Spring5.assets\image-20220606085147170-16583309737161.png" alt="image-20220606085147170" style="zoom: 67%;" /><p>3.点开release</p><img src="\images\Spring5.assets\image-20220606085226240-16583309737162.png" alt="image-20220606085226240" style="zoom: 80%;" /><p>4.在release中找到org下的 springframework</p><img src="\images\Spring5.assets\image-20220606085316723-16583309737164.png" alt="image-20220606085316723" style="zoom:67%;" /><p>5.然后找到spring，右侧会出现下载地址 <a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p><div align="center"> <img src="\images\Spring5.assets\image-20220606085406607-16583309737163.png"> </div> <p>6.找到需要的版本进行下载</p><img src="\images\Spring5.assets\image-20220606085547670-16583309737175.png" alt="image-20220606085547670" style="zoom: 80%;" /><div align="center"> <img src="\images\Spring5.assets\image-20220606085648344.png"> </div> <p>​（离线文档也在里面）</p><h3 id="在线文档"><a href="#在线文档" class="headerlink" title="在线文档"></a>在线文档</h3><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></p><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><img src="\images\Spring5.assets\image-20220606090728558-16583309737176.png" alt="image-20220606090728558" style="zoom:67%;" /><ol><li>Spring 核心学习内容 IOC、AOP、jdbcTemplate、声明式事务。</li><li>IOC：控制反转，可以管理 java 对象。（重难点）</li><li>AOP：切面编程。（重难点）</li><li>JDBCTemplate：是 spring 提供一套访问数据库的技术，应用性强，相对好理解。</li><li>声明式事务：基于 ioc&#x2F;aop 实现事务管理。</li></ol><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ol><li><strong>Spring 可以整合其他的框架（Spring是管理框架的框架）。</strong></li><li><strong>Spring 有两个核心的概念：IOC 和 AOP。</strong></li><li><strong>IOC [Inversion Of Control 反转控制]</strong></li><li><strong>DI—Dependency Injection 依赖注入，可以理解成是 IOC 的另外叫法。</strong></li><li><strong>Spring 最大的价值，通过配置，给程序提供需要使用的web 层[Servlet(Action&#x2F;Controller)]&#x2F;Service&#x2F;Dao&#x2F;[JavaBean&#x2F;entity]对象，这个是核心价值所在，也是 IOC 的具体体现，实现解耦。</strong></li></ol><img src="\images\Spring5.assets\image-20220606091226545-16583309737177.png" alt="image-20220606091226545" style="zoom: 67%;" /><p><strong>传统的开发模式</strong></p><img src="\images\Spring5.assets\image-20220606091356788-16583309737178.png" alt="image-20220606091356788" style="zoom:80%;" /><ol><li>程序员编写程序，在程序中读取配置信息。</li><li>创建对象, new Object()&#x2F;&#x2F;反射</li><li>使用对象完成任务</li></ol><p><strong>IOC 的开发模式</strong> [EmpAction EmpService EmpDao Emp]</p><p>容器—-&gt;程序 &#x2F;&#x2F;容器创建好对象，程序直接使用。</p><img src="\images\Spring5.assets\image-20220606091654286-16583309737179.png" alt="image-20220606091654286" style="zoom: 80%;" /><ol><li>Spring 根据配置文件 xml&#x2F;注解，创建对象， 并放入到容器(ConcurrentHashMap等)中，并且可以完成对象之间的依赖。</li><li>当需要使用某个对象实例的时候，就直接从容器中获取即可。</li><li>程序员可以更加关注如何使用对象完成相应的业务。(以前是 new … &#x3D;&#x3D;&gt; 注解&#x2F;配置 方式)</li><li>DI—Dependency Injection 依赖注入，可以理解成是 IOC 的另外叫法。</li><li>Spring 最大的价值，通过配置，给程序提供需要使用的 web 层[Servlet(Action&#x2F;Controller)]&#x2F;Service&#x2F;Dao&#x2F;[JavaBean&#x2F;entity]对象，这个是核心价值所在，也是 ioc 的具体体现，实现解耦。</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>​通过 Spring 的方式[配置文件]，获取 JavaBean: Monster 的对象，并给该的对象属性赋 值，输出该对象信息。</p><p><strong>注意：创建好java工程后，要引入相关的spring5基本包</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220606094933528.png"> </div> <img src="\images\Spring5.assets\image-20220606095253566-165833097371710.png" alt="image-20220606095253566" style="zoom: 80%;" /><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer monsterID;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器一定要写，Spring反射创建对象时需要使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(Integer monsterID, String name, String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterID = monsterID;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getMonsterID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterID</span><span class="params">(Integer monsterID)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterID = monsterID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSkill</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkill</span><span class="params">(String skill)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;monsterID=&quot;</span> + monsterID +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, skill=&#x27;&quot;</span> + skill + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建spring的配置文件"><a href="#创建spring的配置文件" class="headerlink" title="创建spring的配置文件"></a>创建spring的配置文件</h4><img src="\images\Spring5.assets\image-20220606095714158-165833097371711.png" alt="image-20220606095714158" style="zoom: 80%;" /><div align="center"> <img src="\images\Spring5.assets\image-20220606095751103.png"> </div> <img src="\images\Spring5.assets\image-20220606095834123-165833097371712.png" alt="image-20220606095834123"  /><div align="center"> <img src="\images\Spring5.assets\image-20220606095914335-165833097371713.png"> </div> <img src="\images\Spring5.assets\image-20220606095944659-165833097371715.png" alt="image-20220606095944659"  /><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   1. 配置monster对象/javabean</span></span><br><span class="line"><span class="comment">   2. 在beans中可以配置多个bean</span></span><br><span class="line"><span class="comment">   3. bean表示就是一个java对象</span></span><br><span class="line"><span class="comment">   4. class属性是用于指定类的全路径-&gt;spring底层使用反射创建</span></span><br><span class="line"><span class="comment">   5. id属性表示该java对象在spring容器中的id, 通过id可以获取到对象</span></span><br><span class="line"><span class="comment">   6. &lt;property name=&quot;monsterId&quot; value=&quot;100&quot;&gt; 用于给该对象的属性赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">id</span>=<span class="string">&quot;monster01&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛魔王&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛮牛冲撞&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">id</span>=<span class="string">&quot;monster02&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛魔王~&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;芭蕉扇~&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="获取Monster对象"><a href="#获取Monster对象" class="headerlink" title="获取Monster对象"></a>获取Monster对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBeanTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMonster</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建容器 ApplicationContext</span></span><br><span class="line">        <span class="comment">//2. 该容器和容器配置文件关联</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 通过getBean获取对应的对象</span></span><br><span class="line">        <span class="comment">//   默认返回的是Object , 但是运行类型是Monster</span></span><br><span class="line">        <span class="comment">//Object monster01 = ioc.getBean(&quot;monster01&quot;);</span></span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> (Monster)ioc.getBean(<span class="string">&quot;monster01&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;monster01=&quot;</span> + monster01 + <span class="string">&quot; 运行类型=&quot;</span> + monster01.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;monster01=&quot;</span> + monster01 + <span class="string">&quot;属性name=&quot;</span> + monster01.getName() + <span class="string">&quot;，monserid=&quot;</span> + monster01.getMonsterID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 也可以再获取的时候，直接指定Class类型, 可以直接获取</span></span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster02=&quot;</span> + monster02 + <span class="string">&quot; 运行类型=&quot;</span> + monster02.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;monster02=&quot;</span> + monster02 + <span class="string">&quot;属性name=&quot;</span> + monster02.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><h4 id="1-怎么读取到了-beans-xml"><a href="#1-怎么读取到了-beans-xml" class="headerlink" title="1.怎么读取到了 beans.xml"></a>1.怎么读取到了 beans.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>读取的是out目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath());</span><br><span class="line">System.out.println(file);<span class="comment">//E:\VIP\AllDemo\Spring5\spring\out\production\spring</span></span><br></pre></td></tr></table></figure><h4 id="2-debug查看spring容器结构"><a href="#2-debug查看spring容器结构" class="headerlink" title="2.debug查看spring容器结构"></a>2.debug查看spring容器结构</h4><p>注意：配置debugger</p><img src="\images\Spring5.assets\image-20220606102901613-165833097371714.png" alt="image-20220606102901613" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606105540124-165833097371716.png" alt="image-20220606105540124" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606105851533-165833097371717.png" alt="image-20220606105851533" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606105949615-165833097371718.png" alt="image-20220606105949615" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606110819525-165833097371719.png" alt="image-20220606110819525" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606111207895-165833097371720.png" alt="image-20220606111207895" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606111359543-165833097371721.png" alt="image-20220606111359543" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606111442171-165833097371722.png" alt="image-20220606111442171" style="zoom:80%;" /><h4 id="3-查看容器注入了哪些bean对象"><a href="#3-查看容器注入了哪些bean对象" class="headerlink" title="3.查看容器注入了哪些bean对象"></a>3.查看容器注入了哪些bean对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] beanDefinitionNames = ioc.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">System.out.println(beanDefinitionName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606112058276-165833097371724.png"> </div> <h2 id="手动实现简单的Spring基于xml配置的程序"><a href="#手动实现简单的Spring基于xml配置的程序" class="headerlink" title="手动实现简单的Spring基于xml配置的程序"></a>手动实现简单的Spring基于xml配置的程序</h2><h3 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h3><p>​自己写（模拟）一个简单的 Spring 容器，通过读取 beans.xml，获取第 1 个 JavaBean: Monster 的 对象，并给该的对象属性赋值，放入到容器中，输出该对象信息。</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><div align="center"> <img src="\images\Spring5.assets\image-20220606141707615-165833097371723.png"> </div> <h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>​记得导入dom4j包。beans.xml ，Monster.java 和上文中的一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.lzwapplicationcontext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 1. 这个程序用于实现Spring的一个简单容器机制</span></span><br><span class="line"><span class="comment"> * 2. 后面我们还会详细实现</span></span><br><span class="line"><span class="comment"> * 3. 这里我们实现如何将beans.xml文件进行解析，并生成对象,放入容器中</span></span><br><span class="line"><span class="comment"> * 4. 提供一个方法 getBean(id) 返回对应的对象</span></span><br><span class="line"><span class="comment"> * 5. 这里仅仅只是理解Spring容器的机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//接收一个容器的配置文件 比如 beans.xml, 该文件默认在src</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwApplicationContext</span><span class="params">(String iocBeanXmlFile)</span> <span class="keyword">throws</span> DocumentException, ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//1. 得到类加载路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//2. 创建 Saxreader</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">//3. 得到Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="keyword">new</span> <span class="title class_">File</span>(path + iocBeanXmlFile));</span><br><span class="line">        <span class="comment">//4. 得到rootDocument</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">//5. 得到第一个bean-monster01</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">bean</span> <span class="operator">=</span> (Element) rootElement.elements(<span class="string">&quot;bean&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//6. 获取到第一个bean-monster01的相关属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">classFullPath</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">        List&lt;Element&gt; property = bean.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历-&gt;简化直接获取</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">monsterID</span> <span class="operator">=</span> Integer.parseInt(property.get(<span class="number">0</span>).attributeValue(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> property.get(<span class="number">1</span>).attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">skill</span> <span class="operator">=</span> property.get(<span class="number">2</span>).attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//7. 使用反射创建对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(classFullPath);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">o</span> <span class="operator">=</span> (Monster) aClass.newInstance();</span><br><span class="line">        <span class="comment">//给o对象赋值</span></span><br><span class="line">        <span class="comment">//反射来赋值=&gt; 这里简化，直接赋值-&gt;目的就是先理解流程</span></span><br><span class="line">        <span class="comment">//这里的方法就是setter方法</span></span><br><span class="line">        <span class="comment">//Method[] declaredMethods = aClass.getDeclaredMethods();</span></span><br><span class="line">        <span class="comment">//for (Method declaredMethod : declaredMethods) &#123;</span></span><br><span class="line">        <span class="comment">//    declaredMethod.invoke();</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        o.setMonsterID(monsterID);</span><br><span class="line">        o.setName(name);</span><br><span class="line">        o.setSkill(skill);</span><br><span class="line">        <span class="comment">//8. 将创建好的对象放入到singletonObjects</span></span><br><span class="line">        singletonObjects.put(id, o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletonObjects.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException, IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">LzwApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LzwApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606144605182-165833097371725.png"> </div> <h2 id="Spring-原生容器底层结构"><a href="#Spring-原生容器底层结构" class="headerlink" title="Spring 原生容器底层结构"></a>Spring 原生容器底层结构</h2><div align="center"> <img src="\images\Spring5.assets\image-20220606144822631-165833097371727.png"> </div> <hr><h1 id="第二章-Spring管理Bean-IOC"><a href="#第二章-Spring管理Bean-IOC" class="headerlink" title="第二章 Spring管理Bean-IOC"></a>第二章 Spring管理Bean-IOC</h1><h2 id="Spring-配置-x2F-管理-bean-介绍"><a href="#Spring-配置-x2F-管理-bean-介绍" class="headerlink" title="Spring 配置&#x2F;管理 bean 介绍"></a>Spring 配置&#x2F;管理 bean 介绍</h2><h3 id="Bean-管理包括两方面"><a href="#Bean-管理包括两方面" class="headerlink" title="Bean 管理包括两方面"></a>Bean 管理包括两方面</h3><ol><li>创建 bean 对象  2. 给 bean 注入属性</li></ol><h3 id="Bean-配置方式"><a href="#Bean-配置方式" class="headerlink" title="Bean 配置方式"></a>Bean 配置方式</h3><ol><li>基于 xml 文件配置方式  2. 基于注解方式</li></ol><h2 id="基于-XML-配置-bean"><a href="#基于-XML-配置-bean" class="headerlink" title="基于 XML 配置 bean"></a>基于 XML 配置 bean</h2><h3 id="通过id来获取-bean"><a href="#通过id来获取-bean" class="headerlink" title="通过id来获取 bean"></a>通过id来获取 bean</h3><p>​Spring5基本介绍这一章中都是通过id来获取 bean，在此不再赘述。</p><h3 id="通过类型来获取-bean"><a href="#通过类型来获取-bean" class="headerlink" title="通过类型来获取 bean"></a>通过类型来获取 bean</h3><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Monster,通过类型来获取--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           1.当我们给某个bean对象设置属性的时候</span></span><br><span class="line"><span class="comment">           2.底层是使用对应的setter方法完成的, 比如setName()</span></span><br><span class="line"><span class="comment">           3.如果没有这个方法，就会报错</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛魔王&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛮牛冲撞&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Bean类型来获取对象</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByType</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//直接传入class类型</span></span><br><span class="line">       <span class="type">Monster</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(Monster.class);</span><br><span class="line">       System.out.println(bean);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h4><ol><li>按类型来获取 bean，要求 ioc 容器中的同一个类的 bean 只能有一个，否则会抛出异常 NoUniqueBeanDefinitionException。</li></ol><div align="center"> <img src="\images\Spring5.assets\image-20220606155733023-165833097371729.png"> </div> <ol start="2"><li><p>这种方式的应用场景：比如 XxxAction&#x2F;Servlet&#x2F;Controller，或 XxxService 等在一个线程中只需要一个对象实例(单例)的情况。</p></li><li><p>在容器配置文件(比如 beans.xml)中给属性赋值， 底层是通过 setter 方法完成的，这也是为什么我们需要提供 setter 方法的原因。</p></li></ol><h3 id="通过构造器配置-bean"><a href="#通过构造器配置-bean" class="headerlink" title="通过构造器配置 bean"></a>通过构造器配置 bean</h3><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  配置Monster对象，并且指定构造器</span></span><br><span class="line"><span class="comment">     1. constructor-arg标签可以指定使用构造器的参数</span></span><br><span class="line"><span class="comment">     2. index表示构造器的第几个参数 从0开始计算的</span></span><br><span class="line"><span class="comment">     3. 除了可以通过index 还可以通过 name / type 来指定参数方式</span></span><br><span class="line"><span class="comment">     4. 解除大家的疑惑, 类的构造器，不能有完全相同类型和顺序的构造器，所以可以通过type来指定</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;白骨精&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;吸血&quot;</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;白骨精&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;吸血~&quot;</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;300&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;白骨精~&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;吸血~~&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过构造器来设置属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster03</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster03&quot;</span>,Monster.class);</span><br><span class="line">        System.out.println(monster03);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="细节说明-1"><a href="#细节说明-1" class="headerlink" title="细节说明"></a>细节说明</h4><ol><li>通过 index 属性来区分是第几个参数。2. 通过 type 属性来区分是什么类型(按照顺序)。</li></ol><h3 id="通过-p-名称空间配置-bean"><a href="#通过-p-名称空间配置-bean" class="headerlink" title="通过 p 名称空间配置 bean"></a>通过 p 名称空间配置 bean</h3><p>报错的时候，需要添加xmlns</p><img src="\images\Spring5.assets\image-20220606172244501-165833097371730.png" alt="image-20220606172244501" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606172317833-165833097371731.png" alt="image-20220606172317833" style="zoom:80%;" /><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster06&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">p:monsterID</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">p:name</span>=<span class="string">&quot;红孩儿&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">p:skill</span>=<span class="string">&quot;喷火&quot;</span></span></span><br><span class="line"><span class="tag">   /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通p名称空间来设置属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByP</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster06</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster06&quot;</span>,Monster.class);</span><br><span class="line">        System.out.println(monster06);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引用-x2F-注入其它-bean-对象"><a href="#引用-x2F-注入其它-bean-对象" class="headerlink" title="引用&#x2F;注入其它 bean 对象"></a>引用&#x2F;注入其它 bean 对象</h3><p>​在 spring 的 ioc 容器, 可以通过 ref 来实现 bean 对象的<strong>相互引用</strong>。</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * DAO对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDAOImpl</span> &#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MemberDAOImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberDAOImpl 构造器...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberDAOImpl add()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.dao.MemberDAOImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * Service类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberServiceImpl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MemberDAOImpl memberDAO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MemberDAOImpl <span class="title function_">getMemberDAO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memberDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemberDAO</span><span class="params">(MemberDAOImpl memberDAO)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberDAO = memberDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberServiceImpl add() 被调用&quot;</span>);</span><br><span class="line">        memberDAO.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置MemberDAOImpl对象</span></span><br><span class="line"><span class="comment">       1. ref=&quot;memberDAO&quot;表示  MemberServiceImpl对象属性memberDAO引用的对象是id=memberDAO的对象</span></span><br><span class="line"><span class="comment">       2. 这里就体现出spring容器的依赖注入</span></span><br><span class="line"><span class="comment">       3. 注意再spring容器中, 他是作为一个整体来执行的, 即如果你引用到一个bean对象, 对你配置的顺序没有要求</span></span><br><span class="line"><span class="comment">       4. 建议还是按顺序，好处是阅读的时候，比较方便</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.MemberDAOImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置MemberServiceImpl--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过ref设置bean属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByRef</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">MemberServiceImpl</span> <span class="variable">monsterService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;memberService&quot;</span>, MemberServiceImpl.class);</span><br><span class="line">        monsterService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606174010325-165833097371732.png"> </div> <h3 id="引用-x2F-注入内部-bean-对象"><a href="#引用-x2F-注入内部-bean-对象" class="headerlink" title="引用&#x2F;注入内部 bean 对象"></a>引用&#x2F;注入内部 bean 对象</h3><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置MemberServiceImpl对象-使用内部bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService2&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--自己配置一个内部bean--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.5lzw.spring.dao.MemberDAOImpl&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过内部bean设置属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByPro</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">MemberServiceImpl</span> <span class="variable">monsterServi5ce2</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;memberService2&quot;</span>, MemberServiceImpl.class);</span><br><span class="line">        monsterService2.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引用-x2F-注入集合-x2F-数组类型"><a href="#引用-x2F-注入集合-x2F-数组类型" class="headerlink" title="引用&#x2F;注入集合&#x2F;数组类型"></a>引用&#x2F;注入集合&#x2F;数组类型</h3><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//主人名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Monster&gt; monsterList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Monster&gt; monsterMap;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Monster&gt; monsterSet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] monsterName;</span><br><span class="line">    <span class="comment">//这个 Properties 是 Hashtable 的子类 , 是 key-value 的形式</span></span><br><span class="line">    <span class="comment">//这里 Properties key 和 value 都是 String</span></span><br><span class="line">    <span class="keyword">private</span> Properties pros;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Monster&gt; <span class="title function_">getMonsterList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterList</span><span class="params">(List&lt;Monster&gt; monsterList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterList = monsterList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Monster&gt; <span class="title function_">getMonsterMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterMap</span><span class="params">(Map&lt;String, Monster&gt; monsterMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterMap = monsterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Monster&gt; <span class="title function_">getMonsterSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterSet</span><span class="params">(Set&lt;Monster&gt; monsterSet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterSet = monsterSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getMonsterName() &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterName</span><span class="params">(String[] monsterName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterName = monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getPros</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pros;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPros</span><span class="params">(Properties pros)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pros = pros;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Master&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, monsterList=&quot;</span> + monsterList +</span><br><span class="line">                <span class="string">&quot;, monsterMap=&quot;</span> + monsterMap +</span><br><span class="line">                <span class="string">&quot;, monsterSet=&quot;</span> + monsterSet +</span><br><span class="line">                <span class="string">&quot;, monsterName=&quot;</span> + Arrays.toString(monsterName) +</span><br><span class="line">                <span class="string">&quot;, pros=&quot;</span> + pros +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Master对象</span></span><br><span class="line"><span class="comment">       体会 spring 容器配置特点 依赖注入-非常灵活</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Master&quot;</span> <span class="attr">id</span>=<span class="string">&quot;master&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;太上老君&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给list属性赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterList&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--引用其他bean--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster01&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster02&quot;</span>/&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;老鼠精&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃粮食&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给map属性赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterMap&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>monster03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--这里使用外部bean引入--&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster03&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>monster04<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster04&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给set属性赋值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterSet&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster05&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;monster06&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;金角大王&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吐水&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给数组属性赋值</span></span><br><span class="line"><span class="comment">           array标签中使用 value 还是 bean , ref .. 要根据你的业务决定</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterName&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>小妖怪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>大妖怪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>老妖怪<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给Properties属性赋值 结构k(String)-v(String)--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pros&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;ip&quot;</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByCollection</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;master&quot;</span>, Master.class);</span><br><span class="line">    System.out.println(master);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节说明-2"><a href="#细节说明-2" class="headerlink" title="细节说明"></a>细节说明</h4><ol><li>主要掌握List&#x2F;Map&#x2F;Properties三种集合的使用</li><li>Properties集合的特点。</li></ol><p>​（1）Properties 是 Hashtable 的子类 , 是 key-value 的形式。（2）key 和 value 都是 String。</p><h3 id="通过-util-名称空间创建-list"><a href="#通过-util-名称空间创建-list" class="headerlink" title="通过 util 名称空间创建 list"></a>通过 util 名称空间创建 list</h3><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookStore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; bookList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookStore</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBookList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookList</span><span class="params">(List&lt;String&gt; bookList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookList = bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BookStore&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;bookList=&quot;</span> + bookList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义一个util:list 并且指定id 可以达到数据复用</span></span><br><span class="line"><span class="comment">   在使用util:list 名称空间时候，需要引入相应的标签, 一般来说通过alt+enter会自动加入</span></span><br><span class="line"><span class="comment">   , 如果没有就手动添加一下即可.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;myBookList&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置BookStore对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.BookStore&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bookStore&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myBookList&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过util:list名称空间给属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByUtilList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookStore</span> <span class="variable">bookStore</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;bookStore&quot;</span>, BookStore.class);</span><br><span class="line">        System.out.println(bookStore);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="级联属性赋值"><a href="#级联属性赋值" class="headerlink" title="级联属性赋值"></a>级联属性赋值</h3><p>​spring 的 ioc 容器, 可以直接给对象属性的属性赋值， 即级联属性赋值。</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 部门类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dept</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 员工类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dept=&quot;</span> + dept +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Dept对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Dept&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置Emp对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Emp&quot;</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--这里我希望给dept的name属性指定值[级联属性赋值]--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java开发部门&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给属性进行级联赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByRelation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;emp=&quot;</span> + emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194740319-165833097371833.png"> </div> <h3 id="通过静态工厂获取bean"><a href="#通过静态工厂获取bean" class="headerlink" title="通过静态工厂获取bean"></a>通过静态工厂获取bean</h3><p>​在 spring 的 ioc 容器，可以通过静态工厂获取 bean 对象。</p><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 静态工厂类-可以返回Monster对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStaticFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Monster&gt; monsterMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用static代码块进行初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        monsterMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Monster&gt;();</span><br><span class="line">        monsterMap.put(<span class="string">&quot;monster_01&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;黄袍怪&quot;</span>, <span class="string">&quot;一阳指&quot;</span>));</span><br><span class="line">        monsterMap.put(<span class="string">&quot;monster_02&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">200</span>, <span class="string">&quot;九头金雕&quot;</span>, <span class="string">&quot;如来神掌&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个方法，返回Monster对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Monster <span class="title function_">getMonster</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置monster对象,通过静态工厂获取</span></span><br><span class="line"><span class="comment">      1. 通过静态工厂获取/配置bean</span></span><br><span class="line"><span class="comment">      2. class 是静态工厂类的全路径</span></span><br><span class="line"><span class="comment">      3. factory-method 表示是指定静态工厂类的哪个方法返回对象</span></span><br><span class="line"><span class="comment">      4. constructor-arg value=&quot;monster02&quot; value是指定要返回静态工厂的哪个对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_02&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_02&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过静态工厂获取bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByStaticFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster01&quot;</span>, Monster.class);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster02&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster01=&quot;</span> + my_monster01);</span><br><span class="line">        System.out.println(my_monster01 == my_monster02);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194723400-165833097371834.png"> </div> <h3 id="通过实例工厂获取对象"><a href="#通过实例工厂获取对象" class="headerlink" title="通过实例工厂获取对象"></a>通过实例工厂获取对象</h3><p>​在 spring 的 ioc 容器，可以通过实例工厂获取 bean 对象。</p><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 实例工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInstanceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Monster&gt; monster_map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过普通代码块进行初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        monster_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster_03&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">300</span>, <span class="string">&quot;牛魔王~&quot;</span>, <span class="string">&quot;芭蕉扇~&quot;</span>));</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster_04&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">400</span>, <span class="string">&quot;狐狸精~&quot;</span>, <span class="string">&quot;美人计~&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法返回Monster对象</span></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">getMonster</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monster_map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置2个实例工厂对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyInstanceFactory&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyInstanceFactory&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInstanceFactory2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置monster对象, 通过实例工厂</span></span><br><span class="line"><span class="comment">       1. factory-bean 指定使用哪个实例工厂对象返回bean</span></span><br><span class="line"><span class="comment">       2. factory-method 指定使用实例工厂对象的哪个方法返回bean</span></span><br><span class="line"><span class="comment">       3. constructor-arg value=&quot;monster03&quot; 指定获取到实例工厂中的哪个monster</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster03&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_03&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster04&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myInstanceFactory2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMonster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;monster_03&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过实例工厂获取bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByInstanceFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster03</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster03&quot;</span>, Monster.class);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster04</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster04&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster03=&quot;</span> + my_monster03);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster04=&quot;</span> + my_monster04);</span><br><span class="line">        System.out.println(my_monster03 == my_monster04);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194707616-165833097371835.png"> </div> <h3 id="通过-FactoryBean-获取对象-重点"><a href="#通过-FactoryBean-获取对象-重点" class="headerlink" title="通过 FactoryBean 获取对象(重点)"></a>通过 FactoryBean 获取对象(重点)</h3><p>​在 spring 的 ioc 容器，通过 FactoryBean 获取 bean 对象(重点)。</p><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 是一个FactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Monster&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个就是你配置时候，指定要获取的对象对应key</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Monster&gt; monster_map;</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">//代码块，完成初始化</span></span><br><span class="line">        monster_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster03&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">300</span>, <span class="string">&quot;牛魔王~&quot;</span>, <span class="string">&quot;芭蕉扇~&quot;</span>));</span><br><span class="line">        monster_map.put(<span class="string">&quot;monster04&quot;</span>, <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">400</span>, <span class="string">&quot;狐狸精~&quot;</span>, <span class="string">&quot;美人计~&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> monster_map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Monster.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;<span class="comment">//这里指定返回是否是单例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置monster对象，通过FactoryBean获取</span></span><br><span class="line"><span class="comment">      1. class 指定使用的FactoryBean</span></span><br><span class="line"><span class="comment">      2. key表示就是 MyFactoryBean 属性key</span></span><br><span class="line"><span class="comment">      3. value就是你要获取的对象对应key</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;my_monster05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.factory.MyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;monster04&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过FactoryBean获取bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">my_monster05</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;my_monster05&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;my_monster05=&quot;</span> + my_monster05);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194646489-165833097371836.png"> </div> <h3 id="bean-配置信息重用-继承"><a href="#bean-配置信息重用-继承" class="headerlink" title="bean 配置信息重用(继承)"></a>bean 配置信息重用(继承)</h3><p>​在 spring 的 ioc 容器，提供了一种继承的方式来实现 bean 配置信息的重用。</p><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Monster对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜈蚣精&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜇人&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      1. 配置Monster对象</span></span><br><span class="line"><span class="comment">      2.但是这个对象的属性值和 id=&quot;monster10&quot;对象属性一样</span></span><br><span class="line"><span class="comment">      3.parent=&quot;monster10&quot; 指定当前这个配置的对象的属性值从 id=monster10的对象来</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;monster10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置Monster对象</span></span><br><span class="line"><span class="comment">       1. 如果bean指定了 abstract=&quot;true&quot;, 表示该bean对象, 是用于被继承</span></span><br><span class="line"><span class="comment">       2. 本身这个bean就不能被获取/实例化</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster12&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜈蚣精~&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜇人~&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster13&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;monster12&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置Bean通过继承</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByExtends</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster11</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster11&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster11=&quot;</span> + monster11);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster13</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster13&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster13=&quot;</span> + monster13);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614194618378-165833097371837.png"> </div> <h3 id="bean-创建顺序"><a href="#bean-创建顺序" class="headerlink" title="bean 创建顺序"></a>bean 创建顺序</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>在 spring 的 ioc 容器，默认是按照配置的顺序创建 bean 对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Student&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Department&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​会先创建 student01 这个 bean 对象，然后创建 department01 这个 bean 对象。</p><ol start="2"><li>如果这样配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Student&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;department01&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.bean.Department&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​会先创建 department01 对象，再创建 student01 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Department</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Department() 被执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student()构造器被执行..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220606195913588-165833097371838.png"> </div> <p>​1在默认情况下，bean创建的顺序是按照配置顺序来的。但如果增加了 depends-on 属性，这时就会先创建有这个属性的bean。</p><h4 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h4><ol><li>看下面的配置，请问两个 bean 创建的顺序是什么？并分析执行流程。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.MemberDAOImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​（1）先创建 id&#x3D;memberDAO</p><p>​（2）再创建 id &#x3D; memberService</p><p>​（3）调用 memberServiceImpl.setMemberDAO() 完成引用</p><ol start="2"><li>看下面的配置，请问两个 bean 创建的顺序是什么？并分析执行流程。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.MemberServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.MemberDAOImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memberDAO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​（1）先创建 id &#x3D; memberService</p><p>​（2）再创建 id&#x3D;memberDAO</p><p>​（3）调用 memberServiceImpl.setMemberDAO() 完成引用</p><h3 id="bean-对象的单例和多例-重要"><a href="#bean-对象的单例和多例-重要" class="headerlink" title="bean 对象的单例和多例(重要)"></a>bean 对象的单例和多例(重要)</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>​在 spring 的 ioc 容器，在默认是按照单例创建的，即配置一个 bean 对象后，ioc 容器只会创建一个 bean 实例。 </p><p>​如果我们希望 ioc 容器配置的某个 bean 对象，是以多个实例形式创建的则可以通过配置 scope&#x3D;”prototype” 来指定。</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat()构造器执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Cat对象</span></span><br><span class="line"><span class="comment">      1. 在默认情况下 scope属性是 singleton</span></span><br><span class="line"><span class="comment">      2. 在ioc容器中, 只有一个这个bean对象</span></span><br><span class="line"><span class="comment">      3. 当程序员执行getBean时, 返回的的是同一个对象</span></span><br><span class="line"><span class="comment">      4. 如果我们希望每次getBean返回一个新的Bean对象，则可以scope=&quot;prototype&quot;</span></span><br><span class="line"><span class="comment">      5. 如果bean的配置是 scope=&quot;singleton&quot; lazy-init=&quot;true&quot; 这时,ioc容器就不会提前创建该对象,</span></span><br><span class="line"><span class="comment">      而是当执行getBean方法的时候，才会创建对象</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Cat&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花猫&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Scope</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanScope</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;cat&quot;</span>, Cat.class);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;cat&quot;</span>, Cat.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;cat=&quot;</span> + cat);</span><br><span class="line">        System.out.println(<span class="string">&quot;cat2=&quot;</span> + cat2);</span><br><span class="line">        System.out.println(cat == cat2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>默认是单例 singleton，在启动容器时，默认就会创建，并放入到 singletonObjects 集合。</p></li><li><p>当</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p> 设置为多实例机制后, 该 bean 是在 getBean()时才创建。</p></li><li><p>如果是单例singleton，同时希望在getBean时才创建，可以指定懒加载 lazy-init&#x3D;”true” (注意默认是 false)。</p></li><li><p>通常情况下，lazy-init 就使用默认值 false，在开发看来，用空间换时间是值得的，除非有特殊的要求。</p></li><li><p>如果 scope&#x3D;”prototype” 这时 lazy-init 属性的值不管是 ture，还是 false 都是在 getBean 时候，才创建对象。</p></li></ol><h3 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>bean 对象创建是由 JVM 完成的，然后执行如下方法。</p><ol><li>执行构造器</li><li>执行 set 相关方法 </li><li>调用 bean 的初始化的方法（需要配置）</li><li>使用 bean</li><li>当容器关闭时候，调用 bean 的销毁方法（需要配置）</li></ol><h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">House</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House() 构造器...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House setName()=&quot;</span> + name);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 这个方法是程序员来编写的.</span></span><br><span class="line">    <span class="comment">//2. 根据自己的业务逻辑来写.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House init()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 这个方法是程序员来编写的.</span></span><br><span class="line">    <span class="comment">//2. 根据自己的业务逻辑来写.</span></span><br><span class="line">    <span class="comment">//3. 名字也不是固定的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;House destroy()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;House&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置House对象，演示整个Bean的生命周期</span></span><br><span class="line"><span class="comment">       1. init-method=&quot;init&quot; 指定bean的初始化方法 , 在setter方法后执行</span></span><br><span class="line"><span class="comment">       2. init方法执行的时机，由spring容器来控制</span></span><br><span class="line"><span class="comment">       3. destroy-method=&quot;destroy&quot; 指定bean的销毁方法, 在容器关闭的时候执行</span></span><br><span class="line"><span class="comment">       4. destroy方法执行的时机，由spring容器来控制</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.House&quot;</span> <span class="attr">id</span>=<span class="string">&quot;house&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大豪宅&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Bean的生命周期</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanLife</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;house&quot;</span>, House.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;house=&quot;</span> + house);</span><br><span class="line">        <span class="comment">//关闭容器</span></span><br><span class="line">        <span class="comment">//1. ioc的编译类型 ApplicationContext , 运行类型 ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="comment">//2. 因为ClassPathXmlApplicationContext 实现了 ConfigurableApplicationContext</span></span><br><span class="line">        <span class="comment">//3. ClassPathXmlApplicationContext 是有close</span></span><br><span class="line">        <span class="comment">//4. 将ioc 转成ClassPathXmlApplicationContext，再调用close</span></span><br><span class="line">        <span class="comment">//ioc.close();</span></span><br><span class="line">        <span class="comment">//关闭ioc容器.</span></span><br><span class="line">        ((ClassPathXmlApplicationContext)ioc).close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614201718169-165833097371840.png"> </div> <h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>初始化 init 方法和 destory 方法，是程序员来指定。2. 销毁方法就是当关闭容器时，才会被调用。</li></ol><h3 id="配置-bean-的后置处理器-重难点"><a href="#配置-bean-的后置处理器-重难点" class="headerlink" title="*配置 bean 的后置处理器(重难点)"></a>*配置 bean 的后置处理器(重难点)</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><ol><li>在 spring 的 ioc 容器，可以配置 bean 的后置处理器。 </li><li>该处理器&#x2F;对象会在 <strong>bean 初始化方法</strong>(init)调用前和初始化方法调用后被调用 。</li><li>程序员可以在后置处理器中编写自己的代码。</li></ol><h4 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这是一个后置处理器, 需要实现 BeanPostProcessor接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 什么时候被调用：在Bean的init方法前被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 传入的在IOC容器中创建/配置Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName 传入的在IOC容器中创建/配置Bean的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  程序员对传入的bean 进行修改/处理【如果有需要的话】 ,返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInitialization().. bean=&quot;</span> + bean + <span class="string">&quot; beanName=&quot;</span> + beanName);</span><br><span class="line">        <span class="comment">//初步体验案例: 如果类型是House的统一改成 上海豪宅</span></span><br><span class="line">        <span class="comment">//对多个对象进行处理/编程==&gt;切面编程</span></span><br><span class="line">        <span class="keyword">if</span>(bean <span class="keyword">instanceof</span> House) &#123;</span><br><span class="line">            ((House)bean).setName(<span class="string">&quot;上海豪宅~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 什么时候被调用: 在Bean的init方法后被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean  传入的在IOC容器中创建/配置Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName 传入的在IOC容器中创建/配置Bean的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 程序员对传入的bean 进行修改/处理【如果有需要的话】 ,返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInitialization().. bean=&quot;</span> + bean + <span class="string">&quot; beanName=&quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans02.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置House对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.House&quot;</span> <span class="attr">id</span>=<span class="string">&quot;house&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大豪宅&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.House&quot;</span> <span class="attr">id</span>=<span class="string">&quot;house02&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;香港豪宅&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置后置处理器对象</span></span><br><span class="line"><span class="comment">       1. 在beans02.xml 容器配置文件 配置了 MyBeanPostProcessor</span></span><br><span class="line"><span class="comment">       2. 这时后置处理器对象，就会作用在该容器创建的Bean对象</span></span><br><span class="line"><span class="comment">       3. 已经是针对所有对象编程-&gt;切面编程AOP</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.MyBeanPostProcessor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans02.xml&quot;</span>);</span><br><span class="line">       <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;house&quot;</span>, House.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;house=&quot;</span> + house);</span><br><span class="line">       <span class="type">House</span> <span class="variable">house02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;house02&quot;</span>, House.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;使用house02=&quot;</span> + house02);</span><br><span class="line">       ((ConfigurableApplicationContext)ioc).close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><img src="\images\Spring5.assets\image-20220606220745721-165833097371839.png" alt="image-20220606220745721" style="zoom:80%;" /><img src="\images\Spring5.assets\image-20220606221613181-165833097371841.png" alt="image-20220606221613181" style="zoom:80%;" /><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><p>1、怎么执行到这个方法？&#x3D;&gt; 使用 AOP(反射+动态代理+IO+容器+注解) 。</p><p>2、有什么用？&#x3D;&gt; 可以对 IOC 容器中所有的对象进行统一处理，比如 日志处理&#x2F;权限的校 验&#x2F;安全的验证&#x2F;事务管理。</p><p>​–初步体验案例：如果类型是 House 的统一改成 上海豪宅 。</p><p>3、针对容器的所有对象吗？是的&#x3D;&gt;切面编程特点 。</p><p>4、后面会手动实现这个底层机制。</p><h3 id="通过属性文件给-bean-注入值"><a href="#通过属性文件给-bean-注入值" class="headerlink" title="通过属性文件给 bean 注入值"></a>通过属性文件给 bean 注入值</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>​在 spring 的 ioc 容器，通过属性文件给 bean 注入值。</p><h4 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h4><p>myproperties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">monsterId</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">jack</span></span><br><span class="line"><span class="attr">skill</span>=<span class="string">hello</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定属性文件在哪里</span></span><br><span class="line"><span class="comment">        location=&quot;classpath:my.properties&quot; 指定文件位置需要带上 classpath</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:my.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Monster对象</span></span><br><span class="line"><span class="comment">        1.通过属性文件给monster对象的属性赋值</span></span><br><span class="line"><span class="comment">        2.这时我们的属性值通过$&#123;属性名&#125;</span></span><br><span class="line"><span class="comment">        3.这里的属性名 就是 my.properties文件中的key</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span> <span class="attr">id</span>=<span class="string">&quot;monster1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;monsterId&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;skill&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过属性文件给bean属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans03.xml&quot;</span>);</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster1000</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster1000&quot;</span>, Monster.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;monster1000=&quot;</span> + monster1000);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​如果properites配置文件中有中文，访问站长工具（<a href="https://tool.chinaz.com/%EF%BC%89%E8%BF%9B%E8%A1%8CUnicode%E8%BF%9B%E8%A1%8C%E8%BD%AC%E7%A0%81%EF%BC%8C%E5%B0%86%E8%BD%AC%E5%90%8E%E7%9A%84%E7%BC%96%E7%A0%81%E5%A4%8D%E5%88%B6%E5%88%B0properties%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82">https://tool.chinaz.com/）进行Unicode进行转码，将转后的编码复制到properties文件中。</a></p><img src="\images\Spring5.assets\image-20220607193414294-165833097371842.png" alt="image-20220607193414294" style="zoom:80%;" /><div align="center"> <img src="\images\Spring5.assets\image-20220607193656928-165833097371843.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220607193734081-165833097371844.png"> </div> <h3 id="基于-XML-的-bean-的自动装配"><a href="#基于-XML-的-bean-的自动装配" class="headerlink" title="基于 XML 的 bean 的自动装配"></a>基于 XML 的 bean 的自动装配</h3><h4 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * DAO类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存 一个订单...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.dao.OrderDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * OrderService</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderDao</span><span class="params">(OrderDao orderDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderDao = orderDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.service.OrderService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这里的Action就是 Servlet-&gt;充当Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAction</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderService <span class="title function_">getOrderService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderService</span><span class="params">(OrderService orderService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置OrderDao对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.dao.OrderDao&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置OrderService对象</span></span><br><span class="line"><span class="comment">    1. autowire=&quot;byType&quot; 表示 在创建 orderService时</span></span><br><span class="line"><span class="comment">       通过类型的方式 给对象属性 自动完成赋值/引用</span></span><br><span class="line"><span class="comment">    2. 比如OrderService 对象有 private OrderDao orderDao</span></span><br><span class="line"><span class="comment">    3. 就会在容器中去找有没有 OrderDao类型对象</span></span><br><span class="line"><span class="comment">    4. 如果有，就会自动的装配, 如果是按照 byType 方式来装配, 这个容器中，不能有两个OrderDao类型对象</span></span><br><span class="line"><span class="comment">    5. 如果对象没有属性,  autowire就没有必要写</span></span><br><span class="line"><span class="comment">    6. 其它类推..</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    7. 如果设置的是 autowire=&quot;byName&quot; 表示通过名字完成自动装配</span></span><br><span class="line"><span class="comment">    8. 比如下面的 autowire=&quot;byName&quot; class=&quot;com.lzw.spring.service.OrderService&quot;</span></span><br><span class="line"><span class="comment">       1) 先看 OrderService 属性 private OrderDao orderDao(并不是根据这个&quot;orderDao&quot;为id进行装配)</span></span><br><span class="line"><span class="comment">       2) 再根据这个属性的setXxx()方法的 xxx 来找对象id(是根据这里的&quot;xxx&quot;来装配)</span></span><br><span class="line"><span class="comment">       3) public void setOrderDao() 就会找id=orderDao对象来进行自动装配(这里的&quot;orderDao&quot;就是2中的xxx)</span></span><br><span class="line"><span class="comment">       4) 如果没有就装配失败</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.service.OrderService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderService&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean autowire=&quot;byName&quot; class=&quot;com.lzw.spring.service.OrderService&quot; id=&quot;orderService&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置OrderAction--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.web.OrderAction&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderAction&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean autowire=&quot;byName&quot; class=&quot;com.lzw.spring.web.OrderAction&quot; id=&quot;orderAction&quot;/&gt;--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过自动装配来对属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByAutowire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans03.xml&quot;</span>);</span><br><span class="line">        <span class="type">OrderAction</span> <span class="variable">orderAction</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;orderAction&quot;</span>, OrderAction.class);</span><br><span class="line">        <span class="comment">//验证是否自动装配上OrderService</span></span><br><span class="line">        System.out.println(orderAction.getOrderService());</span><br><span class="line">        <span class="comment">//验证是否自动装配上OrderDao</span></span><br><span class="line">        System.out.println(orderAction.getOrderService().getOrderDao());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-EL-表达式配置Bean-了解"><a href="#Spring-EL-表达式配置Bean-了解" class="headerlink" title="Spring EL 表达式配置Bean(了解)"></a>Spring EL 表达式配置Bean(了解)</h3><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><ol><li><p>Spring Expression Language，Spring 表达式语言，简称 SpEL。支持运行时查询并可以操作对象。</p></li><li><p>和 EL 表达式一样，SpEL 根据 JavaBean 风格的 getXxx()、setXxx()方法定义的属性访问对象。</p></li><li><p>SpEL 使用#{…}作为定界符，所有在大框号中的字符都将被认为是 SpEL 表达式。 </p></li><li><p>不是重点，如果看到有人这样使用，能看懂即可。</p></li></ol><h4 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/6/7 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpELBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Monster monster;</span><br><span class="line">    <span class="keyword">private</span> String monsterName;</span><br><span class="line">    <span class="keyword">private</span> String crySound; <span class="comment">//叫声</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> Double result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpELBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">getMonster</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonster</span><span class="params">(Monster monster)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monster = monster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMonsterName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonsterName</span><span class="params">(String monsterName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monsterName = monsterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCrySound</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> crySound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCrySound</span><span class="params">(String crySound)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.crySound = crySound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResult</span><span class="params">(Double result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cry 方法会返回字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cry</span><span class="params">(String sound)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发出 &quot;</span> + sound + <span class="string">&quot;叫声...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//read 返回字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">read</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;正在看 &quot;</span> + bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SpELBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, monster=&quot;</span> + monster +</span><br><span class="line">                <span class="string">&quot;, monsterName=&#x27;&quot;</span> + monsterName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, crySound=&#x27;&quot;</span> + crySound + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, result=&quot;</span> + result +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个monster对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;monster01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.Monster&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜈蚣精~&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;skill&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蜇人~&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring el 表达式使用</span></span><br><span class="line"><span class="comment">        通过spel给bean的属性赋值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spELBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.bean.SpELBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 给字面量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;&#x27;LiAng&#x27;&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 引用其它bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monster&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;monster01&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 引用其它bean的属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;monsterName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;monster01.name&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 调用普通方法(返回值)  赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;crySound&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;spELBean.cry(&#x27;喵喵的..&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 调用静态方法(返回值) 赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;T(com.lzw.spring.bean.SpELBean).read(&#x27;天龙八部&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sp el 通过运算赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;89*1.2&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过spring el 对属性赋值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanBySpel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans04.xml&quot;</span>);</span><br><span class="line">        <span class="type">SpELBean</span> <span class="variable">spELBean</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;spELBean&quot;</span>, SpELBean.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;spELBean=&quot;</span> + spELBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="基于注解配置-bean-重点"><a href="#基于注解配置-bean-重点" class="headerlink" title="*基于注解配置 bean(重点)"></a>*基于注解配置 bean(重点)</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>​基于注解的方式配置 bean，主要是项目开发中的组件，比如 Controller、Service 和 Dao。</p><h5 id="组件注解的形式："><a href="#组件注解的形式：" class="headerlink" title="组件注解的形式："></a>组件注解的形式：</h5><ol><li><strong>@Component</strong> 表示当前注解标识的是一个组件 。</li><li><strong>@Controller</strong> 表示当前注解标识的是一个控制器，通常用于 Servlet 。</li><li><strong>@Service</strong> 表示当前注解标识的是一个处理业务逻辑的类，通常用于 Service 类。</li><li><strong>@Repository</strong> 表示当前注解标识的是一个持久化层的类，通常用于 Dao 类。</li></ol><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p>​使用注解的方式来配置 Controller &#x2F; Service &#x2F; Respository &#x2F; Component。</p><p>​首先要引入 spring-aop-5.3.8.jar。</p><div align="center"> <img src="\images\Spring5.assets\image-20220608212912194-165833097371845.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span> 标识该类是一个Service类/对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 标识该类是一个组件, 是一个通用的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(value = &quot;lzw1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置容器要扫描的包</span></span><br><span class="line"><span class="comment">      1. component-scan 要对指定包下的类进行扫描, 并创建对象到容器</span></span><br><span class="line"><span class="comment">      2. base-package 指定要扫描的包</span></span><br><span class="line"><span class="comment">      3. 含义是当spring容器创建/初始化时，就会扫描com.lzw.spring.component包</span></span><br><span class="line"><span class="comment">         下的所有的 有注解 @Controller / @Service / @Repository / @Component类</span></span><br><span class="line"><span class="comment">         将其实例化，生成对象，放入到ioc容器</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解来配置Bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanByAnnotation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans05.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> ioc.getBean(UserDao.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ioc.getBean(UserService.class);</span><br><span class="line">        <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> ioc.getBean(UserAction.class);</span><br><span class="line">        <span class="type">MyComponent</span> <span class="variable">myComponent</span> <span class="operator">=</span> ioc.getBean(MyComponent.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;userDao=&quot;</span> + userDao);</span><br><span class="line">        System.out.println(<span class="string">&quot;userService=&quot;</span> + userService);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction=&quot;</span> + userAction);</span><br><span class="line">        System.out.println(<span class="string">&quot;myComponent=&quot;</span> + myComponent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h4><ol><li>需要导入 spring-aop-5.3.8.jar。</li><li>必须在 Spring 配置文件中指定”自动扫描的包”，IOC 容器才能够检测到当前项目中哪些类被标识了注解， 注意导入 context 名称空间。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--resource-pattern=&quot;User*.class&quot; 表示只扫描com.lzw.spring.component 和它的子包下的User打头的类--&gt;</span></span><br></pre></td></tr></table></figure><p>​可以使用通配符 * 来指定 ，比如 com.lzw.spring.* 表示。</p><ol start="3"><li><p>Spring 的 IOC 容器不能检测一个使用了@Controller 注解的类到底是不是一个真正的控制器。注解的名称是用于程序员自己识别当前标识的是什么组件。其它的@Service @Repository 也是一样的道理 [也就是说 Spring 的 IOC 容器只要检查到注解就会生成对象， 但是这个注解的含义 Spring 不会识别，注解是给程序员编程方便看的]。</p></li><li><pre><code class="xml">&lt;context:component-scan base-package=&quot;com.lzw.spring.component&quot; resource-pattern=&quot;User*.class&quot;/&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   resource-pattern=&quot;User*.class&quot;：表示只扫描满足要求的类[使用的少，不想扫描，不写注解就可以，知道这个知识点即可]。</span><br><span class="line"></span><br><span class="line">5. 排除哪些类，以 annotaion 注解为例。</span><br><span class="line"></span><br><span class="line">   ```xml</span><br><span class="line">   &lt;!--</span><br><span class="line">          需求：如果我们希望排除某个包/子包下的某种类型的注解，可以通过exclude-filter来指定</span><br><span class="line">          1. context:exclude-filter 指定要排除哪些类</span><br><span class="line">          2. type 指定排除方式 annotation表示按照注解来排除</span><br><span class="line">          3. expression=&quot;org.springframework.stereotype.Service&quot; 指定要排除的注解的全路径</span><br><span class="line">      --&gt;</span><br><span class="line">       &lt;context:component-scan base-package=&quot;com.lzw.spring.component&quot;&gt;</span><br><span class="line">           &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Service&quot;/&gt;</span><br><span class="line">           &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot;/&gt;</span><br><span class="line">       &lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>指定自动扫描哪些注解类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  需求：如果我们希望按照自己的规则，来扫描包/子包下的某些注解, 可以通过 include-filter</span></span><br><span class="line"><span class="comment">  1. use-default-filters=&quot;false&quot; 表示不使用默认的过滤机制/扫描机制</span></span><br><span class="line"><span class="comment">  2. context:include-filter 表示要去扫描哪些类</span></span><br><span class="line"><span class="comment">  3. type=&quot;annotation&quot; 按照注解方式来扫描/过滤</span></span><br><span class="line"><span class="comment">  4. expression=&quot;org.springframework.stereotype.Service&quot; 指定要扫描的注解的全路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>默认情况：标记注解后，类名首字母小写作为 id 的值。也可以使用注解的 value 属性指定 id 值，并且 value 可以省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><div align="center"> <img src="\images\Spring5.assets\image-20220608222952390-165833097371846.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 使用 <span class="doctag">@Repository</span> 标识该类是一个Repository 即是一个持久化层的类/对象</span></span><br><span class="line"><span class="comment"> * 1. 标记注解后，类名首字母小写作为id的值(默认)</span></span><br><span class="line"><span class="comment"> * 2. value = &quot;lzwUserDao&quot; 使用指定的 lzwUserDao作为UserDao对象的id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(value = &quot;lzwUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220608223553407-165833097371847.png"> </div> <ol start="8"><li>扩展-@Controller 、@Service、@Component 区别 <a href="https://zhuanlan.zhihu.com/p/454638478">https://zhuanlan.zhihu.com/p/454638478</a></li></ol><h3 id="手动开发简单的-Spring-基于注解配置的程序"><a href="#手动开发简单的-Spring-基于注解配置的程序" class="headerlink" title="手动开发简单的 Spring 基于注解配置的程序"></a>手动开发简单的 Spring 基于注解配置的程序</h3><h4 id="需求说明-2"><a href="#需求说明-2" class="headerlink" title="需求说明"></a>需求说明</h4><ol><li><p>自己写一个简单的Spring容器，通过读取类的注解 (@Component @Controller @Service @Reponsitory)，将对象注入到 IOC 容器。</p></li><li><p>也就是说，不使用 Spring 原生框架，我们自己使用 IO+Annotaion+反射+集合 技术实现，打通 Spring 注解方式开发的技术痛点。</p></li></ol><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><div align="center"> <img src="\images\Spring5.assets\image-20220609091031508-165833097371848.png"> </div> <h4 id="1-搭建基本结构并获取的扫描包"><a href="#1-搭建基本结构并获取的扫描包" class="headerlink" title="1. 搭建基本结构并获取的扫描包"></a>1. 搭建基本结构并获取的扫描包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@Target</span>(ElementType.TYPE)指定我们的 ComponentScan注解 可以修饰 Type程序元素</span></span><br><span class="line"><span class="comment"> * 2. <span class="doctag">@Retention</span>(RetentionPolicy.RUNTIME) 指定 ComponentScan注解 保留范围</span></span><br><span class="line"><span class="comment"> * 3. String value() default &quot;&quot;; 表示 ComponentScan 可以传入 value属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这是一个配置类，作用类似于原生Spring的 beans.xml 容器配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * LzwSpringApplicationContext 类的作用类似Spring原生ioc容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line">    <span class="comment">//ioc 存放的就是通过反射创建的对象（基于注解方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Object&gt; ioc = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="comment">//singletonObjects</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwSpringApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;this.configClass = &quot; + this.configClass);</span></span><br><span class="line">        <span class="comment">//获取要扫描的包</span></span><br><span class="line">        <span class="comment">//1. 先得到 LzwSpringConfig 配置的 @ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> (ComponentScan)<span class="built_in">this</span>.configClass.getDeclaredAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2. 通过 componentScan的value =&gt; 即要扫描的包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> componentScan.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;要扫描的包 = &quot;</span> + path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-获取扫描包下所有-class-文件"><a href="#2-获取扫描包下所有-class-文件" class="headerlink" title="2. 获取扫描包下所有.class 文件"></a>2. 获取扫描包下所有.class 文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.lzwapplicationcontext.LzwApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * LzwSpringApplicationContext 类的作用类似Spring原生ioc容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line">    <span class="comment">//ioc 存放的就是通过反射创建的对象（基于注解方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Object&gt; ioc = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="comment">//singletonObjects</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwSpringApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;this.configClass = &quot; + this.configClass);</span></span><br><span class="line">        <span class="comment">//获取要扫描的包</span></span><br><span class="line">        <span class="comment">//1. 先得到 LzwSpringConfig 配置的 @ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> (ComponentScan)<span class="built_in">this</span>.configClass.getDeclaredAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2. 通过 componentScan的value =&gt; 即要扫描的包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> componentScan.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;要扫描的包 = &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要扫描的包下的所有资源(.class)</span></span><br><span class="line">        <span class="comment">//1. 先得到类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> LzwApplicationContext.class.getClassLoader();</span><br><span class="line">        <span class="comment">//2. 通过类的加载器获取到要扫描的包的资源 url 类似路径</span></span><br><span class="line">        path = path.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//一定要把 .  替换为 /</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> classLoader.getResource(path);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;resource = &quot; + resource);</span></span><br><span class="line">        <span class="comment">//3. 将要加载的资源(.class) 路径下的文件进行遍历 =&gt; io</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(resource.getFile());</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">                System.out.println(f.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-获取全类名-反射对象-放入容器"><a href="#3-获取全类名-反射对象-放入容器" class="headerlink" title="3.  获取全类名 反射对象 放入容器"></a>3.  获取全类名 反射对象 放入容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.lzwapplicationcontext.LzwApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * LzwSpringApplicationContext 类的作用类似Spring原生ioc容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class configClass;</span><br><span class="line">    <span class="comment">//ioc 存放的就是通过反射创建的对象（基于注解方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Object&gt; ioc = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();<span class="comment">//singletonObjects</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LzwSpringApplicationContext</span><span class="params">(Class configClass)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.configClass = configClass;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;this.configClass = &quot; + this.configClass);</span></span><br><span class="line">        <span class="comment">//获取要扫描的包</span></span><br><span class="line">        <span class="comment">//1. 先得到 LzwSpringConfig 配置的 @ComponentScan(value = &quot;com.lzw.spring.component&quot;)</span></span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> (ComponentScan)<span class="built_in">this</span>.configClass.getDeclaredAnnotation(ComponentScan.class);</span><br><span class="line">        <span class="comment">//2. 通过 componentScan的value =&gt; 即要扫描的包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> componentScan.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;要扫描的包 = &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要扫描的包下的所有资源(.class)</span></span><br><span class="line">        <span class="comment">//1. 先得到类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> LzwApplicationContext.class.getClassLoader();</span><br><span class="line">        <span class="comment">//2. 通过类的加载器获取到要扫描的包的资源 url 类似路径</span></span><br><span class="line">        path = path.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//一定要把 .  替换为 /</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> classLoader.getResource(path);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;resource = &quot; + resource);</span></span><br><span class="line">        <span class="comment">//3. 将要加载的资源(.class) 路径下的文件进行遍历 =&gt; io</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(resource.getFile());</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="comment">//System.out.println(&quot;===================&quot;);</span></span><br><span class="line">                <span class="comment">//System.out.println(f.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//E:\VIP\AllDemo\Spring5\spring\out\production\spring\com\lzw\spring\component\MyComponent.class</span></span><br><span class="line">                <span class="comment">//获取到 com.lzw.spring.component.MyComponent</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileAbsolutePath</span> <span class="operator">=</span> f.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//这里我们只处理 .class文件</span></span><br><span class="line">                <span class="keyword">if</span>(fileAbsolutePath.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//1. 获取到类名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> fileAbsolutePath.substring(fileAbsolutePath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>, fileAbsolutePath.indexOf(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;className = &quot; + className);</span></span><br><span class="line">                    <span class="comment">//2. 获取类的完整路径（全类名）</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">classFullName</span> <span class="operator">=</span> path.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>) + <span class="string">&quot;.&quot;</span> + className;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;classFullName = &quot; + classFullName);</span></span><br><span class="line">                    <span class="comment">//3. 判断该类是不是需要注入容器, 就看该类是不是有注解 @Component @Service..</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//这时，我们就得到了该类的 Class对象</span></span><br><span class="line">                        <span class="comment">//Class.forName(classFullName)。forName()获得完整类的信息，loadClass()轻量级。</span></span><br><span class="line">                        <span class="comment">//1. Class clazz = Class.forName(classFullName) 可以反射加载类</span></span><br><span class="line">                        <span class="comment">//2. classLoader.loadClass(classFullName); 可以反射类的Class</span></span><br><span class="line">                        <span class="comment">//3. 区别是 : (1)方式会调用该类的静态方法, (2)方法不会</span></span><br><span class="line">                        <span class="comment">//4. aClass.isAnnotationPresent(Component.class) 判断该类是否有 @Component</span></span><br><span class="line">                        Class&lt;?&gt; aClass = classLoader.loadClass(classFullName);</span><br><span class="line">                        <span class="keyword">if</span>(aClass.isAnnotationPresent(Component.class) || aClass.isAnnotationPresent(Controller.class)</span><br><span class="line">                                || aClass.isAnnotationPresent(Service.class)||aClass.isAnnotationPresent(Repository.class))&#123;</span><br><span class="line">                            <span class="comment">//这时就可以反射对象，并放入到容器中</span></span><br><span class="line">                            Class&lt;?&gt; clazz = Class.forName(classFullName);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                            <span class="comment">//放入到容器中，将类名的首字母小写作为id</span></span><br><span class="line"></span><br><span class="line">                            ioc.put(StringUtils.uncapitalize(className),instance);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编写方法返回对容器中对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.MyComponent;</span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.UserAction;</span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.component.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwSpringApplicationContextTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LzwSpringApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LzwSpringApplicationContext</span>(LzwSpringConfig.class);</span><br><span class="line">        <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> (UserAction) ioc.getBean(<span class="string">&quot;userAction&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction&quot;</span> + userAction);</span><br><span class="line">        <span class="type">MyComponent</span> <span class="variable">myComponent</span> <span class="operator">=</span> (MyComponent) ioc.getBean(<span class="string">&quot;myComponent&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;myComponent&quot;</span> + myComponent);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) ioc.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userService=&quot;</span> + userService);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ioc.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userDao=&quot;</span> + userDao);</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609102334694-165833097371849.png"> </div> <h4 id="注意事项和细节说明-1"><a href="#注意事项和细节说明-1" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h4><p>​还可以通过@Component(value &#x3D; “xx”) @Controller(value &#x3D; “yy”) @Service(value &#x3D; “zz”) 中指定的 value，给 bean 分配 id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fileAbsolutePath.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                   <span class="comment">//1. 获取到类名</span></span><br><span class="line">                   <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> fileAbsolutePath.substring(fileAbsolutePath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>, fileAbsolutePath.indexOf(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">                   <span class="comment">//System.out.println(&quot;className = &quot; + className);</span></span><br><span class="line">                   <span class="comment">//2. 获取类的完整路径（全类名）</span></span><br><span class="line">                   <span class="type">String</span> <span class="variable">classFullName</span> <span class="operator">=</span> path.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>) + <span class="string">&quot;.&quot;</span> + className;</span><br><span class="line">                   <span class="comment">//System.out.println(&quot;classFullName = &quot; + classFullName);</span></span><br><span class="line">                   <span class="comment">//3. 判断该类是不是需要注入容器, 就看该类是不是有注解 @Component @Service..</span></span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">//这时，我们就得到了该类的 Class对象</span></span><br><span class="line">                       <span class="comment">//Class.forName(classFullName)。forName()获得完整类的信息，loadClass()轻量级。</span></span><br><span class="line">                       <span class="comment">//1. Class clazz = Class.forName(classFullName) 可以反射加载类</span></span><br><span class="line">                       <span class="comment">//2. classLoader.loadClass(classFullName); 可以反射类的Class</span></span><br><span class="line">                       <span class="comment">//3. 区别是 : (1)方式会调用该类的静态方法, (2)方法不会</span></span><br><span class="line">                       <span class="comment">//4. aClass.isAnnotationPresent(Component.class) 判断该类是否有 @Component</span></span><br><span class="line">                       Class&lt;?&gt; aClass = classLoader.loadClass(classFullName);</span><br><span class="line">                       <span class="keyword">if</span>(aClass.isAnnotationPresent(Component.class) || aClass.isAnnotationPresent(Controller.class)</span><br><span class="line">                               || aClass.isAnnotationPresent(Service.class)||aClass.isAnnotationPresent(Repository.class))&#123;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">//演示一个Component注解指定value，分配id</span></span><br><span class="line">                           <span class="keyword">if</span>(aClass.isAnnotationPresent(Component.class))&#123;</span><br><span class="line">                               <span class="comment">//获取到该注解</span></span><br><span class="line">                               <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> aClass.getDeclaredAnnotation(Component.class);</span><br><span class="line">                               <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> component.value();</span><br><span class="line">                               <span class="keyword">if</span>(!<span class="string">&quot;&quot;</span>.endsWith(id))&#123;</span><br><span class="line">                                   className = id;<span class="comment">//替换</span></span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">//这时就可以反射对象，并放入到容器中</span></span><br><span class="line">                           Class&lt;?&gt; clazz = Class.forName(classFullName);</span><br><span class="line">                           <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                           <span class="comment">//放入到容器中，将类名的首字母小写作为id</span></span><br><span class="line"></span><br><span class="line">                           ioc.put(StringUtils.uncapitalize(className),instance);</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h4><ol><li><p>基于注解配置 bean，也可实现自动装配，使用的注解是：@AutoWired 或者 @Resource。</p></li><li><p>@AutoWired 的规则说明</p><p>（1）在 IOC 容器中查找待装配的组件的类型，如果有唯一的 bean 匹配，则使用该 bean 装配</p><p>（2）如果待装配的类型对应的 bean 在 IOC 容器中有多个，则使用待装配的属性的属性名作为 id 值再进行查找，找到就装配，找不到就抛异常。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span> 标识该类是一个Service类/对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService hi()~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService200;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction 的sayOK()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction 装配的 userService属性=&quot;</span> + userService200);</span><br><span class="line">        userService200.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置两个UserService对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.component.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService200&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;com.lzw.spring.component.UserService&quot; id=&quot;userService300&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解来配置Bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProByAutowired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans06.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ioc容器中的userService=&quot;</span> + userService);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService200</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService200&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ioc容器中的userService200=&quot;</span> + userService200);</span><br><span class="line">        <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userAction&quot;</span>, UserAction.class);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;userAction=&quot; + userAction);</span></span><br><span class="line">        userAction.sayOk();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614221321789-165833097371850.png"> </div> <h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ol start="3"><li><p>@Resource 的规则说明</p><p>（1）@Resource 有两个属性是比较重要的，分是 name 和 type，Spring 将@Resource 注解的 name 属性解析为 bean 的名字，而 type 属性则解析为 bean 的类型。所以如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。</p><p>（2）如果@Resource 没有指定 name 和 type，则先使用byName注入策略，如果匹配不上，再使用 byType 策略，如果都不成功，就会报错。</p><p>（3）如果@Resource 指定type，并且对应的 bean 在 IOC 容器中有多个，则会继续使用待装配的属性的属性名作为 id 值进行查找，找到就装配，找不到就抛异常。</p></li><li><p>建议：不管是@Autowired 还是 @Resource 都保证属性名是规范的写法就可以注入。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">    <span class="comment">// @Resource(name = &quot;userService&quot;) 表示装配id=userService的对象</span></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;userService200&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Resource(type = UserService.class) 表示按照 UserService类型进行装配，这时要求容器中只能有一个这样类型的对象</span></span><br><span class="line">    <span class="comment">//@Resource(type = UserService.class)</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService200;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction 的sayOK()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction 装配的 userService属性=&quot;</span> + userService200);</span><br><span class="line">        userService200.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.component&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置两个UserService对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.component.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService200&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;com.lzw.spring.component.UserService&quot; id=&quot;userService300&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解来配置Bean</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProByAutowired</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans06.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;ioc容器中的userService=&quot;</span> + userService);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService200</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userService200&quot;</span>, UserService.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;ioc容器中的userService200=&quot;</span> + userService200);</span><br><span class="line">    <span class="type">UserAction</span> <span class="variable">userAction</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userAction&quot;</span>, UserAction.class);</span><br><span class="line">    <span class="comment">//System.out.println(&quot;userAction=&quot; + userAction);</span></span><br><span class="line">    userAction.sayOk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614222835992-165833097371851.png"> </div> <h4 id="Autowired-和-Qualifier组合"><a href="#Autowired-和-Qualifier组合" class="headerlink" title="@Autowired 和 @Qualifier组合"></a>@Autowired 和 @Qualifier组合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span> 标识该类是一个控制器Controller, 通常这个类是一个Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> &#123;</span><br><span class="line">    <span class="comment">//指定id进行组装, 也可以使用@Autowired 和 @Qualifier(value = &quot;userService200&quot;)</span></span><br><span class="line">    <span class="comment">//这时，是装配的 id=userService200 , 需要两个注解都需要写上</span></span><br><span class="line">    <span class="comment">//等价于 @Resource(name = &quot;userService200&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userService200&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction 的sayOK()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userAction 装配的 userService属性=&quot;</span> + userService);</span><br><span class="line">        userService.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220614223140240-165833097371852.png"> </div> <h3 id="泛型依赖注入"><a href="#泛型依赖注入" class="headerlink" title="泛型依赖注入"></a>泛型依赖注入</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ol><li>为了更好的管理有继承和相互依赖的 bean 的自动装配，spring 还提供基于泛型依赖的注入机制 。</li><li>在继承关系复杂情况下，泛型依赖注入就会有很大的优越性。</li></ol><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><h5 id="各个类关系图"><a href="#各个类关系图" class="headerlink" title="各个类关系图"></a>各个类关系图</h5><img src="\images\Spring5.assets\image-20220609144836871-165833097371853.png" alt="image-20220609144836871" style="zoom:80%;" /><p>​传统方法是将 PhoneDao &#x2F;BookDao 自动装配到 BookService&#x2F;PhoneSerive 中，当这种继承关系多时，就比较麻烦，可以使用 spring 提供的泛型依赖注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Book&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BookDao 的 save()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Phone&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PhoneDao 的 save()..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseService</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BaseDao&lt;T&gt; baseDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        baseDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;Book&gt; &#123;</span><br><span class="line">    <span class="comment">//并没有写属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.depinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;Phone&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.depinjection&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过泛型依赖来配置Bean</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProByDependencyInjection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans07.xml&quot;</span>);</span><br><span class="line">        <span class="type">PhoneService</span> <span class="variable">phoneService</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;phoneService&quot;</span>, PhoneService.class);</span><br><span class="line">        phoneService.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220615095233033-165833097371854.png"> </div> <hr><h1 id="第三章-AOP"><a href="#第三章-AOP" class="headerlink" title="第三章 AOP"></a>第三章 AOP</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>​AOP 讲解：spring-framework-5.3.8&#x2F;docs&#x2F;reference&#x2F;html&#x2F;core.html#aop </p><p>​AOP API：spring-framework-5.3.8&#x2F;docs&#x2F;javadoc-api&#x2F;index.html</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="需求说明-3"><a href="#需求说明-3" class="headerlink" title="需求说明"></a>需求说明</h3><ol><li>有 Vehicle(交通工具接口，有一个 run 方法)，下面有两个实现类 Car 和 Ship 。</li><li>当运行 Car 对象 的 run 方法和 Ship 对象的 run 方法时，输入如下内容, 注意观察前后 有统一的输出。</li></ol><h3 id="解决方案-传统方式"><a href="#解决方案-传统方式" class="headerlink" title="解决方案-传统方式"></a>解决方案-传统方式</h3><h5 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 接口，该接口有run方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具开始运行了....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小汽车在路上 running....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具停止运行了....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具开始运行了....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;大轮船在水上 running....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交通工具停止运行了....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">        ship.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>​代码冗余，其实就是单个对象的调用，并没有很好的解决。</p><h3 id="解决方案-动态代理方式"><a href="#解决方案-动态代理方式" class="headerlink" title="解决方案-动态代理方式!!!!!"></a>解决方案-动态代理方式!!!!!</h3><h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具开始运行了....&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小汽车在路上 running....&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具停止运行了....&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具开始运行了....&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大轮船在水上 running....&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;交通工具停止运行了....&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * VehicleProxyProvider 该类可以返回一个代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VehicleProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个属性</span></span><br><span class="line">    <span class="comment">//target_vehicle 表示真正要执行的对象，</span></span><br><span class="line">    <span class="comment">//该对象的类实现了Vehicle接口</span></span><br><span class="line">    <span class="keyword">private</span> Vehicle target_vehicle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VehicleProxyProvider</span><span class="params">(Vehicle target_vehicle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_vehicle = target_vehicle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，可以返回一个代理对象</span></span><br><span class="line">    <span class="comment">//1.这个方法非常重要，理解有一定难度</span></span><br><span class="line">    <span class="keyword">public</span> Vehicle <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_vehicle.getClass().getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要代理的对象/被执行对象 的接口信息,底层是通过接口来完成调用</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_vehicle.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建InvocationHandler 对象</span></span><br><span class="line">        <span class="comment">//因为 InvocationHandler 是接口，所以我们可以通过匿名对象的方式来创建该对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public interface InvocationHandler &#123;</span></span><br><span class="line"><span class="comment">         *  public Object invoke(Object proxy, Method method, Object[] args)</span></span><br><span class="line"><span class="comment">         *         throws Throwable;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * invoke 方法是将来执行我们的target_vehicle的方法时，会调用到</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> o 表示代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 就是通过代理对象调用方法时，的哪个方法 代理对象.run()</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args : 表示调用 代理对象.run(xx) 传入的参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 表示 代理对象.run(xx) 执行后的结果.</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;交通工具开始运行了....&quot;</span>);</span><br><span class="line">                <span class="comment">//method 是：public abstract void com.lzw.spring.proxy2.Vehicle.run()</span></span><br><span class="line">                <span class="comment">//target_vehicle 是：Ship对象</span></span><br><span class="line">                <span class="comment">//args 是null</span></span><br><span class="line">                <span class="comment">//这里通过反射+动态绑定机制，就会执行到被代理对象的方法</span></span><br><span class="line">                <span class="comment">//执行完毕就返回</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target_vehicle, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;交通工具停止运行了....&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                                          InvocationHandler h)</span></span><br><span class="line"><span class="comment">          1. Proxy.newProxyInstance() 可以返回一个代理对象</span></span><br><span class="line"><span class="comment">          2. ClassLoader loader: 类的加载器.</span></span><br><span class="line"><span class="comment">          3. Class&lt;?&gt;[] interfaces 就是将来要代理的对象的接口信息</span></span><br><span class="line"><span class="comment">          4. InvocationHandler h 调用处理器/对象 有一个非常重要的方法invoke</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">proxy</span> <span class="operator">=</span> (Vehicle)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">        ship.run();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">proxyRun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">        <span class="comment">//创建VehicleProxyProvider对象, 并且我们传入的要代理的对象</span></span><br><span class="line">        <span class="type">VehicleProxyProvider</span> <span class="variable">vehicleProxyProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VehicleProxyProvider</span>(ship);</span><br><span class="line">        <span class="comment">//获取代理对象，该对象可以代理执行方法</span></span><br><span class="line">        <span class="comment">//1. proxy 编译类型 Vehicle</span></span><br><span class="line">        <span class="comment">//2. 运行类型 是代理类型 class com.sun.proxy.$Proxy9</span></span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">proxy</span> <span class="operator">=</span> vehicleProxyProvider.getProxy();</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy的编译类型是 Vehicle&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;proxy的运行类型是 &quot;</span> + proxy.getClass());</span><br><span class="line">        <span class="comment">//下面家解读怎么 执行到 代理对象的 public Object invoke(Object o, Method method, Object[] args)</span></span><br><span class="line">        <span class="comment">//proxy的编译类型是 Vehicle, 运行类型是 class com.sun.proxy.$Proxy9</span></span><br><span class="line">        <span class="comment">//所以当执行run方法时，会执行到 代理对象的invoke</span></span><br><span class="line">        <span class="comment">//如何体现动态 [1. 被代理的对象 2. 方法]</span></span><br><span class="line">        proxy.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">proxyRun</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">ship</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ship</span>();</span><br><span class="line">       <span class="comment">//创建VehicleProxyProvider对象, 并且我们传入的要代理的对象</span></span><br><span class="line">       <span class="type">VehicleProxyProvider</span> <span class="variable">vehicleProxyProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VehicleProxyProvider</span>(ship);</span><br><span class="line">       <span class="comment">//获取代理对象，该对象可以代理执行方法</span></span><br><span class="line">       <span class="comment">//1. proxy 编译类型 Vehicle</span></span><br><span class="line">       <span class="comment">//2. 运行类型 是代理类型 class com.sun.proxy.$Proxy9</span></span><br><span class="line">       <span class="type">Vehicle</span> <span class="variable">proxy</span> <span class="operator">=</span> vehicleProxyProvider.getProxy();</span><br><span class="line">       System.out.println(<span class="string">&quot;proxy的编译类型是 Vehicle&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;proxy的运行类型是 &quot;</span> + proxy.getClass());</span><br><span class="line">       <span class="comment">//下面家解读怎么 执行到 代理对象的 public Object invoke(Object o, Method method, Object[] args)</span></span><br><span class="line">       <span class="comment">//proxy的编译类型是 Vehicle, 运行类型是 class com.sun.proxy.$Proxy9</span></span><br><span class="line">       <span class="comment">//所以当执行run方法时，会执行到 代理对象的invoke</span></span><br><span class="line">       proxy.run();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220615102956423-165833097371855.png"> </div> <h2 id="动态代理深入"><a href="#动态代理深入" class="headerlink" title="动态代理深入"></a>动态代理深入</h2><h3 id="需求说明-4"><a href="#需求说明-4" class="headerlink" title="需求说明"></a>需求说明</h3><p>​有一个 SmartAnimal 接口，可以完成简单的加减法, 要求在执行 getSum()和 getSub() 时，输出执行前，执行过程，执行后的日志输出，请思考如何实现。</p><p>getSum()如下，getSub()类似</p><img src="\images\Spring5.assets\image-20220609162420151-165833097371856.png" alt="image-20220609162420151" style="zoom:80%;" /><h3 id="传统方式实现"><a href="#传统方式实现" class="headerlink" title="传统方式实现"></a>传统方式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSum 方法开始--参数：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSum 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSub 方法开始--参数：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;日志--方法名--getSub 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SmartDog</span> <span class="variable">smartDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartDog</span>();</span><br><span class="line">        smartDog.getSum(<span class="number">10.0f</span>,<span class="number">2.0f</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        smartDog.getSub(<span class="number">10.0f</span>,<span class="number">2.0f</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：实现简单。缺点：日志代码维护不方便，代码复用性差。</p><h3 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSum 方法开始--参数：&quot; + i + &quot;,&quot; + j);</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSum 方法结束--结果：result=&quot; + result);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSub 方法开始--参数：&quot; + i + &quot;,&quot; + j);</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;日志--方法名--getSub 方法结束--结果：result=&quot; + result);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义我们要执行的目标对象，该对象需要实现 SmartAnimal</span></span><br><span class="line">    <span class="keyword">private</span> SmartAnimal target_animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyProvider</span><span class="params">(SmartAnimal target_animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_animal = target_animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 可以返回代理对象，该代理对象可以执行目标对象</span></span><br><span class="line">    <span class="keyword">public</span> SmartAnimal <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到类加载器/对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_animal.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.得到执行目标对象的接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_animal.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.创建 InvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行前-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法开始--参数：&quot;</span> + Arrays.asList(args));</span><br><span class="line">                    result = method.invoke(target_animal, args);</span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-返回通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行正常后-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//如果反射执行方法时，出现异常，就会进入到catch&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-异常通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行异常-日志--方法名--&quot;</span> + method.getName() + <span class="string">&quot;-异常类型=&quot;</span> + e.getClass().getName());</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;<span class="comment">//不管是否出现异常，最终都会执行到finally&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP角度看，也是一个横切关注点-最终通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;日志--方法名：&quot;</span> + method.getName() + <span class="string">&quot;--方法最终结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> (SmartAnimal)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SmartDog</span> <span class="variable">smartDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartDog</span>();</span><br><span class="line">        <span class="type">MyProxyProvider</span> <span class="variable">myProxyProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyProxyProvider</span>(smartDog);</span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> myProxyProvider.getProxy();</span><br><span class="line">        <span class="type">float</span> <span class="variable">sum</span> <span class="operator">=</span> proxy.getSum(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        proxy.getSub(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609165941755-165833097371857.png"> </div> <h2 id="问题再次出现"><a href="#问题再次出现" class="headerlink" title="问题再次出现"></a>问题再次出现</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>​在 MyProxyProvider.java 中，我们的输出语句功能比较弱，在实际开发中，我们希望是以一个方法的形式，嵌入到真正执行的目标方法前，怎么办?</p><img src="\images\Spring5.assets\image-20220609170233458-165833097371858.png" alt="image-20220609170233458" style="zoom:80%;" /><h3 id="土方法解决"><a href="#土方法解决" class="headerlink" title="土方法解决"></a>土方法解决</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义我们要执行的目标对象，该对象需要实现 SmartAnimal</span></span><br><span class="line">    <span class="keyword">private</span> SmartAnimal target_animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyProvider</span><span class="params">(SmartAnimal target_animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_animal = target_animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Object proxy, Method method, Object[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before-方法执行前-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法开始--参数：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object result)</span>&#123;</span><br><span class="line">        <span class="comment">//从AOP看，也是一个横切关注点-返回通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after-方法执行正常后-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法结束--结果：result=&quot;</span> + result);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 可以返回代理对象，该代理对象可以执行目标对象</span></span><br><span class="line">    <span class="keyword">public</span> SmartAnimal <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到类加载器/对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_animal.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.得到执行目标对象的接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_animal.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.创建 InvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    before(proxy, method, args);</span><br><span class="line">                    result = method.invoke(target_animal, args);</span><br><span class="line">                    after(method,result);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//如果反射执行方法时，出现异常，就会进入到catch&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-异常通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行异常-日志--方法名--&quot;</span> + method.getName() + <span class="string">&quot;-异常类型=&quot;</span> + e.getClass().getName());</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;<span class="comment">//不管是否出现异常，最终都会执行到finally&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP角度看，也是一个横切关注点-最终通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;日志--方法名：&quot;</span> + method.getName() + <span class="string">&quot;--方法最终结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> (SmartAnimal)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题：耦合度高</p><h3 id="对土方法解耦-开发简易的AOP类"><a href="#对土方法解耦-开发简易的AOP类" class="headerlink" title="对土方法解耦-开发简易的AOP类"></a>对土方法解耦-开发简易的AOP类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 我们自己编写一个极简的AOP类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LzwAOP</span> &#123;</span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Object proxy, Method method, Object[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LzwAOP-方法执行前-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法开始--参数：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们自己定义一个方法，在目标对象执行后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object result)</span>&#123;</span><br><span class="line">        <span class="comment">//从AOP看，也是一个横切关注点-返回通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;LzwAOP-方法执行正常后-日志--方法名--&quot;</span>+ method.getName() + <span class="string">&quot; 方法结束--结果：result=&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.proxy3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2022/6/9 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义我们要执行的目标对象，该对象需要实现 SmartAnimal</span></span><br><span class="line">    <span class="keyword">private</span> SmartAnimal target_animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyProvider</span><span class="params">(SmartAnimal target_animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target_animal = target_animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 可以返回代理对象，该代理对象可以执行目标对象</span></span><br><span class="line">    <span class="keyword">public</span> SmartAnimal <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到类加载器/对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target_animal.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.得到执行目标对象的接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target_animal.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.创建 InvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LzwAOP.before(proxy, method, args);</span><br><span class="line">                    result = method.invoke(target_animal, args);</span><br><span class="line">                    LzwAOP.after(method,result);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//如果反射执行方法时，出现异常，就会进入到catch&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP看，也是一个横切关注点-异常通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法执行异常-日志--方法名--&quot;</span> + method.getName() + <span class="string">&quot;-异常类型=&quot;</span> + e.getClass().getName());</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;<span class="comment">//不管是否出现异常，最终都会执行到finally&#123;&#125;</span></span><br><span class="line">                    <span class="comment">//从AOP角度看，也是一个横切关注点-最终通知</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;日志--方法名：&quot;</span> + method.getName() + <span class="string">&quot;--方法最终结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">proxy</span> <span class="operator">=</span> (SmartAnimal)Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609181633378-165833097371859.png"> </div> <p>问题：土方法：不够灵活，复用性差，还是一种硬编码（因为没有注解和反射支撑）</p><h2 id="AOP的基本介绍"><a href="#AOP的基本介绍" class="headerlink" title="AOP的基本介绍"></a>AOP的基本介绍</h2><p>​AOP 的全称(aspect oriented programming) ，面向切面编程。</p><div align="center"> <img src="\images\Spring5.assets\image-20220609182308637-165833097371860.png"> </div> <h2 id="AOP的快速入门"><a href="#AOP的快速入门" class="headerlink" title="AOP的快速入门"></a>AOP的快速入门</h2><h3 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h3><ol><li><p>需要引入核心的aspect包。</p></li><li><p>在切面类中声明通知方法</p></li></ol><p>（1）前置通知：**@Before<strong>（2）返回通知：</strong>@AfterReturning<strong>（3）异常通知：</strong>@AfterThrowing<strong>（4）后置通知：</strong>@After<strong>（5）环绕通知：</strong>@Around**</p><div align="center"> <img src="\images\Spring5.assets\image-20220609200915310-165833097371861.png"> </div> <h3 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h3><p>​导入需要的包.</p><div align="center"> <img src="\images\Spring5.assets\image-20220609201157564-165833097371862.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.aop.proxy3.SmartAnimal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//使用@Component 当spring容器启动时，将SmartDog注入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​下面的SmartAnimalAspect作用就是接管切面编程，此时原来的MyProxyProvider类就可以拿掉了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 切面类，类似于以前自己写的 MyProxyProvider，功能肯定强大很多</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希望将f1方法切入到 SmartDog-getSum()前执行-前置通知</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. <span class="doctag">@Before</span> 表示前置通知：即在我们的目标对象执行方法前执行</span></span><br><span class="line"><span class="comment">     * 2. value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float)</span></span><br><span class="line"><span class="comment">     * 指定切入到哪个类的哪个方法  形式是: 访问修饰符 返回类型 全类名.方法名(形参列表)</span></span><br><span class="line"><span class="comment">     * 3. showBeginLog方法可以理解成就是一个切入方法, 这个方法名是可以程序员指定  比如:showBeginLog</span></span><br><span class="line"><span class="comment">     * 4. JoinPoint joinPoint 在底层执行时，由AspectJ切面框架，会给该切入方法传入 joinPoint对象</span></span><br><span class="line"><span class="comment">     * , 通过该对象，程序员可以获取到 相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f1()-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回通知；即把f2方法切入到目标对象正常执行完毕后的地方</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知；即把f3方法切入到目标对象方法执行异常的catch&#123;&#125;</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知；即把f4方法切入到目标方法执行后(不管是否发生异常，都要执行 finally&#123;&#125;)</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f4</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.aop.aspectj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启基于注解的AOP功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAspectjTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//得到spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//这里我们需要通过接口类型来获取到注入的SmartDog对象=&gt;就是代理对象</span></span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">        <span class="comment">//SmartDog smartDog = ioc.getBean(SmartDog.class);</span></span><br><span class="line">        smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&quot;smartAnimal运行类型：&quot; + smartAnimal.getClass());//class com.sun.proxy.$Proxy17</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节说明-3"><a href="#细节说明-3" class="headerlink" title="细节说明"></a>细节说明</h3><ol><li><p>关于切面类方法命名可以自己规范一下，比如 showBeginLog()，showSuccessEndLog()，showExceptionLog()，showFinallyEndLog()。</p></li><li><p>切入表达式的更多配置，比如使用模糊配置。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value=&quot;execution(* com.lzw.aop.proxy.SmartDog.*(..))&quot;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>表示所有访问权限，所有包的下所有有类的所方法，都会被执行该前置通知方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value=&quot;execution(* *.*(..))&quot;)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>当 spring 容器开启了 基于注解的AOP功能，我们获取注入的对象，需要以接口的类型来获取，因为你注入的对象.getClass() 已经是代理类型了。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启基于注解的AOP功能--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>当 spring 容器开启了基于注解的 AOP 功能，我们获取注入的对象，也可以通过 id 来获取，但是也要转成接口类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//得到spring容器</span></span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//这里我们需要通过接口类型来获取到注入的SmartDog对象=&gt;就是代理对象</span></span><br><span class="line">       <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> (SmartAnimal)ioc.getBean(<span class="string">&quot;smartDog&quot;</span>);<span class="comment">//使用的id获取</span></span><br><span class="line">       smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><ol><li>有接口 UsbInterface (方法 work) </li><li>实现子类 Phone 和 Camera 实现 UsbInterface </li><li>请在 SmartAnimalAspect 切面类，写一个方法(可输出日志信息) 等作为前置通知，在 Phone 和 Camera 对象执行 work 方法前调用 </li><li>其它返回通知，异常通知，后置通知，也可以加入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//把Phone对象当做一个组件注入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Phone work()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Camera</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Camera work()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public void com.lzw.spring.aop.aspectj.UsbInterface.work())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类前置通知--日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml文件和上述beans08.xml文件相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartUsbTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">        <span class="type">UsbInterface</span> <span class="variable">phone</span> <span class="operator">=</span> (UsbInterface) ioc.getBean(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">        <span class="type">UsbInterface</span> <span class="variable">camera</span> <span class="operator">=</span> (UsbInterface) ioc.getBean(<span class="string">&quot;camera&quot;</span>);</span><br><span class="line">        phone.work();</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">        camera.work();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-切入表达式"><a href="#AOP-切入表达式" class="headerlink" title="AOP-切入表达式"></a>AOP-切入表达式</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​通过表达式的方式定位一个或多个具体的连接点。</p><h3 id="语法细节"><a href="#语法细节" class="headerlink" title="语法细节"></a>语法细节</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([权限修饰符] [返回值类型] [简单类名/全类名] [方法名]([参数列表]))</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220609213925500-165833097371863.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214122225-165833097371964.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214204005-165833097371965.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214235962-165833097371966.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220609214255540-165833097371967.png"> </div> <p>​在AspectJ中，切入点表达式可以通过过 “&amp;&amp;”、“||”，“!“ 等操作符结合起来。</p><div align="center"> <img src="\images\Spring5.assets\image-20220609214408078-165833097371968.png"> </div> <h3 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>切入表达式也可以指向类的方法，这时切入表达式会对该类&#x2F;对象生效。 </li><li>切入表达式也可以指向接口的方法，这时切入表达式会对实现了接口的类&#x2F;对象生效。</li><li>切入表达式也可以对没有实现接口的类，进行切入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Car run()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="comment">//给Car配置一个前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public void Car.run())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readyRun</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类readyRun--日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> ioc.getBean(Car.class);</span><br><span class="line">        <span class="comment">//说明: car对象仍然是代理对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;car的运行类型=&quot;</span> + car.getClass());<span class="comment">//class com.lzw.spring.aop.aspectj.Car$$EnhancerBySpringCGLIB$$11073d67</span></span><br><span class="line">        car.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>动态代理 jdk 的 Proxy 与 Spring 的 CGlib 。<a href="https://www.cnblogs.com/threeAgePie/p/15832586.html%E3%80%82">https://www.cnblogs.com/threeAgePie/p/15832586.html。</a></li></ol><p>​（1）JDK动态代理是面向接口的，只能增强实现类中接口中存在的方法。CGlib是面向父类的，可以增强父类的所有方法。</p><p>​（2）JDK得到的对象是JDK代理对象实例，而CGlib得到的对象是被代理对象的子类。</p><h2 id="AOP-JoinPoint"><a href="#AOP-JoinPoint" class="headerlink" title="AOP-JoinPoint"></a>AOP-JoinPoint</h2><p>​通过 JoinPoint 可以获取到调用方法的签名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123; </span><br><span class="line">    joinPoint.getSignature().getName(); <span class="comment">// 获取目标方法名 </span></span><br><span class="line">    joinPoint.getSignature().getDeclaringType().getSimpleName(); <span class="comment">// 获取目标方法所属 类的简单类名 </span></span><br><span class="line">    joinPoint.getSignature().getDeclaringTypeName(); <span class="comment">// 获取目标方法所属类的类名 </span></span><br><span class="line">    joinPoint.getSignature().getModifiers(); <span class="comment">// 获取目标方法声明类型数字(public、private、 protected)</span></span><br><span class="line">    Object[] args = joinPoint.getArgs(); <span class="comment">// 获取传入目标方法的参数，返回一个数组 </span></span><br><span class="line">    joinPoint.getTarget(); <span class="comment">// 获取被代理的对象 </span></span><br><span class="line">    joinPoint.getThis(); <span class="comment">// 获取代理对象自己</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-返回通知获取结果"><a href="#AOP-返回通知获取结果" class="headerlink" title="AOP-返回通知获取结果"></a>AOP-返回通知获取结果</h2><div align="center"> <img src="\images\Spring5.assets\image-20220610083351786-165833097371969.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 如果我们希望把目标方法执行的结果，返回给切入方法</span></span><br><span class="line">   <span class="comment">//2. 可以在 @AfterReturning 增加属性 , 比如 returning = &quot;res&quot;</span></span><br><span class="line">   <span class="comment">//3. 同时在切入方法增加 Object res</span></span><br><span class="line">   <span class="comment">//4. 注意: returning = &quot;res&quot; 和 Object res 的 res名字一致</span></span><br><span class="line">   <span class="comment">//@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">   <span class="comment">//使用切入点</span></span><br><span class="line">   <span class="meta">@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">           returning = &quot;res&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">       System.out.println(<span class="string">&quot;切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610083720255-165833097371970.png"> </div> <h2 id="AOP-异常通知中获取异常"><a href="#AOP-异常通知中获取异常" class="headerlink" title="AOP-异常通知中获取异常"></a>AOP-异常通知中获取异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">           throwing = &quot;throwable&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">       System.out.println(<span class="string">&quot;切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610084244646-165833097371972.png"> </div> <h2 id="AOP-环绕通知【了解】"><a href="#AOP-环绕通知【了解】" class="headerlink" title="AOP-环绕通知【了解】"></a>AOP-环绕通知【了解】</h2><p>​环绕通知可以完成其它四个通知要做的事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 切面类，类似于以前自己写的 MyProxyProvider，功能肯定强大很多</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect2到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示环绕通知的使用-了解</span></span><br><span class="line">    <span class="comment">//1. @Around: 表示这是一个环绕通知[完成其它四个通知的功能]</span></span><br><span class="line">    <span class="comment">//2. value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float)) 切入点表达式</span></span><br><span class="line">    <span class="comment">//3. doAround 表示要切入的方法 - 调用结构 try-catch-finally</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.相当于前置通知完成的事情</span></span><br><span class="line">            Object[] args = joinPoint.getArgs();</span><br><span class="line">            List&lt;Object&gt; argList = Arrays.asList(args);</span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-前置通知]&quot;</span> + methodName + <span class="string">&quot;方法开始了--参数有：&quot;</span> + argList);</span><br><span class="line">            <span class="comment">//在环绕通知中一定要调用joinPoint.proceed()来执行目标方法</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            <span class="comment">//2.相当于返回通知完成的事情</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-返回通知]&quot;</span> + methodName + <span class="string">&quot;方法结束了--结果是：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="comment">//3.相当于异常通知完成的事情</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-异常通知]&quot;</span> + methodName + <span class="string">&quot;方法抛异常了--异常对象：&quot;</span> + throwable);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.相当于最终通知完成的事情</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AOP环绕通知[-后置通知]&quot;</span> + methodName + <span class="string">&quot;方法最终结束了...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDoAround</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//得到spring容器</span></span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">       <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">       smartAnimal.getSum(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610085347806-165833097371971.png"> </div> <h2 id="AOP-切入点表达式重用"><a href="#AOP-切入点表达式重用" class="headerlink" title="AOP-切入点表达式重用"></a>AOP-切入点表达式重用</h2><p>​为了统一管理切入点表达式，可以使用切入点表达式重用技术。</p><div align="center"> <img src="\images\Spring5.assets\image-20220610090550793-165833097371973.png"> </div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 使用切入点表达式重用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示是一个切面类[底层切面编程的支撑(动态代理+反射+动态绑定)]</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//会注入SmartAnimalAspect到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个切入点，在后面使用时可以直接引用，提高了复用性</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mePointCut</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f1()[使用myPointCut()]-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mePointCut()&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mePointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@After(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-切面优先级问题"><a href="#AOP-切面优先级问题" class="headerlink" title="AOP-切面优先级问题"></a>AOP-切面优先级问题</h2><p>​如果同一个方法，有多个切面在同一个切入点切入，那么执行的优先级如何控制。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>​@order(value&#x3D;n) 来控制 n 值越小，优先级越高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(value = 2)</span><span class="comment">//表示该切面类执行的顺序，value的值越小，优先级越高</span></span><br><span class="line"><span class="meta">@Aspect</span> </span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个切入点，在后面使用时可以直接引用，提高了复用性</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mePointCut</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f1()[使用myPointCut()]-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mePointCut()&quot;, returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mePointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用切入点</span></span><br><span class="line">    <span class="meta">@After(value = &quot;mePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public float SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f1()-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">            returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;,</span></span><br><span class="line"><span class="meta">            throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public float com.lzw.spring.aop.aspectj.SmartDog.getSum(float, float))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect3-切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smartDogTestByProxy</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans08.xml&quot;</span>);</span><br><span class="line">       <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">       smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220610091829779-165833097371974.png"> </div> <p>​后执行的，会被先执行的包裹起来。</p><h3 id="注意事项和细节说明-2"><a href="#注意事项和细节说明-2" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol><li>不能理解成：优先级高的每个消息通知都先执行，这个和方法调用机制(和 Filter 过滤器 链式调用类似)。</li><li>执行顺序</li></ol><img src="\images\Spring5.assets\image-20220610091958816-165833097371975.png" alt="image-20220610091958816" style="zoom:80%;" /><h2 id="AOP-基于-XML-配置-AOP"><a href="#AOP-基于-XML-配置-AOP" class="headerlink" title="AOP-基于 XML 配置 AOP"></a>AOP-基于 XML 配置 AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartDog</span> <span class="keyword">implements</span> <span class="title class_">SmartAnimal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSum</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSub</span><span class="params">(<span class="type">float</span> i, <span class="type">float</span> j)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部打印：result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> * 这是我们开发的一个切面类，不用注解，而是使用XML配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAnimalAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接点对象joinPoint 可以获取方法签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-XML配置-切面类f1()-方法执行前-日志--方法名--&quot;</span>+ signature.getName() + <span class="string">&quot;-参数：&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showSuccessEndLog</span><span class="params">(JoinPoint joinPoint, Object res)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的结果是：&quot;</span> + res);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f2()-方法执行正常结束-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExceptionLog</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的异常信息：&quot;</span> + throwable);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f3()-方法执行异常-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFinallyEndLog</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;SmartAnimalAspect-切面类f4()-方法最终执行完毕-日志--方法名--&quot;</span>+ signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用XML配置，完成AOP编程--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一个切面类-bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.aop.xml.SmartAnimalAspect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;smartAnimalAspect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一个SmartDog对象-bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lzw.spring.aop.xml.SmartDog&quot;</span> <span class="attr">id</span>=<span class="string">&quot;smartDog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类, 细节一定要引入 xmlns:aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public float com.lzw.spring.aop.xml.SmartDog.getSum(float, float))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面的前置，返回, 异常, 最终通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;smartAnimalAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;showBeginLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--返回通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;showSuccessEndLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;res&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--异常通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;showExceptionLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;throwable&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--最终通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;showFinallyEndLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置环绕通知--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:around method=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.aop.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAspectjXMLTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAspectByXML</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans09.xml&quot;</span>);</span><br><span class="line">        <span class="type">SmartAnimal</span> <span class="variable">smartAnimal</span> <span class="operator">=</span> ioc.getBean(SmartAnimal.class);</span><br><span class="line">        smartAnimal.getSum(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-JdbcTemplate"><a href="#第四章-JdbcTemplate" class="headerlink" title="第四章 JdbcTemplate"></a>第四章 JdbcTemplate</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>如果程序员就希望使用 spring 框架来做项目，spring 框架如何处理对数据库的操作呢？</p><p>​方案 1：使用前面做项目开发的 JdbcUtils 类 。</p><p>​方案 2：其实 spring 提供了一个操作数据库(表)功能强大的类 JdbcTemplate 。我们可以同 ioc 容器来配置一个 jdbcTemplate 对象，使用它来完成对数据库表的各种操作。</p><h2 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a>官方文档</h2><p>JdbcTemplate APIs : &#x2F;spring-framework-5.3.8&#x2F;docs&#x2F;javadoc-api&#x2F;index.html</p><h2 id="JdbcTemplate-介绍"><a href="#JdbcTemplate-介绍" class="headerlink" title="JdbcTemplate-介绍"></a>JdbcTemplate-介绍</h2><ol><li>通过 Spring 可以配置数据源，从而完成对数据表的操作 。</li><li>JdbcTemplate 是 Spring 提供的访问数据库的技术。可以将 JDBC 的常用操作封装为模板方法。</li></ol><div align="center"> <img src="\images\Spring5.assets\image-20220611172851866-165833097372078.png"> </div> <h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="正确得到数据源"><a href="#正确得到数据源" class="headerlink" title="正确得到数据源"></a>正确得到数据源</h3><h4 id="先引入JdbcTemplate需要的jar包。"><a href="#先引入JdbcTemplate需要的jar包。" class="headerlink" title="先引入JdbcTemplate需要的jar包。"></a>先引入JdbcTemplate需要的jar包。</h4><div align="center"> <img src="\images\Spring5.assets\image-20220611173023389-165833097372077.png"> </div> <h4 id="创建数据库spring和表monster"><a href="#创建数据库spring和表monster" class="headerlink" title="创建数据库spring和表monster"></a>创建数据库spring和表monster</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库 </span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE spring</span><br><span class="line"><span class="comment">-- 创建表 monster </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> monster(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">skill <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">)CHARSET<span class="operator">=</span>utf8 </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monster <span class="keyword">VALUES</span>(<span class="number">100</span>, <span class="string">&#x27;青牛怪&#x27;</span>, <span class="string">&#x27;吐火&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monster <span class="keyword">VALUES</span>(<span class="number">200</span>, <span class="string">&#x27;黄袍怪&#x27;</span>, <span class="string">&#x27;吐烟&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monster <span class="keyword">VALUES</span>(<span class="number">300</span>, <span class="string">&#x27;蜘蛛怪&#x27;</span>, <span class="string">&#x27;吐丝&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="创建配置文件-src-x2F-jdbc-properties"><a href="#创建配置文件-src-x2F-jdbc-properties" class="headerlink" title="创建配置文件 src&#x2F;jdbc.properties"></a>创建配置文件 src&#x2F;jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br></pre></td></tr></table></figure><h4 id="创建配置文件-src-x2F-JdbcTemplate-ioc-xml"><a href="#创建配置文件-src-x2F-JdbcTemplate-ioc-xml" class="headerlink" title="创建配置文件 src&#x2F;JdbcTemplate_ioc.xml"></a>创建配置文件 src&#x2F;JdbcTemplate_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试是否可以正确得到数据源"><a href="#测试是否可以正确得到数据源" class="headerlink" title="测试是否可以正确得到数据源"></a>测试是否可以正确得到数据源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDatasourceByJdbcTemplate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ioc.getBean(DataSource.class);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到connection = &quot;</span> + connection);</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220611175217274-165833097372081.png"> </div> <h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="配置-JdbcTemplate-ioc-xml"><a href="#配置-JdbcTemplate-ioc-xml" class="headerlink" title="配置 JdbcTemplate_ioc.xml"></a>配置 JdbcTemplate_ioc.xml</h4><p>将数据源分配给 JdbcTemplate bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置JdbcTemplate对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--给JdbcTemplate对象配置dataSource--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplateTest-java"><a href="#修改-JdbcTemplateTest-java" class="headerlink" title="修改 JdbcTemplateTest.java"></a>修改 JdbcTemplateTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试通过JdbcTemplate对象完成添加数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//获取JdbcTemplate对象</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="comment">//1. 添加方式1</span></span><br><span class="line">       <span class="comment">//String sql = &quot;Insert into monster Value(400, &#x27;红孩儿&#x27;, &#x27;枪法&#x27;)&quot;;</span></span><br><span class="line">       <span class="comment">//jdbcTemplate.execute(sql);</span></span><br><span class="line">       <span class="comment">//2. 添加方式2</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO monster VALUES(?, ?, ?)&quot;</span>;</span><br><span class="line">       <span class="comment">//affected表示 执行后表受影响的记录数</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">500</span>, <span class="string">&quot;红孩儿2&quot;</span>, <span class="string">&quot;枪法2&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;添加成功 affected = &quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试通过JdbcTemplate对象完成修改数据</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//获取JdbcTemplate对象</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="comment">//组织SQL</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE monster SET skill=? WHERE id=?&quot;</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;美人计&quot;</span>, <span class="number">300</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;update ok affected= &quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加两个monster</span></span><br><span class="line">   <span class="comment">//这里有一个使用API的技巧</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 对于某个类， 有很多API, 使用的步骤</span></span><br><span class="line"><span class="comment">    * 2. 使用技巧（1） 先确定API名字 (2) 根据API提供相应的参数 [组织参数]</span></span><br><span class="line"><span class="comment">    *    (3) 把自己的调用思路清晰 (4) 根据API, 可以推测类似的用法和功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * batch add data</span></span><br><span class="line"><span class="comment">    * 批量添加二个monster 白蛇精和青蛇精-update(sql,List&lt;Object[]&gt;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBatchDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);<span class="comment">//添加..</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 先确定,猜测API名称 batchUpdate[如果出现问题，才重新玩]</span></span><br><span class="line">       <span class="comment">//public int[] batchUpdate(String sql, List&lt;Object[]&gt; batchArgs)&#123;&#125;</span></span><br><span class="line">       <span class="comment">//2. 准备参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO monster VALUES(?, ?, ?)&quot;</span>;</span><br><span class="line">       List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       batchArgs.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">600</span>, <span class="string">&quot;老鼠精&quot;</span>, <span class="string">&quot;偷吃粮食&quot;</span>&#125;);</span><br><span class="line">       batchArgs.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">700</span>, <span class="string">&quot;老猫精&quot;</span>, <span class="string">&quot;抓老鼠&quot;</span>&#125;);</span><br><span class="line">       <span class="comment">//3. 调用</span></span><br><span class="line">       <span class="comment">//说明：返回结果是一个数组，每个元素对应上面的sql语句对表的影响记录数</span></span><br><span class="line">       <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">       <span class="comment">//输出</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;anInt=&quot;</span> + anInt);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;batch add ok..&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="查询单条数据并封装成对象"><a href="#查询单条数据并封装成对象" class="headerlink" title="查询单条数据并封装成对象"></a>查询单条数据并封装成对象</h3><p>这里的Monster还是使用的第一章中的Monster类。</p><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询id=100的monster并封装到Monster实体对象[在实际开发中，非常有用]</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">    <span class="comment">//组织SQL</span></span><br><span class="line">    <span class="comment">//通过BeanPropertyRowMapper获取rowmapper 是一个接口，可以将查询的结果，封装到你指定的Monster对象中.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 确定API ： queryForObject()</span></span><br><span class="line">    <span class="comment">//public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args)</span></span><br><span class="line">    <span class="comment">//2.准备参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id AS monsterID, NAME, skill FROM monster WHERE id = 100&quot;</span>;</span><br><span class="line">    <span class="comment">//使用RowMapper 接口对返回的数据，进行一个封装-&gt;底层使用的反射-&gt;setter</span></span><br><span class="line">    <span class="comment">//这里有一个细节: 你查询的记录的表的字段需要和 Monster的对象字段名保持一致</span></span><br><span class="line">    RowMapper&lt;Monster&gt; rowMapper = <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Monster.class);</span><br><span class="line">    <span class="comment">//jdbcTemplate</span></span><br><span class="line">    <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, rowMapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;monster= &quot;</span> + monster);</span><br><span class="line">    System.out.println(<span class="string">&quot;查询ok&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询多条数据并封装成对象集合"><a href="#查询多条数据并封装成对象集合" class="headerlink" title="查询多条数据并封装成对象集合"></a>查询多条数据并封装成对象集合</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询多条记录</span></span><br><span class="line"><span class="comment">    * 查询id&gt;=100的monster并封装到Monster实体对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectMulDataByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="comment">//组织SQL</span></span><br><span class="line">       <span class="comment">//通过BeanPropertyRowMapper获取rowmapper 是一个接口，可以将查询的结果，封装到你指定的Monster对象中.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.    确定API</span></span><br><span class="line">       <span class="comment">//public &lt;T&gt; T query(String sql, RowMapper&lt;T&gt; rowMapper, Object... args)&#123;&#125;</span></span><br><span class="line">       <span class="comment">//2. 组织参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id AS monsterId, NAME, skill FROM monster WHERE id &gt;= ?&quot;</span>;</span><br><span class="line">       RowMapper&lt;Monster&gt; rowMapper = <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Monster.class);</span><br><span class="line">       <span class="comment">//3.调用</span></span><br><span class="line">       List&lt;Monster&gt; monsterList = jdbcTemplate.query(sql, rowMapper, <span class="number">100</span>);</span><br><span class="line">       <span class="keyword">for</span> (Monster monster : monsterList) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;monster= &quot;</span> + monster);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="查询返回结果只有一行一列的数据"><a href="#查询返回结果只有一行一列的数据" class="headerlink" title="查询返回结果只有一行一列的数据"></a>查询返回结果只有一行一列的数据</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查询返回结果只有一行一列的值，比如查询id=100的怪物名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectScalarByJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//得到JdbcTemplate bean</span></span><br><span class="line">      <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> ioc.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1. 确定API</span></span><br><span class="line">      <span class="comment">//public &lt;T&gt; T queryForObject(String sql, Class&lt;T&gt; requiredType)</span></span><br><span class="line">      <span class="comment">//2. 提供参数</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT NAME FROM monster WHERE id = 100&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, String.class);</span><br><span class="line">      System.out.println(<span class="string">&quot;返回name= &quot;</span> + name);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Map-传入具名参数完成添加操作"><a href="#使用-Map-传入具名参数完成添加操作" class="headerlink" title="使用 Map 传入具名参数完成添加操作"></a>使用 Map 传入具名参数完成添加操作</h3><h4 id="修改-JdbcTemplate-ioc-xml"><a href="#修改-JdbcTemplate-ioc-xml" class="headerlink" title="修改 JdbcTemplate_ioc.xml"></a>修改 JdbcTemplate_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置NamedParameterJdbcTemplate对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;namedParameterJdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过构造器，设置数据源--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplateTest-java-1"><a href="#修改-JdbcTemplateTest-java-1" class="headerlink" title="修改 JdbcTemplateTest.java"></a>修改 JdbcTemplateTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用Map传入具名参数完成操作，比如添加 螃蟹精.:name 就是具名参数形式需要使用NamedParameterJdbcTemplate 类,</span></span><br><span class="line"><span class="comment">    * 语句形式: String sql = &quot;INSERT INTO monster VALUES(:my_id, :name, :skill)&quot;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataByNamedParameterJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到NamedParameterJdbcTemplate bean</span></span><br><span class="line">       <span class="type">NamedParameterJdbcTemplate</span> <span class="variable">namedParameterJdbcTemplate</span> <span class="operator">=</span> ioc.getBean(NamedParameterJdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 确定使用API</span></span><br><span class="line">       <span class="comment">//public int update(String sql, Map&lt;String, ?&gt; paramMap)</span></span><br><span class="line">       <span class="comment">//2. 准备参数 [:my_id, :name, :skill] 要求按照规定的名字来设置参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into monster values(:id, :name, :skill)&quot;</span>;</span><br><span class="line">       Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//给paramMap填写数据</span></span><br><span class="line">       paramMap.put(<span class="string">&quot;id&quot;</span>, <span class="number">800</span>);</span><br><span class="line">       paramMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;蚂蚁精&quot;</span>);</span><br><span class="line">       paramMap.put(<span class="string">&quot;skill&quot;</span>, <span class="string">&quot;喜欢打洞&quot;</span>);</span><br><span class="line">       <span class="comment">//3. 调用</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> namedParameterJdbcTemplate.update(sql, paramMap);</span><br><span class="line">       System.out.println(<span class="string">&quot;add ok affected=&quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220611192753526-165833097372079.png"> </div> <h3 id="使用-sqlparametersoruce-来传入具名参数完成添加操作"><a href="#使用-sqlparametersoruce-来传入具名参数完成添加操作" class="headerlink" title="使用 sqlparametersoruce 来传入具名参数完成添加操作"></a>使用 sqlparametersoruce 来传入具名参数完成添加操作</h3><p>修改 JdbcTemplateTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用sqlparametersoruce 来传入具名参数,还是添加一个Monster 狐狸精</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operDataBySqlparametersoruce</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//得到NamedParameterJdbcTemplate bean</span></span><br><span class="line">       <span class="type">NamedParameterJdbcTemplate</span> <span class="variable">namedParameterJdbcTemplate</span> <span class="operator">=</span> ioc.getBean(NamedParameterJdbcTemplate.class);</span><br><span class="line">       <span class="comment">//确定API</span></span><br><span class="line">       <span class="comment">//public int update(String sql, SqlParameterSource paramSource)</span></span><br><span class="line">       <span class="comment">//public BeanPropertySqlParameterSource(Object object)</span></span><br><span class="line">       <span class="comment">//准备参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO monster VALUES(:monsterID, :name, :skill)&quot;</span>;</span><br><span class="line">       <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">900</span>, <span class="string">&quot;大象精&quot;</span>, <span class="string">&quot;搬运木头&quot;</span>);</span><br><span class="line">       <span class="type">SqlParameterSource</span> <span class="variable">sqlParameterSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanPropertySqlParameterSource</span>(monster);</span><br><span class="line">       <span class="comment">//3. 调用</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> namedParameterJdbcTemplate.update(sql, sqlParameterSource);</span><br><span class="line">       System.out.println(<span class="string">&quot;add ok affected=&quot;</span> + affected);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220611192837530-165833097372080.png"> </div> <h3 id="Dao-对象使用-JdbcTemplate-完成对数据的操作"><a href="#Dao-对象使用-JdbcTemplate-完成对数据的操作" class="headerlink" title="Dao 对象使用 JdbcTemplate 完成对数据的操作"></a>Dao 对象使用 JdbcTemplate 完成对数据的操作</h3><h4 id="创建-MonsterDao-java"><a href="#创建-MonsterDao-java" class="headerlink" title="创建 MonsterDao.java"></a>创建 MonsterDao.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.jdbctemplate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//将MonsterDao注入到Spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonsterDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入一个属性</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成保存任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Monster monster)</span>&#123;</span><br><span class="line">        <span class="comment">//组织sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into monster values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">affected</span> <span class="operator">=</span> jdbcTemplate.update(sql, monster.getMonsterID(), monster.getName(), monster.getSkill());</span><br><span class="line">        System.out.println(<span class="string">&quot;affected = &quot;</span> + affected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplate-ioc-xml-1"><a href="#修改-JdbcTemplate-ioc-xml-1" class="headerlink" title="修改 JdbcTemplate_ioc.xml"></a>修改 JdbcTemplate_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.jdbctemplate.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改-JdbcTemplateTest-java-2"><a href="#修改-JdbcTemplateTest-java-2" class="headerlink" title="修改 JdbcTemplateTest.java"></a>修改 JdbcTemplateTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试MonsterDAO</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monsterDaoSave</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;JdbcTemplate_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">MonsterDao</span> <span class="variable">monsterDao</span> <span class="operator">=</span> ioc.getBean(MonsterDao.class);</span><br><span class="line">       <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">1000</span>, <span class="string">&quot;小鸭精&quot;</span>, <span class="string">&quot;吃鱼&quot;</span>);</span><br><span class="line">       monsterDao.save(monster);</span><br><span class="line">       System.out.println(<span class="string">&quot;MonsterDAO保存 ok ..&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-声明式事务"><a href="#第五章-声明式事务" class="headerlink" title="第五章 声明式事务"></a>第五章 声明式事务</h1><h2 id="事务分类"><a href="#事务分类" class="headerlink" title="事务分类"></a>事务分类</h2><ol><li><p>编程式事务</p></li><li><p><strong>声明式事务</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection(); </span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//1. 先设置事务不要自动提交 </span></span><br><span class="line">       connection.setAutoCommint(<span class="literal">false</span>); </span><br><span class="line">       <span class="comment">//2. 进行各种 crud </span></span><br><span class="line">       <span class="comment">//多个表的修改，添加 ，删除 </span></span><br><span class="line">       <span class="comment">//3. 提交 </span></span><br><span class="line">       connection.commit(); </span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       <span class="comment">//4. 回滚</span></span><br><span class="line">       conection.rollback(); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>我们需要去处理用户购买商品的业务逻辑</p><p>分析：当一个用户要去购买商品应该包含三个步骤</p><ol><li>通过商品 id 获取价格。</li><li>购买商品(某人购买商品，修改用户的余额) 。</li><li>修改库存量 。</li><li>其实大家可以看到，这时，我们需要涉及到三张表商品表，用户表，商品存量表。 应该使用事务处理。</li></ol><h3 id="传统的编程式事务分析"><a href="#传统的编程式事务分析" class="headerlink" title="传统的编程式事务分析"></a>传统的编程式事务分析</h3><ol><li><p>使用传统的编程事务来处理，将代码写到一起[缺点: 代码冗余，效率低，不利于扩展, 优 点是简单，好理解]。</p></li><li><p>使用 Spring 的声明式事务处理， 可以将上面三个子步骤分别写成一个方法，然后统一 管理[这个是 Spring 很牛的地方，在开发使用的很多，优点是无代码冗余，效率高，扩展方便， 缺点是理解较困难]&#x3D;&#x3D;&gt; 底层使用 AOP (动态代理+动态绑定+反射+注解)。</p></li></ol><h3 id="声明式事务使用"><a href="#声明式事务使用" class="headerlink" title="声明式事务使用"></a>声明式事务使用</h3><h4 id="先创建商品系统的数据库和表"><a href="#先创建商品系统的数据库和表" class="headerlink" title="先创建商品系统的数据库和表"></a>先创建商品系统的数据库和表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示声明式事务创建的表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_account`( </span><br><span class="line">    user_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    user_name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    money <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line">)CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_account` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>, <span class="number">1000</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_account` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods`(</span><br><span class="line">    goods_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    goods_name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    price <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line">)CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小风扇&#x27;</span>, <span class="number">10.00</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小台灯&#x27;</span>, <span class="number">12.00</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods` <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;可口可乐&#x27;</span>, <span class="number">3.00</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods_amount`( </span><br><span class="line">    goods_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    goods_num <span class="type">INT</span> UNSIGNED <span class="keyword">DEFAULT</span> <span class="number">0</span> </span><br><span class="line">)CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods_amount` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">200</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods_amount` <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods_amount` <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h4 id="创建GoodsDao"><a href="#创建GoodsDao" class="headerlink" title="创建GoodsDao"></a>创建GoodsDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsDao</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据商品id,返回对应的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">queryPriceById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT price From goods Where goods_id=?&quot;</span>;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Float.class, id);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户的余额 [减少用户余额]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer user_id, Float money)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user_account SET money=money-? Where user_id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, money, user_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改商品库存 [减少]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goods_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建src-tx-ioc-xml"><a href="#创建src-tx-ioc-xml" class="headerlink" title="创建src\tx_ioc.xml"></a>创建src\tx_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.tx.dao&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入外部的jdbc.properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源对象-DataSoruce--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给数据源对象配置属性值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置JdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给JdbcTemplate对象配置dataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建TxTest-进行测试"><a href="#创建TxTest-进行测试" class="headerlink" title="创建TxTest 进行测试"></a>创建TxTest 进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.tx.dao.GoodsDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryPriceByIdTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取到容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">GoodsDao</span> <span class="variable">goodsDao</span> <span class="operator">=</span> ioc.getBean(GoodsDao.class);</span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;id=1 的price=&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取到容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">GoodsDao</span> <span class="variable">goodsDao</span> <span class="operator">=</span> ioc.getBean(GoodsDao.class);</span><br><span class="line">        goodsDao.updateBalance(<span class="number">1</span>, <span class="number">1.0F</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;减少用户余额成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取到容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">GoodsDao</span> <span class="variable">goodsDao</span> <span class="operator">=</span> ioc.getBean(GoodsDao.class);</span><br><span class="line">        goodsDao.updateAmount(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;减少库存成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建GoodsService"><a href="#创建GoodsService" class="headerlink" title="创建GoodsService"></a>创建GoodsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.tx.dao.GoodsDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将 GoodsService对象注入到spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，完成用户购买商品的业务, 这里主要是讲解事务管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  购买数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoods</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改tx-ioc-xml"><a href="#修改tx-ioc-xml" class="headerlink" title="修改tx_ioc.xml"></a>修改tx_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lzw.spring.tx.service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改GoodsDao，让操作发生异常"><a href="#修改GoodsDao，让操作发生异常" class="headerlink" title="修改GoodsDao，让操作发生异常"></a>修改GoodsDao，让操作发生异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改商品库存 [减少]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> goods_id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATEX goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改TxTest-进行测试"><a href="#修改TxTest-进行测试" class="headerlink" title="修改TxTest 进行测试"></a>修改TxTest 进行测试</h4><p>验证不使用事务就会出现数据不一致现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用户购买商品业务</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsTest</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line">       goodsService.buyGoods(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="修改GoodsService"><a href="#修改GoodsService" class="headerlink" title="修改GoodsService"></a>修改GoodsService</h4><p>加入声明式事务注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Transactional</span> 注解解读</span></span><br><span class="line"><span class="comment">    * 1. 使用<span class="doctag">@Transactional</span> 可以进行声明式事务控制</span></span><br><span class="line"><span class="comment">    * 2. 即将标识的方法中的，对数据库的操作作为一个事务管理</span></span><br><span class="line"><span class="comment">    * 3. <span class="doctag">@Transactional</span> 底层使用的仍然是AOP机制</span></span><br><span class="line"><span class="comment">    * 4. 底层是使用动态代理对象来调用buyGoodsByTx</span></span><br><span class="line"><span class="comment">    * 5. 在执行buyGoodsByTx() 方法 先调用 事务管理器的 doBegin() , 调用 buyGoodsByTx()</span></span><br><span class="line"><span class="comment">    *    如果执行没有发生异常，则调用 事务管理器的 doCommit(), 如果发生异常 调用事务管理器的 doRollback()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       <span class="comment">//输出购买的相关信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="comment">//1.得到商品的价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">       <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">       goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">       <span class="comment">//3. 减少库存量</span></span><br><span class="line">       goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改tx-ioc-xml-1"><a href="#修改tx-ioc-xml-1" class="headerlink" title="修改tx_ioc.xml"></a>修改tx_ioc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器-对象</span></span><br><span class="line"><span class="comment">   1. DataSourceTransactionManager 这个对象是进行事务管理-debug源码</span></span><br><span class="line"><span class="comment">   2. 一定要配置数据源属性，这样指定该事务管理器 是对哪个数据源进行事务控制</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置启动基于注解的声明式事务管理功能--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改TxTest-进行测试-1"><a href="#修改TxTest-进行测试-1" class="headerlink" title="修改TxTest 进行测试"></a>修改TxTest 进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用户购买商品业务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取到容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">    <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line">    goodsService.buyGoodsByTx(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//这里我们调用的是进行了事务声明的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式事务机制-Debug"><a href="#声明式事务机制-Debug" class="headerlink" title="声明式事务机制-Debug"></a>声明式事务机制-Debug</h3><h4 id="doBegin"><a href="#doBegin" class="headerlink" title="doBegin"></a>doBegin</h4><p><strong>protected void doBegin(Object transaction, TransactionDefinition definition)中</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220612100840040-165833097372083.png"> </div> <h4 id="doCommit"><a href="#doCommit" class="headerlink" title="doCommit"></a>doCommit</h4><p><strong>protected void doCommit(DefaultTransactionStatus status)中</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220612101007683-165833097372082.png"> </div> <h4 id="doRollback"><a href="#doRollback" class="headerlink" title="doRollback"></a>doRollback</h4><p><strong>protected void doRollback(DefaultTransactionStatus status)中</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220612101122874-165833097372085.png"> </div> <h2 id="事务的传播机制"><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h2><p>事务的传播机制说明</p><ol><li><p>当有多个事务处理并存时，如何控制? </p></li><li><p>比如用户去购买两次商品(使用不同的方法)，每个方法都是一个事务，那么如何控制呢?</p></li><li><p>这个就是事务的传播机制，看一个具体的案例(如图)</p></li></ol><p>​         <img src="\images\Spring5.assets\image-20220612104455297-165833097372084.png" alt="image-20220612104455297" style="zoom:50%;" /><img src="D:\Study\VIP\主流框架\Spring5\笔记\Spring5.assets\image-20220612104514261.png" alt="image-20220612104514261" style="zoom:50%;" /></p><h3 id="事务传播机制种类"><a href="#事务传播机制种类" class="headerlink" title="事务传播机制种类"></a>事务传播机制种类</h3><p>事务传播的属性&#x2F;种类一览图</p><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</td></tr><tr><td>REQUIREDS_NEW</td><td>当前的方法必须启动新事务，并在它自己的事务内运行.如果有事务正在运行，应该将它挂起</td></tr><tr><td>SUPPORTS</td><td>如果有事务在运行，当前的方法就在这个事务内运行。否则它可以不运行在事务中</td></tr><tr><td>NOT_SUPPORTED</td><td>当前的方法不应该运行在事务中，如果有运行的事务，将它挂起</td></tr><tr><td>MANDATORY</td><td>当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常</td></tr><tr><td>NEVER</td><td>当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常</td></tr><tr><td>NESTED</td><td>如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行。否则，就启动一个新的事务，并在它自己的事务内运行</td></tr></tbody></table><p>事务传播的属性&#x2F;种类机制分析</p><p>重点分析了 REQUIRED 和 REQUIRED_NEW 两种事务传播属性</p><div align="center"> <img src="\images\Spring5.assets\image-20220612110035641-165833097372087.png"> </div> <div align="center"> <img src="\images\Spring5.assets\image-20220612110047056-165833097372088.png"> </div> <p>REQUIRES_NEW 和 REQUIRED 在处理事务的策略</p><ol><li>如果设置为 REQUIRES_NEW，buyGoods2 如果错误，不会影响到 buyGoods()反之亦然，即它们的<strong>事务是独立的</strong>。</li><li>如果设置为 REQUIRED，buyGoods2 和 buyGoods 是一个整体，只要有方法的事务错误，那么两个方法都不会执行成功。</li></ol><h3 id="事务的传播机制的设置方法"><a href="#事务的传播机制的设置方法" class="headerlink" title="事务的传播机制的设置方法"></a>事务的传播机制的设置方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> </span><br></pre></td></tr></table></figure><h3 id="事务的传播机制应用实例"><a href="#事务的传播机制应用实例" class="headerlink" title="事务的传播机制应用实例"></a>事务的传播机制应用实例</h3><h4 id="修改-GoodsDao"><a href="#修改-GoodsDao" class="headerlink" title="修改 GoodsDao"></a>修改 GoodsDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据商品id,返回对应的价格</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> Float <span class="title function_">queryPriceById2</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT price From goods Where goods_id=?&quot;</span>;</span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Float.class, id);</span><br><span class="line">       <span class="keyword">return</span> price;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改用户的余额 [减少用户余额]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> user_id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance2</span><span class="params">(Integer user_id, Float money)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user_account SET money=money-? Where user_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, money, user_id);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改商品库存 [减少]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> goods_id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount2</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改-GoodsService"><a href="#修改-GoodsService" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><p>增加 buyGoodsByTx2()，使用默认的传播机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lzw.spring.tx.dao.GoodsDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将 GoodsService对象注入到spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义属性GoodsDao</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，完成用户购买商品的业务, 这里主要是讲解事务管理</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  购买数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoods</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(goodsId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法是第二套进行商品购买的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx2</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//输出购买的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">        <span class="comment">//1.得到商品的价格</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById2(userId);</span><br><span class="line">        <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">        goodsDao.updateBalance2(userId, price * amount);</span><br><span class="line">        <span class="comment">//3. 减少库存量</span></span><br><span class="line">        goodsDao.updateAmount2(goodsId, amount);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-MultiplyService"><a href="#创建-MultiplyService" class="headerlink" title="创建  MultiplyService"></a>创建  MultiplyService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzw.spring.tx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LiAng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiplyService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. multiBuyGoodsByTx 方法中 有两次购买商品操作</span></span><br><span class="line"><span class="comment">     * 2. buyGoodsByTx 和 buyGoodsByTx2 都是声明式事务</span></span><br><span class="line"><span class="comment">     * 3. 当前 buyGoodsByTx 和 buyGoodsByTx2 使用的传播属性是默认的 REQUIRED</span></span><br><span class="line"><span class="comment">     * [会当做整体事务管理，比如 buyGoodsByTx 成功，但是buyGoodsByTx2失败，</span></span><br><span class="line"><span class="comment">     * 会造成整个事务失败，即会回滚buyGoodsByTx]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multiBuyGoodsByTx</span><span class="params">()</span>&#123;</span><br><span class="line">        goodsService.buyGoodsByTx(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        goodsService.buyGoodsByTx2(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改-GoodsDao-1"><a href="#修改-GoodsDao-1" class="headerlink" title="修改 GoodsDao"></a>修改 GoodsDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAmount2</span><span class="params">(Integer goods_id, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATEX goods_amount SET goods_num=goods_num-? Where goods_id=?&quot;</span>;</span><br><span class="line">       jdbcTemplate.update(sql, amount , goods_id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改-TxTest-并测试"><a href="#修改-TxTest-并测试" class="headerlink" title="修改 TxTest 并测试"></a>修改 TxTest 并测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试事务传播机制</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multiBuyGoodsByTxTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">MultiplyService</span> <span class="variable">multiplyService</span> <span class="operator">=</span> ioc.getBean(MultiplyService.class);</span><br><span class="line">       multiplyService.multiBuyGoodsByTx();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​<strong>可以验证：为 REQUIRED buyGoodsByTx 和 buyGoodsByTx2 是整体，只要有方法的事务错误，那么两个方法都不会执行成功。</strong></p><hr><h4 id="修改-GoodsService-1"><a href="#修改-GoodsService-1" class="headerlink" title="修改  GoodsService"></a>修改  GoodsService</h4><p>更改传播机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       <span class="comment">//输出购买的相关信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="comment">//1.得到商品的价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">       <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">       goodsDao.updateBalance(userId, price * amount);</span><br><span class="line">       <span class="comment">//3. 减少库存量</span></span><br><span class="line">       goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTx2</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       <span class="comment">//输出购买的相关信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="comment">//1.得到商品的价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById2(userId);</span><br><span class="line">       <span class="comment">//2. 减少用户的余额</span></span><br><span class="line">       goodsDao.updateBalance2(userId, price * amount);</span><br><span class="line">       <span class="comment">//3. 减少库存量</span></span><br><span class="line">       goodsDao.updateAmount2(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="再次进行测试"><a href="#再次进行测试" class="headerlink" title="再次进行测试"></a>再次进行测试</h4><p>​<strong>可以验证：设置为 REQUIRES_NEW buyGoodsByTx 如果错误，不会影响到 buyGoodsByTx02()反之亦然，也就 是说它们的事务是独立的。</strong></p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><div align="center"> <img src="\images\Spring5.assets\image-20220612112931664-165833097372089.png"> </div> <h3 id="事务隔离级别说明"><a href="#事务隔离级别说明" class="headerlink" title="事务隔离级别说明"></a>事务隔离级别说明</h3><ol><li>默认的隔离级别，就是 mysql 数据库默认的隔离级别一般为 REPEATABLE_READ。</li><li>看源码可知 Isolation.DEFAULT 是 ：Use the default isolation level of the underlying datastore。</li><li>查看数据库默认的隔离级别 SELECT @@global.tx_isolation。</li></ol><h3 id="事务隔离级别的设置和测试"><a href="#事务隔离级别的设置和测试" class="headerlink" title="事务隔离级别的设置和测试"></a>事务隔离级别的设置和测试</h3><h4 id="修改-GoodsService-2"><a href="#修改-GoodsService-2" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 在默认情况下，声明式事务的隔离级别是 REPEATABLE_READ</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxISOLATION</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//查询两次商品价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第一次查询的价格 = &quot;</span> + price);</span><br><span class="line"></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price2</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第二次查询的价格 = &quot;</span> + price2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><img src="\images\Spring5.assets\image-20220612114221236-165833097372091.png" alt="image-20220612114221236" style="zoom:80%;" /><h4 id="修改-TxTest"><a href="#修改-TxTest" class="headerlink" title="修改 TxTest"></a>修改 TxTest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试声明式事务的隔离级别</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxISOLATIONTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line"></span><br><span class="line">       goodsService.buyGoodsByTxISOLATION();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>断点调试时走到断点处，执行sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> price<span class="operator">=</span><span class="number">8</span> <span class="keyword">where</span> goods_id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220612114515969-165833097372090.png"> </div> <h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><div align="center"> <img src="\images\Spring5.assets\image-20220612114607701-165833097372092.png"> </div> <p><strong>在默认隔离级别(REPEATABLE_READ)下，两次读取的价格一样。</strong></p><h4 id="修改-GoodsService-3"><a href="#修改-GoodsService-3" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><p>测试 READ_COMMITTED 隔离级别情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 在默认情况下，声明式事务的隔离级别是 REPEATABLE_READ</span></span><br><span class="line"><span class="comment">    * 2. 我们将buyGoodsByTxISOLATION 的隔离界别设置为 Isolation.READ_COMMITTED</span></span><br><span class="line"><span class="comment">    * ，表示只要是提交的数据，在当前事务是可以读取最新数据的。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxISOLATION</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//查询两次商品价格</span></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第一次查询的价格 = &quot;</span> + price);</span><br><span class="line"></span><br><span class="line">       <span class="type">Float</span> <span class="variable">price2</span> <span class="operator">=</span> goodsDao.queryPriceById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第二次查询的价格 = &quot;</span> + price2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>继续使用断点调试</strong></p><div align="center"> <img src="\images\Spring5.assets\image-20220615193856967-165833097372094.png"> </div> <p><strong>断点调试时走到断点处，执行sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> price<span class="operator">=</span><span class="number">10</span> <span class="keyword">where</span> goods_id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><div align="center"> <img src="\images\Spring5.assets\image-20220612115110915-165833097372095.png"> </div> <p><strong>在 READ_COMMITTED 隔离级别下，两次读取的价格不一样</strong>。</p><h3 id="事务的超时回滚"><a href="#事务的超时回滚" class="headerlink" title="事务的超时回滚"></a>事务的超时回滚</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ol><li>如果一个事务执行的时间超过某个时间限制，就让该事务回滚。 </li><li>可以通过设置事务超时回顾来实现。</li></ol><h4 id="修改-GoodsService-4"><a href="#修改-GoodsService-4" class="headerlink" title="修改 GoodsService"></a>修改 GoodsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. <span class="doctag">@Transactional</span>(timeout = 2)</span></span><br><span class="line"><span class="comment">    * 2. timeout = 2 表示 buyGoodsByTxTimeout 如果执行时间超过了2秒</span></span><br><span class="line"><span class="comment">    *    ，该事务就进行回滚</span></span><br><span class="line"><span class="comment">    * 3. 如果没有设置 timeout，默认为-1，表示使用事务的默认超时时间，或者不支持</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(timeout = 2)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxTimeout</span><span class="params">(<span class="type">int</span> userId, <span class="type">int</span> goodsId, <span class="type">int</span> amount)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买信息 userId=&quot;</span> + userId + <span class="string">&quot; goodsId=&quot;</span> + goodsId + <span class="string">&quot; 购买数量=&quot;</span> + amount);</span><br><span class="line">       <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> goodsDao.queryPriceById(userId);</span><br><span class="line">       goodsDao.updateBalance(userId, price * amount);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//模拟超时</span></span><br><span class="line">       System.out.println(<span class="string">&quot;==========计时开始==========&quot;</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;==========4秒结束==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">       goodsDao.updateAmount(goodsId, amount);</span><br><span class="line">       System.out.println(<span class="string">&quot;用户购买成功~&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改-TxTest-测试"><a href="#修改-TxTest-测试" class="headerlink" title="修改 TxTest 测试"></a>修改 TxTest 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试 timeout 属性</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyGoodsByTxTimeoutTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;tx_ioc.xml&quot;</span>);</span><br><span class="line">       <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> ioc.getBean(GoodsService.class);</span><br><span class="line">       goodsService.buyGoodsByTxTimeout(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div align="center"> <img src="\images\Spring5.assets\image-20220612120531002-165833097372097.png"> </div> ]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/13/hello-world/"/>
      <url>/2022/07/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客！这也是我搭建的第一个博客网站，使用了Hexo+Node.js+md文档。在这里准备记录学习过程中记录的笔记和知识点，方便自己复习的同时也方便大家学习。本人小白有问题欢迎大家指出。</p><h2 id="搭建的第一个博客"><a href="#搭建的第一个博客" class="headerlink" title="搭建的第一个博客"></a>搭建的第一个博客</h2><h3 id="使用Hexo-Node-js"><a href="#使用Hexo-Node-js" class="headerlink" title="使用Hexo+Node.js"></a>使用Hexo+Node.js</h3><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>静态生成本地 hexo 界面</p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件</p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>提交到GitHub仓库</p><h3 id="New-articles"><a href="#New-articles" class="headerlink" title="New articles"></a>New articles</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">&quot;文章&quot;</span></span><br></pre></td></tr></table></figure><p>新建文章， <code>/blog/source/_post/文章.md</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
